@using BaseCustomerEntity.Database;
@using BaseCustomerMVC.Globals;
@using MongoDB.Driver;
@using EmailTemplate.Controllers;
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var classCenter = ViewBag.Centers as Dictionary<string, string>;
    var dataClass = ViewBag.Data as Dictionary<string,Dictionary<int,string[]>>;
}

<div id="list-data"></div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    var root = document.getElementById("list-data");
    var countSendMail = 0;
</script>
@{ 
            List<string> classId = classCenter.Keys?.ToList();

            for(int  i = 0; i < 1; i++)
            {
                string id = classId[i];
                string center = classCenter[id];
                var data = dataClass[id]; //Dictionary<int,string[]
                bool isHasW5 = data.Count > 4;
                string[] w1 = data[0];
                string[] w2 = data[1];
                string[] w3 = data[2];
                string[] w4 = data[3];
                List<string> w5 = new List<string>() { "0","0","0","0","0","0","0" };
                if(data.Count > 4)
                {
                    w5 = data[4].ToList();
                }
    <script>
        (function () {
            var center = "@center";
            var _class = '@id';
            var div = document.createElement("canvas");
            var id = "myChart_@id";
            div.id = id;
            root.appendChild(div);
            var isW5 = '@isHasW5'.toLowerCase() == "true";
            //console.log(isW5);
            var ctx = document.getElementById(id).getContext('2d');
            //classStudent.ToString(),stChuaVaoLop.ToString(),min8.ToString(),min5.ToString(),min2.ToString(),min0.ToString(),chualam.ToString()
            var labels = isW5 ? ['tuần 1', 'tuần 2', 'tuần 3', 'tuần 4', 'tuần 5'] : ['tuần 1', 'tuần 2', 'tuần 3', 'tuần 4'];

            var siso = isW5 ? [parseFloat('@w1[0]'), parseFloat('@w2[0]'), parseFloat('@w3[0]'), parseFloat('@w4[0]'), parseFloat('@w5[0]')] : [parseFloat('@w1[0]'), parseFloat('@w2[0]'), parseFloat('@w3[0]'), parseFloat('@w4[0]')];
            var stChuaVaoLop = isW5 ? [parseFloat('@w1[1]'), parseFloat('@w2[1]'), parseFloat('@w3[1]'), parseFloat('@w4[1]'), parseFloat('@w5[1]')] : [parseFloat('@w1[1]'), parseFloat('@w2[1]'), parseFloat('@w3[1]'), parseFloat('@w4[1]')];
            var min8 = isW5 ? [parseFloat('@w1[2]'), parseFloat('@w2[2]'), parseFloat('@w3[2]'), parseFloat('@w4[2]'), parseFloat('@w5[2]')] : [parseFloat('@w1[2]'), parseFloat('@w2[2]'), parseFloat('@w3[2]'), parseFloat('@w4[2]')]
            var min5 = isW5 ? [parseFloat('@w1[3]'), parseFloat('@w2[3]'), parseFloat('@w3[3]'), parseFloat('@w4[3]'), parseFloat('@w5[3]')] : [parseFloat('@w1[3]'), parseFloat('@w2[3]'), parseFloat('@w3[3]'), parseFloat('@w4[3]')]
            var min2 = isW5 ? [parseFloat('@w1[4]'), parseFloat('@w2[4]'), parseFloat('@w3[4]'), parseFloat('@w4[4]'), parseFloat('@w5[4]')] : [parseFloat('@w1[4]'), parseFloat('@w2[4]'), parseFloat('@w3[4]'), parseFloat('@w4[4]')]
            var min0 = isW5 ? [parseFloat('@w1[5]'), parseFloat('@w2[5]'), parseFloat('@w3[5]'), parseFloat('@w4[5]'), parseFloat('@w5[5]')] : [parseFloat('@w1[5]'), parseFloat('@w2[5]'), parseFloat('@w3[5]'), parseFloat('@w4[5]')]
            var chualam = isW5 ? [parseFloat('@w1[6]'), parseFloat('@w2[6]'), parseFloat('@w3[6]'), parseFloat('@w4[6]'), parseFloat('@w5[6]')] : [parseFloat('@w1[6]'), parseFloat('@w2[6]'), parseFloat('@w3[6]'), parseFloat('@w4[6]')]

            var chart = new Chart(ctx, {
                // The type of chart we want to create
                type: 'bar', //'bar', //line , radar, Doughnut and Pie , Polar Area,bubble,scatter

                // The data for our dataset
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Sĩ số',
                            backgroundColor: 'black',
                            borderColor: 'black',
                            data: siso
                        },
                        {
                            label: 'Học sinh chưa vào lớp',
                            backgroundColor: 'pink',
                            borderColor: 'pink',
                            data: stChuaVaoLop
                        },
                        {
                            label: '8.0 -> 10',
                            backgroundColor: 'red',
                            borderColor: 'red',
                            data: min8
                        },
                        {
                            label: '5.0 -> 7.9',
                            backgroundColor: 'green',
                            borderColor: 'green',
                            data: min5
                        },
                        {
                            label: '2.0 -> 4.9',
                            backgroundColor: 'blue',
                            borderColor: 'blue',
                            data: min2
                        },
                        {
                            label: '0.0 -> 1.9',
                            backgroundColor: 'violet',
                            borderColor: 'violet',
                            data: min0
                        },
                        {
                            label: 'Chưa làm',
                            backgroundColor: 'yellow',
                            borderColor: 'yellow',
                            data: chualam
                        }
                    ]
                },

                // Configuration options go here
                options: {
                    title: {
                        display: true,
                        text: 'Báo cáo tháng ' + (new Date().getMonth() + 1)
                    }
                },
                plugins: [{
                    afterRender: function () {
                        var x = chart.toBase64Image();
                        
                        //ajax =>  success => countSendMail++
                        $.ajax({
                            type: "POST",
                            //url: '/email/SendMonthlyReport',
                            url: 'https://beta.eduso.vn/home/SendMonthlyReport',
                            data: { image: x },
                            success: function (res) {
                                console.log(res)
                            }
                        });
                        countSendMail++;
                        if (countSendMail == '@(classId.Count-1)') {
                            
                        }
                    }
                }]
            });

        }());
        
    </script>
    }
}

@*@{ 
    int count = centers?.ToList() == null ? 0 : centers.Count();
    for(int i = 0; i < count; i++)
    {
        var center = centers.ElementAt(i);
        var classesActive = _classService.GetActiveClass(currentTime, center.ID);
        for(int j = 0; classesActive != null && j < classesActive.Count(); j++)
        {
            var dtren8 = "---";
            var dtren5 = "---";
            var dtren0 = "---";
            var dbang0 = "---";
            var currentClass = classesActive.ElementAt(j);

            var studentIds = _studentService.GetStudentsByClassId(currentClass.ID).Select(t => t.ID).ToList();
            var classStudent = studentIds.Count();
            var activeSchedules = _lessonScheduleService.CreateQuery().Find(o => o.ClassID == currentClass.ID && o.StartDate <= endWeek && o.EndDate >= startWeek)?.Project(t => new LessonScheduleEntity
            {
                LessonID = t.LessonID,
                ClassSubjectID = t.ClassSubjectID,
                StartDate = t.StartDate,
                EndDate = t.EndDate
            })?.ToList();
            var activeLessonIds = activeSchedules?.Select(t => t.LessonID)?.ToList();
            //Lay danh sach hoc sinh da hoc cac bai tren trong tuan
            var activeProgress = _lessonProgressService.CreateQuery().Find(
                x => studentIds.Contains(x.StudentID) && activeLessonIds.Contains(x.LessonID)
                && x.LastDate <= endWeek && x.LastDate >= startWeek).ToEnumerable();
            var activeStudents = activeProgress.Select(t => t.StudentID).Distinct();
            var stChuaVaoLop = classStudent - activeStudents.Count();

            var examIds = _lessonService.CreateQuery().Find(x => (x.TemplateType == 2 || x.IsPractice == true) && activeLessonIds.Contains(x.ID)).Project(x => x.ID).ToList();
            var chualam = 0;
            if (examIds.Count > 0) //co bai kiem tra
            {
                //ket qua lam bai cua hoc sinh trong lop
                var classResult = (from r in activeProgress.Where(t => examIds.Contains(t.LessonID) && t.Tried > 0)
                                   group r by r.StudentID
                                   into g
                                   select new StudentResult
                                   {
                                       StudentID = g.Key,
                                       ExamCount = g.Count(),
                                       AvgPoint = g.Sum(t => t.LastPoint) / examIds.Count
                                   }).ToList();
                //render ket qua hoc tap
                var o8 = classResult.Count(t => t.AvgPoint >= 80);
                var o5 = classResult.Count(t => t.AvgPoint >= 50 && t.AvgPoint < 80);
                var o0 = classResult.Count(t => t.AvgPoint > 0 && t.AvgPoint < 50);
                var e0 = classResult.Count(t => t.AvgPoint == 0);
                dtren8 = o8.ToString();
                dtren5 = o5.ToString();
                dtren0 = o0.ToString();
                dbang0 = e0.ToString();
                chualam = classStudent - (o0 + e0 + o5 + o8);
            }

    <script>
        var siso = '@classStudent';
        var hsch = '@stChuaVaoLop';
        var p8_10 = '@dtren8';
        var p5_7 = '@dtren5';
        var p2_5 = '@dtren0';
        var p0_2 = '@dbang0';
        var chualam = '@chualam';
        var div = document.createElement("canvas");
        var id = "myChart_@i@j";
        div.id = id;
        document.body.appendChild(div);
        var ctx = document.getElementById(id).getContext('2d');
        var chart = new Chart(ctx, {
            // The type of chart we want to create
            type: 'line',

            // The data for our dataset
            data: {
                labels: ['1', '2', '3', '4'],
                datasets: [{
                    label: 'ddiem 5',
                    backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(255, 99, 132)',
                    data: [0, 10, 5, 2]
                },
                {
                    label: 'diem 8',
                    backgroundColor: 'rgb(0, 0, 0)',
                    borderColor: 'rgb(0, 99, 0)',
                    data: [0, 100, 5, 2]
                },
                {
                    label: 'so hoc sinh',
                    backgroundColor: 'rgb(55, 99, 32)',
                    borderColor: 'rgb(55, 99, 32)',
                    data: [0, 0, 15, 2]
                },
                {
                    label: 'so hoc sinh chua tham gia',
                    backgroundColor: 'rgb(10,10, 10)',
                    borderColor: 'rgb(0, 99, 10)',
                    data: [10, 100, 15, 12]
                }]
            },

            // Configuration options go here
            options: {},
            plugins: [{
                afterRender: function () {
                    var x = chart.toBase64Image();

                    //callajax => sendimage vao server

                    var image = document.getElementById("imagess");
                    image.setAttribute("src", x);
                    // send image to email
                }
            }]
        });

    </script>

        }
    }
}
@functions{
    public async Task SendWeeklyReport(CenterEntity center, DateTime currentTime, bool isTest)
    {
        var startWeek = currentTime.AddDays(-7);
        var endWeek = startWeek.AddDays(6).AddHours(23).AddMinutes(59).AddMilliseconds(59);
        var headRole = _roleService.GetItemByCode("head-teacher");

        var headTeacher = _teacherService.CreateQuery().Find(x => x.IsActive == true && x.Centers.Any(y => y.CenterID == center.ID && y.RoleID == headRole.ID) && x.Email != "huonghl@utc.edu.vn");
        var subject = "";
        subject += $"Báo cáo kết quả học tập của {center.Name} từ ngày {startWeek.ToString("dd-MM-yyyy")} đến ngày {endWeek.ToString("dd-MM-yyyy")}";
        var body = "";
        var tbody = "";
        tbody = @"<table style='margin-top:20px; width: 100%; border: solid 1px #333; border-collapse: collapse'>
            <thead>
            <tr style='font-weight:bold;background-color: bisque'>
            <td rowspan='2' style='text-align:center; border: solid 1px #333; border-collapse: collapse;width:10px'>STT</td>
            <td rowspan='2' style='text-align:center; border: solid 1px #333; border-collapse: collapse;width:150px'>Lớp</td>
            <td rowspan='2' style='text-align:center; border: solid 1px #333; border-collapse: collapse;width:50px'>Sĩ số lớp</td>
            <td rowspan='2' style='text-align:center; border: solid 1px #333; border-collapse: collapse;width:50px'>Học sinh chưa học</td>
            <td colspan='4' style='text-align:center; border: solid 1px #333; border-collapse: collapse'>Kết quả luyện tập & kiểm tra</td>
            <td colspan='2' style='text-align:center; border: solid 1px #333; border-collapse: collapse'>Tiến độ</td>
            </tr>
            <tr style='font-weight:bold;background-color: bisque'>
            <td style='text-align:center; border: solid 1px #333; border-collapse: collapse;width:50px'>8.0 -> 10</td>
            <td style='text-align:center; border: solid 1px #333; border-collapse: collapse;width:50px'>5.0 -> 7.9</td>
            <td style='text-align:center; border: solid 1px #333; border-collapse: collapse;width:50px'>1.0 -> 4.9</td>
            <td style='text-align:center; border: solid 1px #333; border-collapse: collapse;width:50px'>0.0</td>
            <td style='text-align:center; border: solid 1px #333; border-collapse: collapse;width:150px'>Học liệu chính quy</td>
            <td style='text-align:center; border: solid 1px #333; border-collapse: collapse;width:150px'>Học liệu chuyên đề</td>
            </tr>
            </thead>
            <tbody>";
        var classesActive = _classService.GetActiveClass(currentTime, center.ID);//lay danh sach lop dang hoat dong
        var index = 1;
        long totalStudent = 0, totalstChuaVaoLop = 0; ;
        long tren8 = 0;
        long tren5 = 0;
        long tren0 = 0;
        long bang0 = 0;
        string[] style = { "background-color: aliceblueT", "background-color: whitesmoke" };

        foreach (var _class in classesActive.OrderBy(x => x.Name))
        {
            //Lay danh sach ID hoc sinh trong lop
            var studentIds = _studentService.GetStudentsByClassId(_class.ID).Select(t => t.ID).ToList();
            var classStudent = studentIds.Count();
            totalStudent += classStudent;
            //Lay danh sach ID bai hoc duoc mo trong tuan
            var activeSchedules = _lessonScheduleService.CreateQuery().Find(o => o.ClassID == _class.ID && o.StartDate <= endWeek && o.EndDate >= startWeek)?.Project(t => new LessonScheduleEntity
            {
                LessonID = t.LessonID,
                ClassSubjectID = t.ClassSubjectID,
                StartDate = t.StartDate,
                EndDate = t.EndDate
            })?.ToList();
            var activeLessonIds = activeSchedules?.Select(t => t.LessonID)?.ToList();
            //Lay danh sach hoc sinh da hoc cac bai tren trong tuan
            var activeProgress = _lessonProgressService.CreateQuery().Find(
                x => studentIds.Contains(x.StudentID) && activeLessonIds.Contains(x.LessonID)
                && x.LastDate <= endWeek && x.LastDate >= startWeek).ToEnumerable();
            var activeStudents = activeProgress.Select(t => t.StudentID).Distinct();
            //danh sach bai kiem tra
            var examIds = _lessonService.CreateQuery().Find(x => (x.TemplateType == 2 || x.IsPractice == true) && activeLessonIds.Contains(x.ID)).Project(x => x.ID).ToList();
            var stChuaVaoLop = classStudent - activeStudents.Count();
            var dtren8 = "---";
            var dtren5 = "---";
            var dtren0 = "---";
            var dbang0 = "---";
            if (examIds.Count > 0) //co bai kiem tra
            {
                //ket qua lam bai cua hoc sinh trong lop
                var classResult = (from r in activeProgress.Where(t => examIds.Contains(t.LessonID) && t.Tried > 0)
                                   group r by r.StudentID
                                   into g
                                   select new StudentResult
                                   {
                                       StudentID = g.Key,
                                       ExamCount = g.Count(),
                                       AvgPoint = g.Sum(t => t.LastPoint) / examIds.Count
                                   }).ToList();
                //render ket qua hoc tap
                var o8 = classResult.Count(t => t.AvgPoint >= 80);
                var o5 = classResult.Count(t => t.AvgPoint >= 50 && t.AvgPoint < 80);
                var o0 = classResult.Count(t => t.AvgPoint > 0 && t.AvgPoint < 50);
                var e0 = classResult.Count(t => t.AvgPoint == 0);
                tren8 += o8;
                tren5 += o5;
                tren0 += o0;
                bang0 += e0;
                dtren8 = o8.ToString();
                dtren5 = o5.ToString();
                dtren0 = o0.ToString();
                dbang0 = e0.ToString();
            }
            totalstChuaVaoLop += stChuaVaoLop;
            var groupedSchedule = (from r in activeSchedules
                                   group r by r.ClassSubjectID into g
                                   select g.OrderByDescending(t => t.StartDate).FirstOrDefault());

            var subjectsInfo = (from r in groupedSchedule
                                let lesson = _lessonService.GetItemByID(r.LessonID)
                                let classSbj = _classSubjectService.GetItemByID(r.ID)
                                select new ClassSubjectInfo
                                {
                                    CourseName = classSbj.CourseName,
                                    LastLessonTitle = lesson.Title,
                                    Type = classSbj.TypeClass,
                                    LastTime = r.StartDate
                                })?.ToList();
            var standardSbj = "";
            var extendSbj = "";
            foreach (var sbj in subjectsInfo)
            {
                var content = "<table>" +
                        "<tr>" +
                            $"<td style='text-align: left'>{sbj.CourseName} - Bài học cuối: {sbj.LastLessonTitle} ({sbj.LastTime.ToLocalTime().ToString("dd-MM-yyyy")})</td>" +
                        "</tr>" +
                        "</table>";
                if (sbj.Type == CLASS_TYPE.STANDARD)
                    standardSbj += content;
                else
                    extendSbj += content;
            }

            if (index % 2 == 0)
            {
                tbody += $"<tr style='{style[1]}'>";
            }
            else
            {
                tbody += $"<tr style='{style[0]}'>";
            }

            tbody +=
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse'>{index}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse'>{_class.Name}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse'>{classStudent}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse'>{(stChuaVaoLop > 0 ? stChuaVaoLop.ToString() : "---")}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse'>{dtren8}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse'>{dtren5}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse'>{dtren0}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse'>{dbang0}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse'>{standardSbj}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse'>{extendSbj}</td></tr>";
        }
        tbody += @"<tr style='font-weight: 600'>
<td style='text-align:center; border: solid 1px #333; border-collapse: collapse'></td>
<td style='text-align:center; border: solid 1px #333; border-collapse: collapse;text-align: left;font-weight: 600'>Tổng</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse;font-weight: 600'>{totalStudent}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse;font-weight: 600'>{totalstChuaVaoLop}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse;font-weight: 600'>{tren8}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse;font-weight: 600'>{tren5}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse;font-weight: 600'>{tren0}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse;font-weight: 600'>{bang0}</td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse;font-weight: 600'></td>" +
                $"<td style='text-align:center; border: solid 1px #333; border-collapse: collapse;font-weight: 600'></td>" +
            @"</tr>
<tbody>
</table>";
        body += tbody;

        var toAddress = headTeacher.Project(t => t.Email).ToList();
        var bccAddress = new List<string> { "nguyenvanhoa2017602593@gmail.com", "vietphung.it@gmail.com", "huonghl@utc.edu.vn" };
        if (isTest)
        {
            toAddress = new List<string> { "nguyenvanhoa2017602593@gmail.com", "vietphung.it@gmail.com" };
            bccAddress = null;
        }
        await _mailHelper.SendBaseEmail(toAddress, subject, body, MailPhase.WEEKLY_SCHEDULE, null, bccAddress);
    } }
}*@