@using Microsoft.Extensions.Configuration;
@inject IConfiguration _config;
<script src="https://www.gstatic.com/firebasejs/8.2.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.2.1/firebase-messaging.js"></script>

<script>
    // Your web app's Firebase configuration
    var firebaseConfig = {
        apiKey: "AIzaSyAw-gz7P_QZdpJ2GkjVvfZgjtYIq5e1lyU",
        authDomain: "mymesseger-d1532.firebaseapp.com",
        databaseURL: "https://mymesseger-d1532.firebaseio.com",
        projectId: "mymesseger-d1532",
        storageBucket: "mymesseger-d1532.appspot.com",
        messagingSenderId: "512808405717",
        appId: "1:512808405717:web:e53712f11fa5bb8d19305c"
    };
    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);

    var messaging = firebase.messaging();

    messaging.getToken({ vapidKey: 'BNPGLjWR4B3vVMWh6eq34qI4oJ0ZkwVOp10-cKZkhVuPRTfrBHW1e3rpxmV3ukvIKoUC4SJoBDx9lzgOt9OMNFs' }).then(function (currentToken) {
        if (currentToken) {
            sendTokenToServer(currentToken);
            updateUIForPushEnabled(currentToken);
        } else {
            // Show permission request.
            console.log('No registration token available. Request permission to generate one.');
            // Show permission UI.
            updateUIForPushPermissionRequired();
            setTokenSentToServer(false);
        }
    }).catch((err) => {
        console.log('An error occurred while retrieving token. ', err);
        showToken('Error retrieving registration token. ', err);
        setTokenSentToServer(false);
    });

    messaging.onMessage(function (payload){
        console.log('Message received. ', payload);
        // ...
    });
    function showToken(currentToken) {
        //// Show token in console and UI.
        //const tokenElement = document.querySelector('#token');
        //tokenElement.textContent = currentToken;
    }

    // Send the registration token your application server, so that it can:
    // - send messages back to this app
    // - subscribe/unsubscribe the token from topics
    function sendTokenToServer(currentToken) {
        if (!isTokenSentToServer()) {
            console.log('Sending token to server...');
            // TODO(developer): Send the current token to your server.
            setTokenSentToServer(true);
        } else {
            console.log('Token already sent to server so won\'t send it again ' +
                'unless it changes');
        }

    }

    function isTokenSentToServer() {
        return window.localStorage.getItem('sentToServer') === '1';
    }

    function setTokenSentToServer(sent) {
        window.localStorage.setItem('sentToServer', sent ? '1' : '0');
    }

    function showHideDiv(divId, show) {
        const div = document.querySelector('#' + divId);
        if (show) {
            div.style = 'display: visible';
        } else {
            div.style = 'display: none';
        }
    }

    function requestPermission() {
        console.log('Requesting permission...');
        // [START request_permission]
        Notification.requestPermission().then((permission) => {
            if (permission === 'granted') {
                console.log('Notification permission granted.');
                // TODO(developer): Retrieve a registration token for use with FCM.
                // [START_EXCLUDE]
                // In many cases once an app has been granted notification permission,
                // it should update its UI reflecting this.
                resetUI();
                // [END_EXCLUDE]
            } else {
                console.log('Unable to get permission to notify.');
            }
        });
        // [END request_permission]
    }

    function deleteToken() {
        // Delete registraion token.
        // [START delete_token]
        messaging.getToken().then((currentToken) => {
            messaging.deleteToken(currentToken).then(() => {
                console.log('Token deleted.');
                setTokenSentToServer(false);
                // [START_EXCLUDE]
                // Once token is deleted update UI.
                resetUI();
                // [END_EXCLUDE]
            }).catch((err) => {
                console.log('Unable to delete token. ', err);
            });
            // [END delete_token]
        }).catch((err) => {
            console.log('Error retrieving registration token. ', err);
            showToken('Error retrieving registration token. ', err);
        });

    }

    // Add a message to the messages element.
    function appendMessage(payload) {
        const messagesElement = document.querySelector('#messages');
        const dataHeaderElement = document.createElement('h5');
        const dataElement = document.createElement('pre');
        dataElement.style = 'overflow-x:hidden;';
        dataHeaderElement.textContent = 'Received message:';
        dataElement.textContent = JSON.stringify(payload, null, 2);
        messagesElement.appendChild(dataHeaderElement);
        messagesElement.appendChild(dataElement);
    }

    // Clear the messages element of all children.
    function clearMessages() {
        const messagesElement = document.querySelector('#messages');
        while (messagesElement.hasChildNodes()) {
            messagesElement.removeChild(messagesElement.lastChild);
        }
    }

    function updateUIForPushEnabled(currentToken) {
        //showHideDiv(tokenDivId, true);
        //showHideDiv(permissionDivId, false);
        //showToken(currentToken);
    }

    function updateUIForPushPermissionRequired() {
        showHideDiv(tokenDivId, false);
        showHideDiv(permissionDivId, true);
    }

</script>