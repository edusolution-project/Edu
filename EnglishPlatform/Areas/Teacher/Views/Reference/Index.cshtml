@{

    ViewData["Title"] = "Tài liệu tham khảo";
    Layout = "~/Views/Shared/_LayoutTeacher_NewUI.cshtml";
    var myClasses = ViewBag.AllClass as List<BaseCustomerEntity.Database.ClassEntity>;
    var owner = ViewBag.User as string;
    var subjects = ViewBag.Subjects as List<BaseCustomerEntity.Database.SubjectEntity>;
    var grades = ViewBag.Grades as List<BaseCustomerEntity.Database.GradeEntity>;
    var isHeadteacher = ViewBag.IsHeadTeacher ?? false;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    string processUrl(string act, string ctrl, Object param = null)
    {
        string url = Url.Action(act, ctrl, param);

        return $"/{center}{url}";
    }
}

<script src="/libs/quill-editor/quill.min.js"></script>
<script src="/libs/quill-editor/quill-vue.min.js"></script>
<link href="/libs/quill-editor/quill.core.css" rel="stylesheet">
<link href="/libs/quill-editor/quill.snow.css" rel="stylesheet">
<link href="/libs/quill-editor/quill.bubble.css" rel="stylesheet">
<script>
    setActiveMenu("reference");
</script>

<section class="module" id="dashboard_content">
    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-header" v-cloak>
        <div class="flex border-b flex-wrap align-items-center">
            <div class="box filter-box col-12 col-md-2 m-1">
                <select v-model="subject">
                    <option value="">Chọn chương trình</option>
                    <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                </select>
            </div>
            <div class="box filter-box col-12 col-md-2 m-1">
                <select v-model="grade">
                    <option value="">Chọn cấp độ</option>
                    <option v-for="(item,k) in list_grades_full" :value="item.ID" v-if="item.SubjectID == subject">{{item.Name}}</option>
                </select>
            </div>
            <div class="box filter-box m-1 col-12 col-md-2">
                <select v-model="range">
                    <option value="">-- Chọn phạm vi chia sẻ --</option>
                    <option value="@BaseCustomerEntity.Database.REF_RANGE.ALL">Chung</option>
                    <option value="@BaseCustomerEntity.Database.REF_RANGE.TEACHER">Tất cả lớp phụ trách</option>
                    <option value="@BaseCustomerEntity.Database.REF_RANGE.CLASS">Lớp</option>
                </select>
            </div>

            <div class="box filter-box m-1 col-12 col-md-2 m-1" v-if="range=='@BaseCustomerEntity.Database.REF_RANGE.CLASS'">
                <select v-model="target">
                    <option value="">-- Chọn lớp --</option>
                    @if (myClasses != null && myClasses.Count > 0)
                    {
                        foreach (var _class in myClasses)
                        {
                            <option value="@_class.ID">@_class.Name</option>
                        }
                    }
                </select>
            </div>
            <div class="search-box m-1 col-12 col-md-2 m-1">
                <button><i class="ic ic-find"></i></button>
                <input type="text" name="" v-model="searchTerm" placeholder="Tên tài liệu">
            </div>
            <b-button class="btn-addevent col-12 col-md-2 ml-auto" v-on:click="showAddModal()"><i class="ti-plus"></i></b-button>
        </div>
    </div>
    <div class="card-body" v-cloak>
        <div class="row ls-doc" v-if="tableData.length > 0">
            <div class="col-md-6" v-for="data in tableData">
                <div class="flex p-2 mb-2 inner" style="border-top: dotted 1px #DDD">
                    <a href="#" v-on:click="doMainAct(data)" title="{{data.Title}}" class="thumb" style="max-width:130px; min-width:130px;">
                        <img :src="cacheStatic(data.Image,130)" alt="" v-if="data.Image != null" class="w-100">
                        <img src="~/pictures/book.jpg" alt="" v-else class="w-100">
                    </a>
                    <div class="entry p-0">
                        <div>
                            <div>
                                <a href="#" v-on:click="doMainAct(data)" title="{{data.Title}}" class="title">{{data.Title}}</a>
                            </div>
                            @*<div>
                                    <div class="rating"><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i></div>
                                    <div class="author pt-2"><i class="icofont icofont-teacher"></i> {{data.OwnerName}}</div>
                                </div>*@
                        </div>
                        <div class="pt-0 pb-2">
                            <p>{{(data.Description != 'null') ? domDecoder(data.Description) : ''}}</p>
                        </div>
                        <div>
                            <a href="#" title="Mở link" class="text-success font-weight-bold mr-2" style="min-width:auto" v-on:click="openLink(data)" v-if="data.Link != null && data.Link.length > 0"><i class="fas fa-link"></i> ({{data.Linked}})</a>
                            <a href="#" title="Mở file" class="text-success font-weight-bold mr-2" style="min-width:auto" v-on:click="showPreview(data)" v-if="data.Media!= null && isDocType(data.Media.Extension)"><i class="far fa-eye font-weight-bold"></i> ({{data.Viewed}})</a>
                            <a href="#" class="text-success font-weight-bold mr-2" v-if="data.Media != null && data.isDownload" v-on:click="download(data)" :title="data.Media.Name"><i class="fas fa-cloud-download-alt"></i> ({{data.Downloaded}})</a>
                            <a href="#" title="Xóa" class="text-danger mr-2" v-on:click="deleteData(data)" v-if="data.OwnerID == '@owner'"><i class="far fa-trash-alt font-weight-bold"></i></a>
                            <a href="#" title="Sửa" class="text-secondary mr-2" v-on:click="showAddModal(data)" v-if="data.OwnerID == '@owner'"><i class="fas fa-edit font-weight-bold"></i></a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row ls-doc text-center d-block" v-else>
                Không có tài liệu
            </div>
        </div>
        <div class="box margin-t20 flex" v-if="tableData.length > 0">
            <div class="paging-view">
                Hiển thị:
                <select v-model="view" v-on:change="getData()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                <div class="right">
                    <b-pagination v-model="page"
                                  :total-rows="totalRec"
                                  :per-page="view"
                                  v-on:input="getData()"></b-pagination>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts{
    <script>
        Vue.use(VueQuillEditor)
        new Vue({
            el: "#main_content",
            mounted() {
                this.getData();
                this.list_subject = @Html.Raw(Json.Serialize(subjects));
                this.list_grades_full = @Html.Raw(Json.Serialize(grades));
                window.changeAddSubject = this.changeAddSubject;
            },
            components: {
          	    LocalQuillEditor: VueQuillEditor.quillEditor
            },
            data: {
                isLoading: false,
                editorOption: {
                    theme: 'snow'
                },
                range: '@BaseCustomerEntity.Database.REF_RANGE.ALL',
                target: '',
                searchTerm: '',
                tableData: [],
                view: 30,
                totalRec: 0,
                page: 1,
                addItem: {
                    ID: '',
                    Title: '',
                    Range: '',
                    Link: '',
                    Target: '',
                    Description: '',
                    FileName: '',
                    file: null,
                    coverName: '',
                    cover: null,
                    Image: '',
                    subjectID: '',
                    gradeID: '',
                    isDownload: false,
                    tags: '',
                    isCheckDownload: false,
                },
                linkFile: '',
                typeFile:[
                    "application/msword",
                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "application/vnd.ms-excel",
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "application/pdf",
                    "application/vnd.ms-powerpoint",
                    "application/vnd.openxmlformats-officedocument.presentationml.presentation"
                ],
                allow_doc_ext: [".doc", ".docx", ".xlsx", ".xls", ".ptt", "pttx", ".pdf"],
                title: '',
                subject: '',
                grade: '',
                list_subject: [],
                list_grades_full: [],
                subjectID: '',
                gradeID:'',
            },
            watch : {
                searchTerm: function(){
                    if(this.searchTimeout != null)
                        clearTimeout(this.searchTimeout)
                    var fn = this.getData
                    this.searchTimeout = setTimeout(function(){
                        fn()
                    }, 500)
                },
                subject: function () {
                    this.getData()
                },
                grade: function () {
                    this.getData()
                },
                range: function(){
                    this.getData()
                },
                target: function(){
                    this.getData()
                },
                gradeID: function () {
                    this.getData()
                },
                subjectID: function () {
                    this.getData()
                },
            },
            methods: {
                getData() {
                    console.log(this.list_grades_full);
                    let _that = this
                    let _form = new FormData()
                    _form.append('SearchText', _that.searchTerm)
                    _form.append('Range', _that.range)
                    _form.append('Target', _that.target)
                    _form.append('PageSize', _that.view)
                    _form.append('PageIndex', _that.page)
                    _form.append('SubjectID', _that.subjectID)
                    if (_that.subjectID != '') {
                        _form.append('GradeID', _that.gradeID)
                    }
                    else {
                        _form.append('GradeID', '')
                    }
                    let _url = '@processUrl("GetList", "Reference")'

                    axios.post(_url, _form)
                        .then(response => {
                            //debugger
                            _that.tableData = response.data.Data;
                            this.tableData = _that.tableData
                            this.totalRec = response.data.Model.totalRecord
                            console.log(totalRec)
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = tt / this.view + (tt % this.view > 0 ? 1 : 0);
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },
                showAddModal(obj) {
                    let _that = this;
                    if (obj == null) {
                        _that.addItem.ID = '';
                        _that.addItem.Title = '';
                        _that.addItem.Range = '@BaseCustomerEntity.Database.REF_RANGE.ALL';
                        _that.addItem.Link = '';
                        _that.addItem.Target = '';
                        _that.addItem.Description = '';
                        _that.addItem.FileName = '';
                        _that.addItem.coverName = '';
                        _that.addItem.subjectID = "";
                        _that.addItem.gradeID = '';
                        _that.addItem.Image = '';
                        _that.addItem.isDownload = false;
                        _that.addItem.Tags = '';
                        _that.addItem.cover = null;
                        _that.addItem.isCheckDownload = false;
                    }
                    else {
                        _that.addItem.ID = obj.ID;
                        _that.addItem.Title = obj.Title;
                        _that.addItem.Range = obj.Range;
                        _that.addItem.Link = obj.Link;
                        _that.addItem.Description = obj.Description;
                        _that.addItem.Target = obj.Target;
                        _that.addItem.subjectID = obj.SubjectID;
                        _that.addItem.gradeID = obj.GradeID;
                        _that.addItem.isDownload = obj.isDownload;
                        _that.addItem.tags = obj.Tags;
                        if (obj.Media != null) {
                            _that.addItem.FileName = obj.Media.Name;
                            _that.addItem.isCheckDownload = true;
                        }
                        else {
                            _that.addItem.FileName = '';
                            _that.addItem.isCheckDownload = false;
                        }
                        if (obj.Image != null) {
                            _that.addItem.Image = obj.Image;
                            _that.addItem.cover = null;
                        }

                    }
                    _that.addItem.file = {};
                    _that.$bvModal.show('modal_event')
                },
                openLink(obj) {
                    obj.Linked = obj.Linked + 1;
                    window.open('@processUrl("OpenLink", "Reference")/' + obj.ID);
                },
                download(obj) {
                    if (obj.Media == null)
                        return false;
                    obj.Downloaded = obj.Downloaded + 1;
                    window.open('@processUrl("Download", "Reference")/' + obj.ID);
                },
                updateData() {
                    let _that = this
                    let _form = new FormData()

                    if (_that.addItem.Title == '') {
                        swal.fire({
                            title: "Có lỗi",
                            text: "Vui lòng nhập đủ thông tin",
                            icon: 'warning',
                        });
                        this.$refs["addName"].focus();
                        return false;
                    }
                    _form.append('ID', _that.addItem.ID)
                    _form.append('Title', _that.addItem.Title)
                    _form.append('Link', _that.addItem.Link)
                    _form.append('Target', _that.addItem.Target)
                    _form.append('Name', _that.addItem.Title)
                    _form.append('Description', _that.addItem.Description)
                    _form.append('Range', _that.addItem.Range)
                    _form.append('subjectID', _that.addItem.subjectID)
                    _form.append('gradeID', _that.addItem.gradeID)
                    _form.append('isDownload', _that.addItem.isDownload)
                    _form.append('Tags', _that.addItem.tags)

                    if (_that.addItem.file) {
                        _form.append('fileUpload', this.addItem.file)
                    }
                    if (_that.addItem.cover) {
                        _form.append('coverImage', this.addItem.cover)
                    }

                    let _url = '@processUrl("Save", "Reference")'
                    this.isLoading = true;
                    axios.post(_url, _form)
                        .then(response => {
                            _that.isLoading = false;
                            if (response.Error == null) {
                                Swal.fire(
                                    'Đã cập nhât!',
                                    'Tài liệu đã cập nhật thành công',
                                    'success'
                                )
                                this.getData()
                                this.hideModal()
                            }
                            else {
                                Swal.fire(
                                    'Có lỗi!',
                                    response.Error,
                                    'error'
                                )
                            }

                        }).catch(e => { })
                },
                deleteData(obj) {
                    Swal.fire({
                        title: 'Chắc chắn xóa?',
                        text: "Bạn sẽ không thể khôi phục lại dữ liệu này sau khi xóa",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        cancelButtonText: 'Hủy',
                        confirmButtonText: 'Đồng ý'
                    }).then((result) => {
                        if (result.value == true) {
                            let _form = new FormData()
                            _form.append('ID', obj.ID)
                            let _url = '@processUrl("Remove", "Reference")'
                            axios.post(_url, _form)
                                .then(response => {
                                    if (response.Error == null) {
                                        Swal.fire(
                                            'Đã xóa!',
                                            'Tài liệu của bạn đã được xóa',
                                            'success'
                                        )
                                        this.getData()
                                    }
                                    else {
                                        Swal.fire(
                                            'Có lỗi!',
                                            response.Error,
                                            'error'
                                        )
                                    }

                                }).catch(e => { })
                        }
                    })
                },
                changeFile() {
                    var listFiles = $('#modal_event input[type=file]')

                    if (listFiles[1].files[0] != null) { //file dinh kem
                        if (this.typeFile.includes(listFiles[1].files[0]['type'])) {
                            this.addItem.FileName = listFiles[1].files[0].name
                            this.addItem.file = listFiles[1].files[0]
                            this.addItem.isCheckDownload = true;
                        }
                        else {
                            alert("File không đúng định dạng, chọn lại!")
                            this.addItem.isCheckDownload = false;
                            return false;
                        }
                    }
                    if (listFiles[0].files[0] != null) { //anh dai dien
                        this.addItem.coverName = listFiles[0].files[0].name
                        this.addItem.cover = listFiles[0].files[0]
                    }
                    //debugger
                },
                domDecoder(str) {
                    if (str == null)
                        return "";
                    //console.log(str);
                    let parser = new DOMParser();
                    let dom = parser.parseFromString('<!doctype html><body>' + str, 'text/html');
                    return dom.body.textContent;
                },
                shortenString(str) {
                    if (str == null || str.length <= 15)
                        return "";
                    return str.substring(0, 15) + "..."
                },
                hideModal() {
                    $('.close').click();
                },
                showPreview(obj) {
                    let _form = new FormData()
                    _form.append('ID', obj.ID)
                    var link = obj.Media.Path;
                    var title = obj.Title;
                    let _url = '@processUrl("View", "Reference")'
                    axios.post(_url, _form)
                        .then(response => {
                            obj.Viewed = obj.Viewed + 1;
                        }).catch(e => { })
                    //console.log(obj);
                    if (!link.startsWith("http")) link = "https://eduso.vn" + link;
                    this.linkFile = link;
                    this.title = title;
                    if (this.isMobile())
                        return this.download(obj);
                    else
                        this.$bvModal.show('modal_preview')
                },
                doMainAct(obj) {
                    if (obj.Media != null && this.isDocType(obj.Media.Extension)) {
                        this.showPreview(obj)
                    }
                    else if (obj.Link != null && obj.Link.length > 0) {
                        this.openLink(obj)
                    }
                    else if (obj.Media != null && obj.isDownload) {
                        this.download(obj)
                    }
                },
                isMobile() {
                    var isMobile = false; //initiate as false
                    // device detection
                    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
                        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) {
                        isMobile = true;
                    }
                    return isMobile;
                },
                isDocType(path) {
                    if (path == null || path == "") return false;
                    var idx = path.toString().lastIndexOf('.');
                    if (idx <= 0) {
                        var ext = path.substring(idx, path.length - idx);
                        return this.allow_doc_ext.findIndex(t => t === ext) >= 0;
                    }
                },
                cacheStatic(src, width) {
                    if (src.startsWith("http"))
                        return src;
                    return "https://static.eduso.vn/" + src + "?w=" + width;
                },
                changeAddSubject(obj) {
                    let _that = this;
                    //debugger
                    if (_that.list_grades_full.findIndex(item => obj == item.ID) == -1) {
                        _that.list_grades_full.forEach(function (sbj) {
                            //console.log(obj.UID)
                            if (sbj.ID == obj.UI) {
                                sbj.GradeID = ''
                                sbj.CourseID = ''
                                sbj.TeacherID = ''
                                sbj.SkillID = ''
                                return
                            }
                        });
                    }
                },
                renderContent(linkFile) {
                    var html = "";
                    if (linkFile.toLowerCase().endsWith('.pdf'))
                        html = "<embed class='embed-frame col-sm-12' frameborder='0' src='" + linkFile + "#toolbar=0&navpanes=0&scrollbar=0&view=FitH' style='min-height:500px;'></embed>";
                    else {
                        if (!linkFile.startsWith("http")) linkFile = "https://eduso.vn" + linkFile;
                        html = "<iframe class='embed-frame col-sm-12' frameborder='0' src='https://view.officeapps.live.com/op/embed.aspx?src=" + linkFile + "' style='min-height:500px;'></iframe>";
                    }
                    let parser = new DOMParser();
                    let dom = parser.parseFromString('<!doctype html><body>' + html, 'text/html');
                    return dom.body.innerHTML;

                }
            }
        });
    </script>
}

@section Modals{
    <b-modal :no-close-on-backdrop="true" id="modal_event" centered title="Cập nhật tài liệu tham khảo" size="xl">
        <b-col class="form-group">
            <label for="">Tên tài liệu</label>
            <input type="text" name="" value="" class="form-control" placeholder="Tên tài liệu" v-model="addItem.Title">
        </b-col>

        <b-col class="form-group flex">
            <label for="">Chuyên mục: </label>
            <select class="col-sm-4 form-control ml-2" v-model="addItem.subjectID" v-on:change="changeAddSubject(addItem.subjectID)">
                <option value="">----</option>
                <option v-for="(item,k) in list_subject" :value="item.ID" v-if="addItem.subjectID==item.ID" selected>{{item.Name}}</option>
                <option v-for="(item,k) in list_subject" :value="item.ID" v-else>{{item.Name}}</option>
            </select>
            <select class="col-sm-4 form-control ml-2" v-model="addItem.gradeID">
                <option value="">----</option>
                <option v-for="(item,k) in list_grades_full" :value="item.ID" v-if="item.SubjectID==addItem.subjectID">{{item.Name}}</option>
            </select>
        </b-col>

        <b-col class="form-group row">
            <div class="col-sm-4">
                <label for="">Ảnh bìa</label>
                <input type="file" v-on:change="changeFile()">
            </div>
            <div class="col-sm-8">
                <img :src="addItem.Image" style="max-width:200px;max-height:150px" />
            </div>
        </b-col>

        <b-col class="form-group">
            <label for="">Mô tả</label>
            <quill-editor v-model="addItem.Description"
                          ref="quillEditorA"
                          :options="editorOption">
            </quill-editor>
        </b-col>
        <b-col class="form-group">
            <label for="">Link liên kết</label>
            <input type="text" name="" value="" class="form-control" placeholder="Link liên kết" v-model="addItem.Link">
        </b-col>
        <b-col class="form-group">
            <label class="col-form-label">File đính kèm:</label>
            <i class="ic ic-paper-clip"></i><label class="p-1" ref="filedsp" v-on:click="$refs.file.click()">{{shortenString(addItem.FileName)}} - (Click để chọn)</label>
            <input type="file" ref="file" class="d-none" v-on:change="changeFile()" accept=".doc, .docx, .xlsx, .xls, .ptt, pttx, .pdf">
        </b-col>
        <b-col class="form-group" v-if="addItem.isCheckDownload">
            <label class="col-form-label">Download:</label>
            <input type="checkbox" name="isDownload" id="isDownload" v-model="addItem.isDownload">
        </b-col>

        <b-col class="form-group">
            <label class="col-form-label">Phạm vi chia sẻ:</label>
            <select name="range" onchange="ChooseRange()" id="refRange" class="form-control d-inline w-25" v-model="addItem.Range">
                <option value="@BaseCustomerEntity.Database.REF_RANGE.ALL">Chung</option>
                <option value="@BaseCustomerEntity.Database.REF_RANGE.TEACHER">Tất cả các lớp phụ trách</option>
                <option value="@BaseCustomerEntity.Database.REF_RANGE.CLASS">Lớp</option>
            </select>
            <select name="target" id="refTarget" v-model="addItem.Target" class="form-control d-inline w-25" v-if="addItem.Range == '@BaseCustomerEntity.Database.REF_RANGE.CLASS'">
                <option value="">-- Chọn lớp --</option>
                @if (myClasses != null && myClasses.Count > 0)
                {
                    foreach (var _class in myClasses)
                    {
                        <option value="@_class.ID">@_class.Name</option>
                    }
                }
            </select>
        </b-col>

        <b-col class="form-group">
            <label for="">Tag</label>
            <input type="text" name="" value="" class="form-control" placeholder="Tag" v-model="addItem.tags">
        </b-col>

        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="updateData()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>

    <b-modal :no-close-on-backdrop="true" id="modal_preview" centered :title="title" size="xl">
        <b-col class="form-group">
            <embed class="embed-frame col-sm-12" frameborder="0" :src="linkFile + '#toolbar=0&navpanes=0&scrollbar=0&view=FitH'" v-if="linkFile.toLowerCase().endsWith('.pdf')" style="min-height:500px;"></embed>
            <iframe class="embed-frame col-sm-12" frameborder="0" :src="'https://view.officeapps.live.com/op/embed.aspx?src='+linkFile" v-else style="min-height:500px;"></iframe>
        </b-col>

        <template v-slot:modal-footer="{ ok, cancel}">
            @*<template v-if="isLoading">
                    <b-button>Đang thực hiện...</b-button>
                </template>*@
            <template>
                <b-button variant="danger" v-on:click="hideModal()">Đóng</b-button>
            </template>
        </template>
    </b-modal>
}