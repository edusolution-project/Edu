@{
    ViewData["Title"] = "Dashboard - " + DateTime.Now.ToString("D");
    Layout = "~/Views/Shared/_LayoutTeacher_NewUI.cshtml";
    var subjects = ViewBag.Subjects as List<BaseCustomerEntity.Database.SubjectEntity>;
    var grades = ViewBag.Grades as List<BaseCustomerEntity.Database.GradeEntity>;
}
<script>
    setActiveMenu("curriculum");
</script>

<section class="module" id="dashboard_content">
    <div class="card-header">
        <div class="flex border-b padding-b25 justify-content-between">
            <div class="flex">
                <div class="box filter-box w-152">
                    <select v-model="subject">
                        <option value="">Môn học</option>
                        <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                    </select>
                </div>
                <div class="box filter-box w-152">
                    <select name="" v-model="grade">
                        <option value="">Cấp độ</option>
                        <option v-for="(item,k) in list_grades" :value="item.ID">{{item.Name}}</option>
                    </select>
                </div>
            </div>
            <b-button v-b-modal.modal_event class="btn-addevent" v-on:click="showEditItem()"><i class="ti-plus"></i> Thêm bài giảng</b-button>
        </div>
    </div>
    <div class="card-body">
        <table id="ed_table" class="table">
            <thead>
                <tr>
                    <th v-for="(field,k) in fields">{{field.label}}</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="(item,k) in list_data" v-if="item.ID">
                    <td>{{(page - 1) * view + (k+1)}}</td>
                    <td> 
                        <a :href="'@Url.Action("Detail","Curriculum")/' + item.ID" :title="item.Name">
                            {{item.Name}}
                        </a>
                    </td>
                    <td>{{item.SubjectName}}</td>
                    <td>{{item.GradeName}}</td>
                    <td>{{formatShortDate(item.Created)}}</td>
                    <td><b-form-checkbox switch v-model="item.IsActive" v-on:change="toggleState(item)"></b-form-checkbox></td>
                    <td>
                        <div class="d-flex btn-group">
                            <a class="btn-act btn-edit" href="#" v-b-modal.modal_event v-on:click="showEditItem(item.ID)"><i class="ti-pencil-alt"></i></a>
                            <button class="btn-act btn-trash" v-on:click="destroy(item.ID)"><i class="ti-trash"></i></button>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="box margin-t20 flex">
            <div class="paging-view">
                Hiển thị:
                <select v-model="view" v-on:change="getData()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                <div class="inner">
                    <button v-on:click="goPage(0)"><i class="ti-angle-left"></i></button>
                    <button v-on:click="goPage(page - 1)"><i class="ti-angle-double-left"></i></button>
                    <input type="text" v-model="page" v-on:change="getData()" />
                    <button v-on:click="goPage(page + 1)"><i class="ti-angle-double-right"></i></button>
                    <button v-on:click="goPage(max_page)"><i class="ti-angle-right"></i></button>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts{
    <script>
        new Vue({
            el: "#main",
             mounted() {
                 this.list_subject = @Html.Raw(Json.Serialize(subjects));
                 this.list_grades_full = @Html.Raw(Json.Serialize(grades));
                 this.changeSubject()
            },
            data: {
                fields: [
                    {
                        key: 'stt',
                        label: '#'
                    },
                    {
                        key: 'lesson_name',
                        label: 'Tên bài giảng'
                    },
                    {
                        key: 'subject_name',
                        label: 'Môn học'
                    },
                    {
                        key: 'level',
                        label: 'Cấp độ'
                    },
                    {
                        key: 'created_at',
                        label: 'Ngày tạo'
                    },
                    {
                        key: 'state',
                        label: 'Trạng thái'
                    },
                    {
                        key: 'actions',
                        label: 'Tác vụ'
                    }
                ],
                list_data: [],
                list_subject: [],
                list_grades_full: [],
                list_grades: [],
                list_add_grades: [],
                addItem: {
                    id: '',
                    title: '',
                    subject: '',
                    grade: '',
                    description: '',
                },
                subject: '',
                grade: '',
                view: 10,
                hPage: 1,
                pageSize: 10,
                max_page: 0,
                componentKey: 0
            },
             computed: {
                page: {
                    get() {
                        return parseInt(this.hPage);
                    },
                    set(value) {
                        console.log(value);
                        this.hPage = value;
                    }
                 },
                 add_subject() {
                     return this.addItem.subject;
                 }
            },
            watch: {
                subject: function () {
                    this.changeSubject();
                },
                grade: function () {
                    this.changeGrade();
                },
                add_subject: function () {
                    this.changeAddSubject();
                }
            },
            methods: {
                getData() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('GradeID', _that.grade)
                    _form.append('SubjectID', _that.subject)
                    _form.append('PageSize', _that.view)
                    _form.append('PageIndex', _that.page)
                    let _url = '@Url.Action("GetList", "Curriculum")'
                    axios.post(_url, _form)
                        .then(response => {
                            console.log(response.data);
                            _that.list_data = response.data.Data;
                            var tt = response.data.Model.totalRecord;
                            this.max_page = tt / this.view + (tt % this.view > 0 ? 1 : 0);
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },
                changeSubject() {
                    let _that = this
                    _that.list_grades = [];
                    for (i = 0; i < _that.list_grades_full.length; i++)
                    {
                        if (_that.list_grades_full[i].SubjectID == _that.subject) {
                            _that.list_grades.push(_that.list_grades_full[i])
                        }
                    }
                    _that.grade = ""
                    _that.changeGrade()
                },
                changeAddSubject() {
                    let _that = this
                    _that.list_add_grades = [];
                    for (i = 0; i < _that.list_grades_full.length; i++)
                    {
                        if (_that.list_grades_full[i].SubjectID == _that.addItem.subject) {
                            _that.list_add_grades.push(_that.list_grades_full[i])
                        }
                    }
                   _that.addItem.grade = ""
                },
                changeGrade() {
                    let _that = this
                    _that.getData()
                },
                destroy(id) {
                    this.getData();

                },
                toggleState(obj) {
                    let _that = this;
                    _that.list_data.forEach(function (item, k) {
                        if (item.ID === obj.ID) {
                            let _url = item.IsActive ? '@Url.Action("Unpublish", "Curriculum")' : '@Url.Action("Publish", "Curriculum")'
                            let _form = new FormData()
                            _form.append('ArrID', item.ID);
                            axios.post(_url, _form)
                                .then(response => {
                                    console.log('update ok');
                                    //item.IsActive = !item.IsActive;
                                    //_that.list_data[k].IsActive = !_that.list_data[k].IsActive;
                                }).catch(e => { })
                        }
                    })
                },
                showEditItem(ID) {
                    console.log(ID);
                    let _that = this;
                    if (ID == null) {
                        _that.addItem.id = '';
                        _that.addItem.subject = '';
                        _that.addItem.grade = '';
                        _that.addItem.description = '';
                        _that.addItem.title = '';
                    }
                    else {
                        _that.list_data.forEach(function (item, k) {
                            if (item.ID === ID) {
                                _that.addItem.id = ID;
                                _that.addItem.subject = item.SubjectID;
                                _that.addItem.grade = item.GradeID;
                                _that.addItem.description = item.Description;
                                _that.addItem.title = item.Name;
                            }
                        });
                    }
                },
                addCurriculum() {
                    alert(1);
                },
                formatShortDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD/MM/YYYY")
                },
                goPage(pgIdx) {
                    if (pgIdx < 1) pgIdx = 1;
                    if (pgIdx > this.max_page)
                        pgIdx = this.max_page;
                    this.page = pgIdx;
                    this.getData();
                },
                hideModal() {
                    $('.close').click();
                },
                getEditTitle() {
                    if (this.addItem.id == '')
                        return 'Thêm bài giảng mới';
                    else return 'Cập nhật nội dung';
                }
            }
        });
    </script>
}
@section Modals{
    <b-modal id="modal_event" centered v-bind:title="getEditTitle()">
        <b-col class="form-group">
            <label for="">Tên bài giảng</label>
            <input type="text" name="" value="" class="form-control" placeholder="Tên bài giảng" v-model="addItem.title">
        </b-col>
        <div class="d-flex">
            <b-col class="form-group">
                <label for="">Môn học</label>
                <select class="form-control" v-model="addItem.subject">
                    <option value="">Chọn khoá học</option>
                    <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                </select>
            </b-col>
            <b-col class="form-group">
                <label for="">Cấp độ</label>
                <select class="form-control" v-model="addItem.grade">
                    <option value="">Chọn cấp độ</option>
                    <option v-for="(item,k) in list_add_grades" :value="item.ID">{{item.Name}}</option>
                </select>
            </b-col>
        </div>
        <b-col class="form-group">
            <label for="">Mô tả</label>
            <textarea name="name" rows="3" class="form-control" v-model="addItem.description"></textarea>
        </b-col>
        <template v-slot:modal-footer="{ ok, cancel}">
            <b-button variant="success" v-on:click="addCurriculum()">Lưu</b-button>
            <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
        </template>
    </b-modal>
}