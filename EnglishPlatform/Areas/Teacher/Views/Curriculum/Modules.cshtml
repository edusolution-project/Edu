@{
    ViewData["Title"] = ViewBag.Title;
    Layout = "~/Views/Shared/_LayoutTeacher.cshtml";
    var Data = ViewBag.Data as BaseCustomerEntity.Database.CourseEntity;
    var listChapter = ViewBag.Chapter as List<BaseCustomerEntity.Database.CourseChapterEntity>;
    var isLock = Data.IsActive;// || Data.IsUsed;
    var user = ViewBag.User as string;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    string processUrl(string act, string ctrl, Object param = null)
    {
        string url = Url.Action(act, ctrl, param);

        return $"/{center}{url}";
    }
}
<style>
    .red-color {
        color: #D03239 !important;
    }

    .red-bg {
        background-color: #D03239 !important;
    }

    .blue-color {
        color: #0194e4 !important;
    }

    .blue-bg {
        background-color: #0194e4 !important;
    }

    .green-color {
        color: #00bf7a !important;
    }

    .green-bg {
        background-color: #00bf7a !important;
    }

    .yellow-color {
        color: #F7971E !important;
    }

    .yellow-bg {
        background-color: #F7971E !important;
    }
</style>


@*<script>
        activeTab = "curriculum";
        activeSub = "modules";
    </script>*@

<div class="left-col" style="scroll-behavior: smooth;">
    <div class="page-title">
        <h1><a href="@processUrl("Index","Curriculum")" class="blue-color">Bài giảng</a> / @ViewData["Title"]</h1>
    </div>
    <div class="main-container">
        @*<div class="sub-sidebar">
                @await Html.PartialAsync("_subSidebarTeacher-Curriculum")
            </div>*@

        <div id="main-route" class="main-route mb-3 mt-2">
            <ul class="route_holder" id="cid_0" cid="0">
                @*<div class="lane_header">
                        <div class="lane_title">Begin</div>
                        <div class="lane_toggle" onclick="toggleLane(this)"></div>
                    </div>*@
            </ul>
        </div>

        <style>
            #main-route {
                overflow: auto;
            }

            .route_holder {
                text-align: left;
                white-space: nowrap;
                height: 2px;
                margin: 50px 0 60px;
            }

            .route_item {
                display: inline-block;
                width: 100px;
                height: 4px;
                overflow: visible;
                margin: 0;
                background: #969696;
                position: relative;
                font-weight: bold;
            }

                .route_item:hover::after {
                    border-color: green;
                }

                .route_item.start {
                    width: 50px;
                    margin-left: 20px;
                }

                    .route_item.start .route_period {
                        left: 10px;
                    }

                .route_item.end {
                    width: 50px;
                    text-align: right;
                    /*margin-right: 20px;*/
                }

                    .route_item.end .route_title {
                        text-align: right;
                    }

                    .route_item.end .route_period {
                        right: 10px;
                    }

                    .route_item.end::after {
                        right: -10px;
                        left: auto;
                    }

                .route_item::after {
                    content: "";
                    position: absolute;
                    left: 50%;
                    right: auto;
                    -webkit-transform: translateX(-50%);
                    -moz-transform: translateX(-50%);
                    -ms-transform: translateX(-50%);
                    -o-transform: translateX(-50%);
                    transform: translateX(-50%);
                    bottom: -12px;
                    height: 20px;
                    width: 20px;
                    border-radius: 50%;
                    border: 2px solid #969696;
                    background: #969696 url(/images/calendar.png) no-repeat center center;
                    -webkit-background-size: 14px auto;
                    background-size: 14px auto;
                    -webkit-transition: background-color .3s,border-color .3s;
                    -moz-transition: background-color .3s,border-color .3s;
                    -o-transition: background-color .3s,border-color .3s;
                    transition: background-color .3s,border-color .3s;
                    top: -8px;
                    cursor: pointer;
                }

                .route_item.start::after {
                    left: 10px;
                }

                .route_item .route_title {
                    bottom: 20px;
                    position: absolute;
                    left: 50%;
                    margin-left: -35px;
                    width: 70px;
                    text-align: center;
                    overflow: hidden;
                    max-height: 28px;
                    white-space: break-spaces;
                    line-height: 14px;
                    font-size: 70%;
                    font-weight: bold;
                }

                .route_item.start .route_title {
                    margin-left: 0;
                    left: -6px;
                    text-align: left;
                }

                .route_item .route_period {
                    top: 20px;
                    position: absolute;
                    left: 50%;
                    margin-left: -25px;
                    width: 50px;
                    text-align: center;
                }

            .wkIdx {
                user-select: none;
                font-size: 110%;
                color: #007bff;
            }
        </style>

        <div class="main-content" data-spy="scroll" data-target="#tableContents">
            <div class="detail pb-3 row">
                <div class="text-left col-md-10">
                    <div class="lession-label d-inline-block">Ngày tạo: <b>@Data.Created.ToString("dd/MM/yyyy")</b></div> -
                    <div class="lession-label d-inline-block">
                        Trạng thái:
                        @if (Data.IsActive)
                        {
                            <b>Đang hoạt động</b>
                        }
                        else
                        {
                            <b>Không hoạt động</b>
                        }
                    </div>
                    -
                    <div class="lession-label d-inline-block">
                        Tình trạng sử dụng:
                        @if (Data.IsUsed)
                        {
                            <b>Đã sử dụng</b>
                        }
                        else
                        {
                            <b>Chưa sử dụng</b>
                        }
                    </div>
                </div>
            </div>
            <div class="modules-wrapper mb-5 pl-3">
                <div class="p-3">
                    <i class="fas fa-circle-notch fa-spin"></i> Loading ...
                </div>
            </div>
        </div>
    </div>

    <i class="fas fa-angle-double-up" onclick="fnbackToTop()" id="backToTop"></i>
</div>


@section Modals {

    <div class="modal fade edit-modal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true" id="chapterModal">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Thêm chương</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="@processUrl("CreateOrUpdate","Chapter")" name="chapterForm" enctype="multipart/form-data" method="post">
                        <input type="hidden" name="ID" />
                        <input type="hidden" name="CourseID" id="CourseID" value="@Data.ID" />
                        <div class="form-group">
                            <label class="col-form-label">Tên chương:</label>
                            <input type="text" class="form-control" name="Name" required @if (isLock) { @: readonly="true"
                                   }>
                        </div>
                        <div class="form-group">
                            <label class="col-form-label">Chương gốc:</label>
                            <select name="ParentID" class="form-control" @if (isLock) { @: readonly="true"
                                    }>
                                <option value="0">------</option>
                                @{
                                    for (int i = 0; listChapter != null && i < listChapter.Count; i++)
                                    {
                                        <option value="@listChapter[i].ID">@listChapter[i].Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="col-form-label">Mô tả:</label>
                            <textarea class="form-control" name="Description" rows="3" @if (isLock) { @: readonly="true"
                                      }></textarea>
                        </div>
                        <div class="row chooseOrder">
                            <div class="form-group col-md-12">
                                <label class="col-form-label">Thứ tự:</label>
                                <input type="text" class="form-control" name="Order" placeholder="Thứ tự hiển thị" value="---">
                            </div>
                        </div>
                        <div class="row chooseConnect">
                            <div class="form-group col-md-4">
                                <label class="col-form-label">Tuần:</label>
                                <input type="text" class="form-control" name="Week" placeholder="Tuần" value="0" onchange="SetPeriod(this)">
                                <input type="hidden" class="form-control" name="Start" value="0">
                            </div>
                            <div class="form-group col-md-8 d-none">
                                <label class="col-form-label">Bắt đầu sau:</label>
                                <select name="ConnectID" class="form-control" @if (isLock) { @: readonly="true"
                                        } onchange="setConnectType(this)">
                                    <option value="0" type="">--- Tự động---</option>
                                </select>
                                <input type="hidden" name="ConnectType" value="0" />
                            </div>
                        </div>

                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" onclick="return Submit('chapterForm', '@processUrl("CreateOrUpdateChapter","Curriculum")','update' , AddChapterCallback)">Lưu</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" id="lessonModal">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Thêm chương</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="@processUrl("CreateOrUpdateLesson","Curriculum")" name="lessonForm" enctype="multipart/form-data" method="post">
                        <input type="hidden" name="ID" />
                        <input type="hidden" name="CourseID" value="@Data.ID" />
                        <input type="hidden" name="ChapterID" value="" />
                        <div class="row">
                            <div class="form-group col-md-12 d-none">
                                <label class="col-form-label">Kiểu bài:</label>
                                <select name="TemplateType" class="form-control" onchange="SelectTemplate()" @if (isLock) { @: readonly="true"
                                        }>
                                    <option value="1">Bài giảng</option>
                                    <option value="2">Bài kiểm tra </option>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-12">
                                <label class="col-form-label">Tiêu đề:</label>
                                <input type="text" class="form-control" name="Title" required @if (isLock) { @: readonly="true"
                                       }>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-6">
                                <label class="col-form-label">Thời gian làm bài (phút):</label>
                                <input type="text" class="form-control" name="Timer" placeholder="0 = không giới hạn" required @if (isLock) { @: readonly="true"
                                       }>
                            </div>
                            <div class="form-group col-md-6">
                                <label class="col-form-label">Giới hạn số lượt làm bài:</label>
                                <input type="text" class="form-control" name="Limit" placeholder="0 = không giới hạn" required @if (isLock) { @: readonly="true"
                                       }>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group col-md-6" for="examOnly">
                                <label class="col-form-label">Kiểu bài kiểm tra:</label>
                                <select name="Etype" class="form-control" onchange="showCoefficient(this)" required @if (isLock) { @: readonly="true"
                                        }>
                                    @*<option value="@BaseCustomerEntity.Database.LESSON_ETYPE.PRACTICE">Practice</option>
                                        <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.WEEKLY">Weekly Exam</option>
                                        <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.CHECKPOINT">Checkpoint Exam</option>
                                        <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.EXPERIMENT">Experiment</option>
                                        <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.INTERSHIP">Intership report</option>
                                        <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.END">End-of-course Exam</option>*@
                                    <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.PRACTICE">Hệ số 1</option>
                                    <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.WEEKLY">Giữa kì</option>
                                    <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.CHECKPOINT">Cuối kì</option>
                                </select>
                            </div>

                            <div class="form-group col-md-6" for="examOnly">
                                <label class="col-form-label">Hệ số:</label>
                                <input type="text" class="form-control" name="Multiple" id="Multiple" placeholder="> 0" value="1" required readonly="readonly">
                            </div>
                        </div>
                        <div class="row chooseOrder" style="display:none">
                            <div class="form-group col-md-12">
                                <label class="col-form-label">Thứ tự:</label>
                                <input type="text" class="form-control" name="Order" placeholder="Thứ tự bài giảng">
                            </div>
                        </div>
                        <div class="row chooseConnect">
                            <div class="form-group col-md-4">
                                <label class="col-form-label">Tuần</label>
                                <input type="text" class="form-control" name="Week" placeholder="Tuần" value="0" onchange="SetPeriod(this)">
                                <input type="hidden" class="form-control" name="Start" value="0">
                            </div>
                            <div class="form-group col-md-8 d-none">
                                <label class="col-form-label">Bắt đầu sau:</label>
                                <select name="ConnectID" class="form-control" @if (isLock) { @: readonly="true"
                                        } onchange="setConnectType(this)">
                                    <option value="" type="">--- Tự động---</option>
                                </select>
                                <input type="hidden" name="ConnectType" value="0" />
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" onclick="return Submit('lessonForm', '@processUrl("CreateOrUpdateLesson","Curriculum")','update' , AddLessonCallback)">Lưu</button>
                </div>
            </div>
        </div>
    </div>
    <!--    Hòa thêm 8/7/2020    -->
    <div class="modal fade" role="dialog" id="copyLessonModel">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="titleClone">Nhân bản </h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="@processUrl("CopyLesson","Curriculum")" name="copyLessonForm" enctype="multipart/form-data" method="post">
                        <input type="hidden" name="LessonID" value="" />
                        <input type="hidden" name="CourseID" value="@Data.ID" />
                        <input type="hidden" name="ChapterID" value="" />

                        <div class="row">
                            <div class="form-group col-md-12">
                                <label class="col-form-label">Tiêu đề:</label>
                                <input type="text" class="form-control" name="Title" required @if (isLock) { @: readonly="true"
                                       }>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group col-md-12">
                                <label class="col-form-label">Chương:</label>
                                <select name="ParentID" id="ParentID" class="form-control" @if (isLock) { @: readonly="true"
                                        }>
                                    <option value="">------</option>
                                    @{ for (int i = 0; listChapter != null && i < listChapter.Count; i++)
                                        {
                                            <option value="@listChapter[i].ID">@listChapter[i].Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>


                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" onclick="return CloneLesson()">Lưu thay đổi</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" id="joinChapterModal">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Ghép nội dung</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="#" name="joinChapterModal" enctype="multipart/form-data" method="post">
                        <input type="hidden" name="ID" />
                        <input type="hidden" name="ChapterID" value="" />
                        <div class="form-group">
                            <label class="col-form-label">Ghép Chương: </label><br />
                            <label name="rootItem"></label><br />
                            <label class="col-form-label"> với: </label>
                            <select name="JoinChapter" class="form-control" required></select> <br />
                            <label class="col-form-label">Tạo chương mới</label>
                            <input type="checkbox" name="CreateNewChapter" id="CreateNewChapter" onchange="IsCreateNewChapter(this)" /> <br />
                            <label class="col-form-label hide" id="NewLable"> Tên chương mới: </label>
                            <input type="text" class="hide" name="newName" id="newName" placeholder="Tên chương mới" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" onclick="return Submit('joinChapterModal', '@processUrl("JoinChapter","Curriculum")','join' , AddChapterCallback)">Lưu</button>
                </div>
            </div>
        </div>
    </div>
    <!--    End     -->

    <div class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" id="joinLessonModal">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Ghép nội dung</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="#" name="joinLessonModal" enctype="multipart/form-data" method="post">
                        <input type="hidden" name="ID" />
                        <input type="hidden" name="ChapterID" value="" />
                        <div class="form-group">
                            <label class="col-form-label">Ghép bài: </label><br />
                            <label name="rootItem"></label><br />
                            <label class="col-form-label"> với: </label>
                            <select name="JoinLesson" class="form-control" required></select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" onclick="return Submit('joinLessonModal', '@processUrl("JoinLesson","Curriculum")','join' , MergeLessonCallback)">Lưu</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" id="lessonFrameModal">
        <div class="modal-dialog modal-lg w-100 m-0" style="max-width: 100%;display: flex;height: 100%;">
            <div class="modal-content">
                <div class="modal-header p-2">
                    <h5 class="modal-title" id="modalTitle">Cập nhật nội dung</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeLessonFrame()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body p-0">
                    <iframe width="100%" height="100%" style="display: flex; border:none;" src=""></iframe>
                </div>
                <div class="modal-footer p-2 d-none">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeLessonFrame()">Đóng</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .nav-item {
        position: relative;
    }

    .collapse-item {
        position: relative;
        display: block;
    }

    .right-content .left-col .main-container .modules-wrapper .modules {
        padding: 12px 24px 0 0 !important;
    }
</style>

<script>

    Date.prototype.addDays = function (days) {
        var date = new Date(this.valueOf());
        date.setDate(date.getDate() + days);
        return date;
    }


    var connectType = {
        CHAPTER: @BaseCustomerEntity.Database.CONNECT_TYPE.CHAPTER,
        LESSON: @BaseCustomerEntity.Database.CONNECT_TYPE.LESSON
    }

    var chapters = [];
    var lessons = [];
    var wrapper = $('#course-detail ul');
    var modulesBody = $('.modules-wrapper');
    var pendingChap = [];

    var listRoute = [];

    function toggleLane(obj) {
        $(obj).parent().parent().toggleClass('expand');
    }

    var RenderLesson = function (item) {
        var oldItem = $('#' + item.ID);

        var wPart = $("<div>", { "class": "col-md-1 text-center" }).append($("<span>", { class: "align-middle wkIdx", text: getWeek(item.Start)}));
        var rowData = $("<div>", { "class": "modules-content-item row item-row ml-0 col-md-11", id: item.ID });

        var leftPart = $("<div>", { "class": "col-md-10" });
        var rightPart = $("<div>", { "class": "col-md-2 text-right row-action" });
        leftPart
            //.append("<span class='align-middle mr-2'> W" + + " </span>")
            .append($("<span>", { "class": "modules-content-item-icon" + (item.TemplateType === 2 ? (" assignment atype" + item.Etype) : "") }));
        rightPart.append();
        var itemData = $("<div>", { "class": "modules-content-item-info" });
        itemData.append($("<a>", {
            "class": "action-link",
            "name": "Title",
            "href": "@processUrl("Lesson", "Curriculum")/" + item.ID + "/@Data.ID",
            "lid": item.ID,
            "text": item.Title,
            "onclick": "openLesson(this)",
            "data-toggle": 'modal',
            "data-target": "#lessonFrameModal"
        }));

        if (item.Description != null) {
            itemData.append($("<span>", { "class": "description", "text": item.Description }));
        }

        leftPart.append(itemData);

        rightPart.append($("<i>", {
            "class": "far fa-edit", "data-toggle": "modal", "data-target": "#lessonModal", "data-placement": "top", "title": "Sửa", "onclick": "return EditLesson(this,'" + item.ID + "'); return false;",
            "cid": item.ChapterID,
            "type": item.TemplateType,
            "point": item.Point,
            "timer": item.Timer,
            "etype": item.Etype,
            "mul": item.Multiple,
            "limit": item.Limit,
            "order": item.Order + 1,
            "connectid": item.ConnectID,
            "connecttype": item.ConnectType,
            "start": item.Start
        }));
        @if(!isLock)
        {
        @:rightPart.append($("<i>", { "class": "fas fa-copy", "data-toggle": "modal", "data-target": "#copyLessonModel", "data-placement": "top", "title": "Nhân bản", "onclick": "showCopyLesson('" + item.ID + "',this);return false" }));
        @:rightPart.append($("<i>", { "class": "fas fa-first-aid", "data-toggle": "modal", "data-target": "#joinLessonModal", "data-placement": "top", "title": "Ghép", "onclick": "JoinLesson(this,'" + item.ID + "'); return false;" }));
        @:rightPart.append($("<i>", { "class": "fas fa-trash", "data-toggle": "tooltip", "data-placement": "top", "title": "Xóa", "onclick": "DeleteLesson('" + item.ID + "'); return false;" }));
        }
        rowData.append(wPart);
        rowData.append(leftPart);
        rowData.append(rightPart);

        if (oldItem.length > 0) {
            var oldPos = parseInt(oldItem.find('[order]').attr('order'));
            if (oldPos != item.Order + 1) { //change pos
                parent = oldItem.parent();
                oldItem.remove();
                parent.find('> .item-row:eq(' + item.Order + ')').before(rowData);
                startchange = item.Order + 1;
                //console.log(parent.find('> .item-row:gt(' + item.Order + ')'));
                parent.find('> .item-row:gt(' + item.Order + ')').each(function (i, row) {
                    startchange++;
                    $(row).find('[order]').attr('order', startchange);
                })
            }
            else {
                oldItem.after(rowData);
                oldItem.remove();
            }
        }
        else {

            if (item.ChapterID == null) {
                modulesBody.addClass("row")
                    .append(wPart)
                    .append(rowData);
            }
            else {
                parent = modulesBody.find(".modules[id=" + item.ChapterID + "] .modules-content:first");
                parent.addClass("row").append(wPart)
                    .append(rowData);
            }
        }
    }

    var RenderChapter = function (chapter) {
        var parent = modulesBody;

        var oldChap = $('#' + chapter.ID);

        if (chapter.ParentID == null) {
            chapter.ParentID = "0";
        }

        var chapContent = $("<div>", { "id": chapter.ID, "pid": chapter.ParentID, "class": "modules" });
        var chapTitle = $("<div>", { "class": "modules-title row item-row blue-color", "data-target": "#" + chapter.ID + " .modules-content:first" });
        var title_wPart = $("<div>", { "class": "col-md-1 text-center" }).append($("<span>", { class: "wkIdx", text: getWeek(chapter.Start) }));
        var title_cPart = $("<div>", { "class": "col-md-9" });
        var title_ePart = $("<div>", { "class": "col-md-2 text-right row-action pr-0" })
        title_cPart.append($("<i>", { "class": "fa pr-1 fa-caret-down fa-caret-right", "onclick": "toggleCollapse(this, '" + chapter.ID + "')" }))
            //.append($('<span>', { class: "align-top mr-2", text: 'Week ' + (chapter.Start / 7 + 1) + ": " }))
            .append($("<a>", {
                "class": "action-link",
                "name": "Name",
                "text": chapter.Name,
                "onclick": "toggleCollapse(this, '" + chapter.ID + "')",
                "value": chapter.ID
            }));
        title_cPart.append($("<input>", { "type": "hidden", "name": "Description", "value": chapter.Description }));
        title_cPart.append($("<input>", { "type": "hidden", "name": "Order", "value": chapter.Order + 1 }));
        title_cPart.append($("<input>", { "type": "hidden", "name": "ConnectID", "value": chapter.ConnectID}));
        title_cPart.append($("<input>", { "type": "hidden", "name": "ConnectType", "value": chapter.ConnnectType}));
        title_cPart.append($("<input>", { "type": "hidden", "name": "Start", "value": chapter.Start }));

        @if (!isLock)
        {
            @:title_ePart.append($("<i>", { "class": "far fa-folder", "data-toggle": "modal", "data-target": "#chapterModal", "data-placement": "top", "title": "Thêm chương", "onclick": "AddChapter('" + chapter.ID + "'); return false;" }));
            @:title_ePart.append($("<i>", { "class": "far fa-file", "data-toggle": "modal", "data-target": "#lessonModal", "data-placement": "top", "title": "Thêm bài", "onclick": "AddLesson('" + chapter.ID + "');" }));
            //title_ePart.append($("<i>", { "class": "fas fa-sort", "title": "Sắp xếp", "onclick": "Sort('" + chapter.ID + "'); return false;" }));
        }

        title_ePart.append($("<i>", { "class": "fas fa-edit", "data-toggle": "modal", "data-target": "#chapterModal", "data-placement": "top", "title": "Sửa", "pid": chapter.ParentID, "onclick": "EditChapter(this, '" + chapter.ID + "'); return false;" }));
        @if (!isLock)
        {
            @:title_ePart.append($("<i>", { "class": "far fa-clone", "title": "Nhân bản chương", "onclick": "CloneChapter('" + chapter.ID + "',this); return false;" }));
            @:title_ePart.append($("<i>", { "class": "fas fa-first-aid", "data-toggle": "modal", "data-target": "#joinChapterModal", "data-placement": "top", "title": "Ghép", "onclick": "JoinChapter(this,'" + chapter.ID + "'); return false;" }));
            @:title_ePart.append($("<i>", { "class": "far fa-trash-alt", "data-toggle": "tooltip", "data-placement": "top", "title": "Xóa", "onclick": "DeleteChapter('" + chapter.ID + "')" }));
        }
        title_ePart.append($("<i>", { "class": "far fa-minus-square show", "title": "Thu gọn", "onclick": "toggleCollapse(this, '" + chapter.ID + "')" }));
        chapTitle.append(title_wPart);
        chapTitle.append(title_cPart);
        chapTitle.append(title_ePart);

        if (oldChap.length > 0) {
            var oldPos = parseInt(oldChap.find('input[name=Order]').val());
            var oldParentID = oldChap.attr('pid');

            if (oldParentID != chapter.ParentID) //change root
            {
                var oldParent = oldChap.parent();

                if (chapter.ParentID === "0") {
                    modulesBody.append(oldChap);
                }
                else {
                    parent = modulesBody.find(".modules[id=" + chapter.ParentID + "] .modules-content:first");
                    if (parent.find('> .item-row').length > 0) //has lesson => add before lesson
                        parent.find('> .item-row:first').before(oldChap)
                    else
                        parent.append(oldChap);
                }

                //change order for old holder
                startchange = oldPos;
                oldParent.find('> .modules:gt(' + (oldPos - 1) + ')').each(function (i, row) {
                    startchange++;
                    $(row).find('input[name=Order]').val(startchange);
                })
            }

            oldChap.find('> .modules-title').after(chapTitle);
            oldChap.find('> .modules-title:first').remove();

            if (oldPos != chapter.Order + 1) { //change order
                parent = oldChap.parent();

                //console.log(oldChap);
                startchange = chapter.Order + 1;
                console.log(oldPos);
                if (oldPos < chapter.Order + 1) {
                    parent.find('> .modules[id!=0]:eq(' + chapter.Order + ')').after(oldChap);
                    startchange = oldPos;
                }
                else
                    parent.find('> .modules[id!=0]:eq(' + chapter.Order + ')').before(oldChap);
                var pos = startchange;
                oldChap.find('input[name=Order]').val(pos);
                console.log(parent.find('> .modules[id!=0]:gt(' + startchange + ')'));
                parent.find('> .modules[id!=0]:gt(' + startchange + ')').each(function (i, row) {
                    pos++;
                    $(row).find('input[name=Order]').val(pos);
                })
            }
            else {
                //oldChap.after(chapContent);
                //oldChap.remove();
            }
        }
        else {

            //console.log(chapter.ParentID);
            chapContent.append(chapTitle);

            var contentHolder = $("<div>", { "class": "modules-content collapse show" });
            chapContent.append(contentHolder);

            //add missing child
            contentHolder.append(
                modulesBody.find('.modules[pid=' + chapter.ID + ']')
            );

            if (chapter.ParentID === "0") {
                modulesBody.append(chapContent);
            }
            else {
                parent = modulesBody.find(".modules[id=" + chapter.ParentID + "] .modules-content:first");
                if (parent.length > 0) {
                    if (parent.find('> .item-row').length > 0) //has lesson => add before lesson
                        parent.find('> .item-row:first').before(chapContent)
                    else
                        parent.append(chapContent);
                }
                else {
                    modulesBody.append(chapContent);
                }
            }
        }
    }

    var RenderRoute = function () {
        //console.log(routeList)

        var wrapper = $('.route_holder');
        $(wrapper).empty();
        $(wrapper).append($('<li>', { class: 'route_item start' }).append($('<a>', { class: 'route_title', text: "Bắt đầu" })).append($('<span>', { class: 'route_period', text: "" })))
        if (listRoute != null && listRoute.length > 0) {
            listRoute.forEach(function (obj, idx) {
                if (obj.cid != "") {
                    var root = routeList.find(t => t.id == obj.cid);
                    if(root != null)
                        obj.start =  root.start + 7;
                }
                else
                if (obj.parent != "0") {
                    var parent = routeList.find(t => t.id == obj.parent);
                    obj.start = parent.start;
                };
            })
        }
        var begin = new Date(new Date().getYear(), 0, 1);
        listRoute.sort((a,b) => compareRouteFinal(a,b))
        listRoute.forEach(function (obj, idx) {
            $(wrapper).append($('<li>', {
                class: 'route_item',
                onclick: "editRoute('" + obj.id + "','" + obj.type + "')"
            })
                .append($('<a>', { class: 'route_title', text: obj.text })).append($('<span>', {
                class: 'route_period',
                    text: obj.start > 0 ?  "Tuần " +  (parseInt(obj.start / 7) + 1): "---"
            })))
        })
        $(wrapper).append($('<li>', { class: 'route_item end' }).append($('<a>', { class: 'route_title', text: "Kết thúc" })).append($('<span>', { class: 'route_period', text: "" })))
    }

    var formatShortDate = function(obj)
    {
        return obj.getDate() + "/" + (obj.getMonth() + 1);
    }

    var editRoute = function (id, type) {
        console.log(id);

        if(type == 'lesson')
            $('#' + id + ' .far.fa-edit').first().focus().click();
        else
            $('#' + id + ' .fas.fa-edit').first().focus().click();
        //if (type == "chapter")
        //    return EditChapter($('#' + id + ' .far.fa-edit').first(), id);
        //return EditChapter($('#' + id + ' .far.fa-edit').first(), id);
    }

    //var RenderRouteChap = function (chapter) {
    //    var chaproute = $('<div>', { class: 'lane_holder', id: 'cid_' + chapter.ID, cid: chapter.ID })
    //        .append($('<div>', { class: 'lane_header' })
    //            .append($('<div>', { class: 'lane_title', text: chapter.Name }))
    //            .append($('<div>', { class: 'lane_toggle', onclick: 'toggleLane(this)' })));

    //    if (chapter.ConnectID == null) {
    //        if (chapter.ParentID != null) {
    //            var laneList = $('.lane_holder#cid_' + chapter.ParentID + ' > .lane_list');
    //            if (laneList.length == 0) {
    //                $('.lane_holder#cid_' + chapter.ParentID).addClass('hasChild');
    //                $('.lane_holder#cid_' + chapter.ParentID).append($('<div>', { class: 'lane_list' }));
    //                laneList = $('.lane_holder#cid_' + chapter.ParentID + ' > .lane_list');
    //            }
    //            laneList.append($('<div>', { class: 'lane-item route_lane' }).append(chaproute));
    //        }
    //    }
    //    else {
    //        if ($('#cid_' + chapter.ConnectID) != null)
    //            $('#cid_' + chapter.ConnectID).after(chaproute);

    //        pendingChap.push(chapter);
    //    }
    //}



    function LoadData() {
        chapters = [];
        lessons = [];

        $.ajax({
            type: "POST",
            url: '@processUrl("GetCourseDetail", "Curriculum")',
            data: {ID: "@Data.ID"},
            dataType:"json",
            success: function (data) {
                hideModal();
                modulesBody.html("");

                chapters = data.Data.Chapters;
                lessons = data.Data.Lessons;

                var rootContent = $("<div>", { "id": "0", "pid": "0", "class": "modules" });
                var rootLessons = $("<div>", {"class": "modules-content collapse show" });
                var title_wPart = $("<div>", { "class": "col-md-1 text-center" }).append("Tuần");
                @if(!isLock)
                {
                    @:var chapContent = $("<div>", { "id": "0", "pid": "0", "class": "modules" });
                    @:var rootAction = $("<div>", { "class": "modules-title row item-row blue-color" });

                    @:title_cPart = $("<div>", { "class": "col-md-11" });
                    @:title_cPart.append($("<i>", { "class": "far fa-folder mr-1 mt-1", "data-toggle": "modal", "data-target": "#chapterModal", "data-placement": "top", "title": "Thêm Chương", "onclick": "AddChapter('0'); return false;" }));
                    @:title_cPart.append($("<span>", { "class": "align-top", "text": "Thêm chương", "data-toggle": "modal", "data-target": "#chapterModal", "data-placement": "top", "title": "Thêm Chương", "onclick": "AddChapter('0'); return false;" }));
                    @*@:title_cPart.append($("<i>", { "class": "far fa-file ml-5 mr-1 mt-1", "data-toggle": "modal", "data-target": "#lessonModal", "data-placement": "top", "title": "Thêm nội dung", "onclick": "AddLesson('0'); return false;" }));
                    @:title_cPart.append($("<span>", { "class": "align-top", "text": "Thêm nội dung", "data-toggle": "modal", "data-target": "#lessonModal", "data-placement": "top", "title": "Thêm nội dung", "onclick": "AddLesson('0'); return false;" }));*@
                    @:rootAction.append(title_wPart);
                    @:rootAction.append(title_cPart);
                    @:rootContent.append(rootAction);
                }
                else
                {
                    @:rootContent.append(title_wPart);
                }
                rootContent.append(rootLessons);
                modulesBody.append(rootContent);

                listRoute = [];

                if (chapters.length > 0) {
                    for (i = 0; i < chapters.length; ++i) {
                        var chapter = chapters[i];
                        RenderChapter(chapter);
                        if(chapter.ParentID == "0" && chapter.Start > 0)
                            listRoute.push({ id: chapter.ID, start: chapter.Start, type: "chapter", text: chapter.Name, cid: (chapter.ConnectID == null || chapter.ConnectID == "0") ? "" : chapter.ConnectID, period: chapter.Period, parent: chapter.ParentID, order: chapter.Order })
                    }
                }



                @*//else {
                    var chapContent = $("<div>", { "id": "0", "pid": "0", "class": "modules" });
                    var chapTitle = $("<div>", { "class": "modules-title row item-row" });
                    var title_cPart = $("<div>", { "class": "col-md-10" });
                    var title_ePart = $("<div>", { "class": "col-md-2 text-right row-action d-block" })
                    title_cPart.append($("<span>", {text: "Add chapter", "onclick": "AddChapter('0'); return false;","data-toggle": "modal", "data-target": "#chapterModal", "data-placement": "top", "title": "Add Chapter"}));
                    title_ePart.append($("<i>", { "class": "fas fa-plus-square", "data-toggle": "modal", "data-target": "#chapterModal", "data-placement": "top", "title": "Add Chapter", "onclick": "AddChapter('0'); return false;" }));
                    chapTitle.append(title_cPart)
                    @if(!isLock)
                    {
                        @:chapTitle.append(title_ePart);
                    }
                    chapContent.append(chapTitle);
                    modulesBody.append(chapContent);
                //}*@

                if (lessons.length > 0) {
                    for (j = 0; j < lessons.length; j++) {
                        var item = lessons[j];
                        RenderLesson(item);
                        //if(item.ChapterID == "0")
                        //    listRoute.push({ id: item.ID, start: item.Start, type: "lesson", text: item.Title, cid: item.ConnectID == null ? "" : item.ConnectID,period : item.Period, parent : item.ChapterID, order: item.Order })
                    }
                }

                //listRoute.sort((a, b) => compareRoute(a,b))

                RenderRoute();
                //RenderRouteChap(chapter);
                //RenderRouteLesson(item);

                var wkIdx = '';
                $('.wkIdx').each(function (idx, obj) {
                    if (wkIdx != $(obj).text()) {
                        wkIdx = $(obj).text();
                        $(obj).css('color','#007bff').css('opacity',1);
                    }
                    else {
                        $(obj).css('color','#657586').css('opacity',0.5);
                    }
                });

                //var wkWrapper = $('.modules-wrapper').clone().removeClass('modules-wrapper').addClass('wk-wrapper');
                //$('.modules-wrapper').wrap("<div></div>")
                //$('.modules-wrapper').before(wkWrapper);
                //$(wkWrapper).find('.modules-title .col-md-9,.modules-content-item').remove();

                $('.row-action i').tooltip();

                //renderTableContents();
            },
            error: function() {
            }
        });
    };

    //function compareRoute(obj1, obj2) {
    //    if (obj1.parent > obj2.parent) return 1;
    //    if (obj1.parent < obj2.parent) return -1;
    //    if (obj1.cid > obj2.cid) return 1;
    //    if (obj1.cid < obj2.cid) return -1;
    //    if (obj1.order > obj2.order) return 1;
    //    if (obj1.order < obj2.order) return -1;
    //}

    function compareRouteFinal(obj1, obj2) {
        //console.log(obj1.start + ' - ' + obj2.start);
        if (obj1.start == 0) return 1;
        if (obj1.start > obj2.start) return 1;
        if (obj1.start < obj2.start) return -1;
        if (obj1.parent > obj2.parent) return 1;
        if (obj1.parent < obj2.parent) return -1;
        if (obj1.cid > obj2.cid) return 1;
        if (obj1.cid < obj2.cid) return -1;
        if (obj1.order > obj2.order) return 1;
        if (obj1.order < obj2.order) return -1;
    }

    function ChangeGrade(obj, wrapper) {
        var subject = $(obj).val();
        var grade = $(wrapper).val();
        $(wrapper).find('option[for!=' + subject + ']').hide();
        $(wrapper).find('option[for=' + subject + ']').show();
        if ($(wrapper).find('option[for!=' + subject + '][value=' + grade + ']:visible').length == 0) {
           $(wrapper).val($(wrapper).find('option[for=' + subject + ']:first').attr('value'));
        }
    }

    function EditCourse() {
        var modal = $("#courseModal");
        var modalTitle = modal.find("#modalTitle");
        var ID = '@Data.ID';
        modalTitle.text("Cập nhật thông tin");
        var name = '@Data.Name';
        modal.find("[name=Name]").val(name);
        var subject = '@Data.SubjectID'
        var grade = '@Data.GradeID'
        var sbj = modal.find("[name=SubjectID]");
        var grd = modal.find("[name=GradeID]");
        sbj.val(subject);
        ChangeGrade(sbj,grd);
        $(grd).val(grade);
        var description = '@Data.Description';
        modal.find("[name=Description]").val(description);
        modal.find("[name=ID]").val(ID);
    }

    function ReloadCourse(res)
    {
        if (res != null) {
            var result = $.parseJSON(res);
            if (result.Error != null) {
                alert(result.Error);
                return false;
            }
        }
        document.location = document.location;
    }

    function MergeLessonCallback(res) {
        if (res != null) {
            var result = $.parseJSON(res);
            if (result.Error != null) {
                alert(result.Error);
                return false;
            }
            else {
                $('.modules-content-item#' + result.Del).remove();
                hideModal();
            }
        }
    }

    function AddLessonCallback(res) {
        if (res != null) {
            var result = $.parseJSON(res);
            if (result.Error != null && result.Error != "") {
                alert(result.Error);
                return false;
            }
            else {
                document.location = document.location;
                //lesson = result.Data;
                //RenderLesson(lesson);
                //hideModal();
            }
        }
    }

    function AddChapterCallback(res) {
        if (res != null) {
            var result = $.parseJSON(res);
            //console.log(result);
            if (result.Error != null) {

                alert(result.Error);
                return false;
            }
            else {
                //document.location = document.location;
                chapter = result.Data;
                //console.log("chapter " + chapter.ID);
                $('[name=chapterForm] [name=ParentID] option[value=' + chapter.ID + ']').before($('<option>', { value: chapter.ID, text: chapter.Name })).remove();
                var o = new Option(chapter.Name, chapter.ID);

                /// jquerify the DOM object 'o' so we can use the html method
                $(o).html(chapter.Name);
                $("#ParentID").append(o);
                RenderChapter(chapter);

                if (chapter.ParentID == "0") {
                    const index = listRoute.findIndex(t => t.id == chapter.ID);
                    if (index > -1) {
                        listRoute.splice(index, 1);
                    }

                    if (chapter.Start > 0) {
                        listRoute.push({ id: chapter.ID, start: chapter.Start, type: "chapter", text: chapter.Name, cid: (chapter.ConnectID == null || chapter.ConnectID == "0") ? "" : chapter.ConnectID, period: chapter.Period, parent: chapter.ParentID, order: chapter.Order })
                        RenderRoute();
                    }
                }

                if (chapter.Start > 0) {
                    $('#' + chapter.ID + ' .wkIdx').text( parseInt(chapter.Start / 7) + 1)
                }

                //LoadData();
                hideModal();
            }
        }
    }

    function CloneChapterCallBack(res) {
        if (res != null) {
            var result = $.parseJSON(res);
            //console.log(result);
            if (result.Error != null) {
                alert(result.Error);
                return false;
            }
            else {
                chapter = result.Data;
                //console.log("chapter " + chapter.ID);
                $('[name=chapterForm] [name=ParentID] option[value=' + chapter.ID + ']').before($('<option>', { value: chapter.ID, text: chapter.Name })).remove();
                var o = new Option(chapter.Name, chapter.ID);
                /// jquerify the DOM object 'o' so we can use the html method
                $(o).html(chapter.Name);
                $("#ParentID").append(o);
                RenderChapter(chapter);

                if (chapter.ParentID == "0") {
                    const index = listRoute.indexOf(t => t.ID == chapter.ID);
                    if (index > -1) {
                        listRoute.splice(index, 1);
                        console.log(index)
                    }

                    if (chapter.Start > 0) {
                        listRoute.push({ id: chapter.ID, start: chapter.Start, type: "chapter", text: chapter.Name, cid: (chapter.ConnectID == null || chapter.ConnectID == "0") ? "" : chapter.ConnectID, period: chapter.Period, parent: chapter.ParentID, order: chapter.Order })
                        RenderRoute();
                    }
                }
                hideModal();
            }
        }
    }

    function DeleteCourse(ID)
    {
        if(confirm('Confirm remove?'))
        {
            ExcuteOnlyItem(ID, '@processUrl("Remove", "Curriculum")', function(){
                 document.location = '@processUrl("Index", "Curriculum")';
            });
        }
    }

    function EditChapter(obj, ID) {
        var modal = $("#chapterModal");
        var modalTitle = modal.find("#modalTitle");
        modalTitle.text("Cập nhật thông tin");
        var name = $(obj).parent().parent().find("[name=Name]").text().trim();
        var description = $(obj).parent().parent().find("[name=Description]").val().trim();
        var order = $(obj).parent().parent().find("[name=Order]").val().trim();

        var connectid = $(obj).parent().parent().find("[name=ConnectID]").val().trim();
        var connecttype = $(obj).parent().parent().find("[name=ConnectType]").val().trim();
        var start = $(obj).parent().parent().find("[name=Start]").val().trim();
        var week = 0;

        if(start > 0)
            week = parseInt(start / 7) + 1;

        var parent = $(obj).attr("pid");
        //console.log(connectid);

        //console.log(period);


        //console.log(obj);
        modal.find("[name=Name]").val(name);
        modal.find("[name=Description]").val(description);
        modal.find("[name=ParentID]").val(parent);
        modal.find("[name=ParentID] option[value=" +  ID + "]").hide();
        modal.find("[name=Order]").val(order);
        modal.find("[name=ID]").val(ID);
        modal.find("[name=Start]").val(start);
        modal.find("[name=Week]").val(week);

        var connectHolder = modal.find('[name=ConnectID]');
        $(connectHolder).find('option:gt(0)').remove();
        $(connectHolder).val('');
        var siblingsChaps = $('.modules[pid=' + parent + ']');
        if (siblingsChaps.length > 0) {
            siblingsChaps.each(function (idx, obj) {
                var title = $(obj).find('.modules-title .action-link:first()')

                if (title != null && title.length > 0) {
                    var _id = $(title).attr('value');
                    if (_id != ID) {
                        $(connectHolder).append($('<option>', { value: _id, type: connectType.CHAPTER, text: $(title).text() }));
                    }
                }

            });
        }

        var siblingsLessons = $('.modules[id=' + parent + '] > .modules-content > .modules-content-item > .col-md-10 > .modules-content-item-info > .action-link[lid]')
        //console.log(siblingsLessons);
        if (siblingsLessons.length > 0) {
            siblingsLessons.each(function (idx, obj) {
                $(connectHolder).append($('<option>', { value: $(obj).attr('lid'), type: connectType.LESSON, text: $(obj).text() }));
            });
        }
        if(connectid != null && connectid.length > 0)
            $(connectHolder).val(connectid).change();
    }

    function AddChapter(parentchap) {
        var modal = $("#chapterModal");
        var modalTitle = modal.find("#modalTitle");
        modalTitle.text("Thêm Chương");
        modal.find("[name=Name]").val("");
        modal.find("[name=ID]").val("");
        modal.find("[name=Order]").val("---");
        modal.find("[name=ParentID]").val(parentchap);
        var connectHolder = modal.find('[name=ConnectID]');
        $(connectHolder).val('');
        $(connectHolder).find('option:gt(0)').remove();
        var siblingsChaps = $('.modules[pid=' + parentchap + ']');
        if (siblingsChaps.length > 0) {
            siblingsChaps.each(function (obj) {
                console.log(obj);
            });
        }
    }

    function DeleteChapter(ID) {
        Swal.fire({
            title: 'Xác nhận xóa?',
            text: "Bạn sẽ không thể khôi phục lại dữ liệu này!",
            icon: 'warning',
            showCancelButton: true,
            focusConfirm: false,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#CCC',
            cancelButtonText: 'Hủy',
            confirmButtonText: 'Đồng ý xóa!'
        }).then((result) => {
            if (result.value) {
                ExcuteOnlyItem(ID, '@processUrl("RemoveChapter", "Curriculum")', DeleteChapterCallback);
            }
        })
    }

    function AddLesson(ID)
    {
        var modal = $("#lessonModal");
        var modalTitle = modal.find("#modalTitle");
        modalTitle.text("Thêm bài");
        modal.find(".chooseOrder").hide();
        modal.find("[name=Title]").val("");
        modal.find("[name=ChapterID]").val(ID);
        modal.find("[name=ID]").val("");
        modal.find("[name=Point]").val("0");
        modal.find("[name=Timer]").val("0");
        modal.find("[name=Limit]").val("0");
        SelectTemplate("1");

        var connectHolder = modal.find('[name=ConnectID]');
        $(connectHolder).find('option:gt(0)').remove();
        $(connectHolder).val('');

        var parent = ID;
        var siblingsChaps = $('.modules[pid=' + parent + ']');
        if (siblingsChaps.length > 0) {
            siblingsChaps.each(function (idx, obj) {

                var title = $(obj).find('.modules-title .action-link:first()')

                if (title != null && title.length > 0) {
                    //console.log($(title).text());
                    $(connectHolder).append($('<option>', { value: $(title).attr('value'), type: connectType.CHAPTER, text: $(title).text() }));
                }

            });
        }

        var siblingsLessons = $('.modules[id=' + parent + '] > .modules-content > .modules-content-item > .col-md-10 > .modules-content-item-info > .action-link[lid]')

        if (siblingsLessons.length > 0) {
            siblingsLessons.each(function (idx, obj) {

                var title = $(obj);
                console.log(obj);
                if (title != null && title.length > 0) {
                    console.log(connectHolder);
                    console.log($(title).text());
                    $(connectHolder).append($('<option>', { value: $(title).attr('value'), type: connectType.LESSON, text: $(title).text() }));
                }

            });
        }

        return false;
    }

    function EditLesson(obj, ID)
    {
        var modal = $("#lessonModal");
        var modalTitle = modal.find("#modalTitle");
        modal.find(".chooseOrder").show();
        modalTitle.text("Cập nhật thông tin");
        var title = $(obj).parent().parent().find("[name=Title]").text().trim();
        var chapter = $(obj).attr("cid");
        var type = $(obj).attr("type");
        var point = $(obj).attr("point");
        var timer = $(obj).attr("timer");
        var limit = $(obj).attr("limit");
        var multiple = $(obj).attr("mul");
        var etype = $(obj).attr("etype");
        var order = $(obj).attr("order");

        var connectid = $(obj).attr("connectid");;
        var start = $(obj).attr("start");
        var week = 0;
        if (start > 0)
            week = parseInt(start / 7 + 1);

        //console.log(connectid);


        modal.find("[name=Title]").val(title);
        modal.find("[name=ChapterID]").val(chapter);
        modal.find("[name=ID]").val(ID);
        modal.find("[name=Point]").val(point);
        modal.find("[name=Timer]").val(timer);
        modal.find("[name=Limit]").val(limit);
        modal.find("[name=Multiple]").val(multiple);
        modal.find("[name=Etype]").val(etype);
        modal.find("[name=Order]").val(order);
        modal.find("[name=Start]").val(start);
        modal.find("[name=Week]").val(week);

        SelectTemplate(type);


        var connectHolder = modal.find('[name=ConnectID]');
        $(connectHolder).find('option:gt(0)').remove();
        $(connectHolder).val('');

        var parent = chapter;
        var siblingsChaps = $('.modules[pid=' + parent + ']');
        if (siblingsChaps.length > 0) {
            siblingsChaps.each(function (idx, obj) {

                var title = $(obj).find('.modules-title .action-link:first()')

                if (title != null && title.length > 0) {
                    //console.log($(title).text());
                    $(connectHolder).append($('<option>', { value: $(title).attr('value'), type: connectType.CHAPTER, text: $(title).text() }));
                }

            });
        }
        var siblingsLessons = $('.modules[id=' + parent + '] > .modules-content > .modules-content-item > .col-md-10 > .modules-content-item-info > .action-link[lid]')
        if (siblingsLessons.length > 0) {
            siblingsLessons.each(function (idx, obj) {
                var title = $(obj);
                if (title != null && title.length > 0) {
                    var _id = $(title).parent().parent().parent().attr('id');
                    //console.log(title);
                    if (_id != ID) {
                        $(connectHolder).append($('<option>', { value: _id, type: connectType.LESSON, text: $(title).text() }));
                    }
                }

            });
        }
        if (connectid != null && connectid.length > 0)
            $(connectHolder).val(connectid).change();

        return false;
    }

    function JoinLesson(obj, ID) {
        //debugger
        var modal = $("#joinLessonModal");
        modal.find("[name=ID]").val(ID);
        var currentItem = $(obj).parent().parent();

        modal.find("[name=rootItem]").text($(currentItem).find("[name=Title]").text());
        var lessonholder = modal.find("[name=JoinLesson]");
        $(lessonholder).empty();
        $(currentItem).siblings().each(function () {
            var id = $(this).find("[lid]").attr("lid");
            $(lessonholder).append($("<option>", {"value": id, "text": $(this).find("[name=Title]").text()}));
        });

        return false;
    }

    function DeleteLesson(ID) {
        Swal.fire({
            title: 'Xác nhận xóa?',
            text: "Bạn sẽ không thể khôi phục lại dữ liệu này!",
            icon: 'warning',
            showCancelButton: true,
            focusConfirm: false,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#CCC',
            cancelButtonText: 'Hủy',
            confirmButtonText: 'Đồng ý xóa!'
        }).then((result) => {
            if (result.value) {
                ExcuteOnlyItem(ID, '@processUrl("RemoveLesson", "Curriculum")', DeleteLessonCallback);
            }
        })
    }

    function CloneLesson(ID) {
        ExcuteOnlyItem(ID, '@processUrl("CopyLesson", "Curriculum")', LoadData);
    }
    /*
     *Hòa thêm 10/7/2020
     */

    function CloneChapter(ID,_this) {
        var courseID = document.getElementById("CourseID").value;
        var cloneChapter = document.getElementById(ID);

        //var ArrLessonID = "";
        //for (var i = 0; i < cloneChapter.children[1].childElementCount; i++) {
        //    ArrLessonID += cloneChapter.children[1].children[i].getAttribute("id") + ",";
        //}
        //debugger
        var data = new FormData();
        data.append("CourseID", courseID);
        data.append("ChapID", ID);
        //data.append("ArrLessonID", ArrLessonID);
        _url = "@processUrl("CopyChapter", "Curriculum")";
        _method = "POST";
        fn = LoadData;
        Ajax(_url, "POST", data, true)
            .then(function (res) {
                var data = JSON.parse(res)
                if (data.Error == null) {
                    alert("Nhân bản " + data.Data.Name + " thành công.")
                }
                else {
                    alert("Lỗi " + data.Error)
                }
            if(fn != void 0) fn(res);
            //console.log(res);
            return false;
            }).catch(e => { alert(e)});
        //debugger
    }

    function showCopyLesson(id, _this) {
        $("#copyLessonModel").modal();
        var modal = $("#copyLessonModel");
        var title = $(_this).parent().parent().find("[name=Title]").text().trim();
        var chapter_ID = $(_this).parent().parent().parent().parent().children().find("[name=Name]").attr("value");
        var optionValue = chapter_ID;
        $("#ParentID").val(optionValue).find("option[value=" + optionValue + "]").attr('selected', true);

        modal.find("[name=LessonID]").val(id);
        modal.find("[name=Title]").val(title);
        //debugger
        return false;
    }

    function CloneLesson() {
        var modal = $("#copyLessonModel");
        var title = modal.find("[name=Title]").val();
        var id = modal.find("[name=LessonID]").val();
        var chapterid = document.getElementById("ParentID").value;
        var courseid = modal.find("[name=CourseID]").val();
        var data = new FormData();
        data.append("ArrID", id);
        data.append("Title", title);
        data.append("ChapterID", chapterid);
        data.append("CourseID", courseid);
        _url = "@processUrl("CopyLesson", "Curriculum")";
        _method = "POST";
        fn = LoadData;
        $('#copyLessonModel').modal('hide');
        Ajax(_url, "POST", data, true).then(function (res) {
            if (fn != void 0) fn(res);
            console.log(res);
            return false;
        })
    }

    var JoinChapter = function (obj,ID) {
        //debugger
        var modal = $("#joinChapterModal");
        modal.find("[name=ID]").val(ID);
        var currentItem = $(obj).parent().parent();
        //debugger
        modal.find("[name=rootItem]").text($(currentItem).find("[name=Name]").text());
        modal.find("[name=newName]").val($(currentItem).find("[name=Name]").text());
        //debugger
        var lessonholder = modal.find("[name=JoinChapter]");
        $(lessonholder).empty();
        $(currentItem.parent()).siblings().each(function () {
            //var id = $(this).find("[lid]").attr("lid");
            var id = this.id;
            //debugger
            if (id != 0)
            $(lessonholder).append($("<option>", { "value": id, "text": $(this).find("[name=Name]").text()}));
        });

        return false;
    }

    function IsCreateNewChapter(obj) {
        //debugger
        var isCreateNewChapter = $('#CreateNewChapter').prop('checked')
        if (isCreateNewChapter == true) {
            $("#NewLable").attr("class", "col-form-label");
            $("#newName").attr("class", "form-control");
        }
        else {
            $("#NewLable").attr("class", "hide");
            $("#newName").attr("class", "hide");
        }
    }

    var showCoefficient = function (obj) {
        //alert(obj.value)
        var typeExam = obj.value;
        if (typeExam == '@BaseCustomerEntity.Database.LESSON_ETYPE.PRACTICE') {
            document.getElementById('Multiple').value = '1';
        }
        else if (typeExam == '@BaseCustomerEntity.Database.LESSON_ETYPE.WEEKLY') {
            document.getElementById('Multiple').value = '2';
        }
        else if (typeExam == '@BaseCustomerEntity.Database.LESSON_ETYPE.CHECKPOINT') {
            document.getElementById('Multiple').value = '3';
        }
        else {
            return false;
        }
    }

    /*
     * end Hòa thêm
     */

    function DeleteLessonCallback(res) {

        if (res != null) {
            var result = $.parseJSON(res);
            if (result.Error != null) {
                alert(result.Error);
                return false;
            }
            else {
                $('.modules-content-item#' + result.Data).remove();
            }
        }


    }

    function DeleteChapterCallback(res) {

        if (res != null) {
            var result = $.parseJSON(res);
            if (result.Error != null) {
                Swal.fire({
                        title: 'Có lỗi',
                        html: result.Error,
                        icon: 'error'
                    });
                return false;
            }
            else {
                alert("Xoá thành công.")
                $('.modules#' + result.Data).remove();
                //debugger
                $("#ParentID option[value=" + result.Data+"]").remove();
            }
        }


    }

    function SelectTemplate(type)
    {
        var modal = $("#lessonModal");
        if(type != null && type != "")
            modal.find("[name=TemplateType]").val(type);
        var template = modal.find("[name=TemplateType]").val();
        switch(template)
        {
            case "1": //bài giảng
                modal.find("[for=examOnly]").hide();
                modal.find("[for=examOnly] input").prop("required", false);
                break;
            default:
                modal.find("[for=examOnly]").show();
                modal.find("[for=examOnly] input").prop("required", true);
                break;
        }
    }

    function openLesson(obj) {
        var url = $(obj).attr("href");
        var title = $(obj).text();
        //console.log($(obj).text());
        $("#lessonFrameModal iframe").attr("src", url + "?frameview=1")
        window.history.pushState({ frame: 1, url: url, title: title }, title, url);
        document.title = title;
        hideModal();
        //console.log("open");
        $('#lessonFrameModal').modal('show').show();
    }

    function closeLessonFrame() {
        var url = '@processUrl("Modules", "Curriculum")/@Data.ID';
        var title = '@Data.Name';
        window.history.pushState({ frame: 0, url: url, title: title }, title, url);
        console.log("close");
        hideModal();
        console.log(window.history);
    }

    var renderTableContents = function () {
        $("#tableContents").empty();
        var modal = $('.modules-wrapper');
        for (i = 1; i < $(modal).children().length; i++) {
            var item = $(modal).children()[i];
            var li = item.children[0].children[0].children[1].text;
            var id = item.id;
            var child = $(item).find('[class=modules]');
            if ($(item).find('[class=modules]').length > 0) {
                $("#tableContents").append("<li style='border-radius:unset;border-bottom: 1px dotted #f0f3f4;'><a href='#" + id + "' style='text-decoration:none;'>" + li + "<i class='fas fa-caret-down' onclick='showDropDown(this,&#39;" + id + "&#39;)'></i></a></li>");
                for (j = 0; j < $(item).find('[class=modules]').length; j++) {
                    var chilItem = $(item).find('[class=modules]')[j];
                    var chilLi = chilItem.children[0].children[0].children[1].text;
                    ChilID = chilItem.id;
                    $("#tableContents").append("<ul id='chil" + id + "' style='padding-left: 10px;display:none;'></ul>");
                    $("#chil" + id + "").append("<li class='' style='border-radius:unset;border-bottom: 1px dotted #f0f3f4;'><a href='#" + ChilID + "' style='text-decoration:none;'>" + chilLi + "</a></li>");
                }
            }
            else {
                $("#tableContents").append("<li class='' style='border-radius:unset;border-bottom: 1px dotted #f0f3f4;'><a href='#" + id + "' style='text-decoration:none;'>" + li + "</a></li>");
            }
        }
        //var title = document.getElementsByClassName('page-title')[0].children[0].textContent;
        $('#title').text("@Html.Raw(ViewData["Title"].ToString().Replace("\"","'"))");
    }

    //-------------------
    //Get the button
    var btnScroll = $("#backToTop");

    var SetPeriod = function (obj) {
        var value = $(obj).val();
        //if (value < 1)
        //    value = 1;
        $(obj).siblings("[name=Start]").val((value - 1) * 7 + 1);
    }

    var getWeek = function (start) {
        if (start > 0)
            return parseInt(start / 7) + 1;
        return "";
    }

    // When the user scrolls down 20px from the top of the document, show the button
    $(document).ready(function () {
        $(".left-col").scroll(function () {
            scrollFunction();
        });
    });

    var scrollFunction = function () {
        var scroll = $('.left-col');
        if ($(scroll).scrollTop() > 200) {
            btnScroll.attr('style', 'display:block');
        } else {
            btnScroll.attr('style', 'display:none');
        }
    }

// When the user clicks on the button, scroll to the top of the document

    var fnbackToTop = function () {
        var scroll = $('.left-col');
        //$(scroll).scrollTop(0);
        $(scroll).animate({ scrollTop: 0 }, 1000);
    }

    //----------------

    $(document).ready(function () {
        LoadData();
    });

    $(window).on('popstate', function (event) {
        //alert(1);
        var state = event.originalEvent.state;
        if (state != null && state.frame == 1) {
            var url = state.url;
            $("#lessonFrameModal iframe").attr("src", url + "?frameview=1");
            document.title = state.title;
            hideModal();
            $('#lessonFrameModal').modal('show').show();
            //console.log("open");
        }
        else if (state != null && state.frame == 0) {
            var url = '@processUrl("Modules", "Curriculum")/@Data.ID';
            var title = '@Data.Name';
            window.history.pushState({ frame: 0, url: url, title: title }, title, url);
            //console.log("close");
            hideModal();
        }
    });

    var showDropDown = function (obj, id) {
        if (document.getElementById("chil" + id).getAttribute('style').includes('display'))
            document.getElementById("chil" + id).style.display = "";
        else
            document.getElementById("chil" + id).style.display = "none";
    }

    //var test = function (obj, id) {
    //    //debugger
    //    $(obj).parent().attr('class', 'active')
    //}

    var setConnectType = function (obj) {
        $(obj).siblings("[name=ConnectType]").val($(obj).find('option[value=' + $(obj).val() + ']').attr('type'));
        console.log($(obj).siblings("[name=ConnectType]").val());
    }

</script>

<style>
    #accordionSidebar .nav-item .nav-link #icon-submenu .fas {
        top: 0;
    }

    .sidebar .nav-item .nav-link {
        padding: 0.5rem 1rem;
    }

    .sidebar .nav-item .bg-white py-2 {
        padding: 0;
    }

    .collapse-item {
        position: relative;
    }

    #icon-submenu {
        top: 7px;
        right: 20px;
    }

        #icon-submenu .fas {
            padding: 5px;
            top: -1px;
            position: relative;
            margin: 0 3px;
        }

    .sidebar .nav-item .collapse .collapse-inner {
        padding: 0;
    }

    #backToTop {
        display: none;
        position: fixed;
        bottom: 65px;
        right: 15px;
        z-index: 99;
        font-size: 30px;
        border: none;
        outline: none;
        background-color: #CCC;
        color: white;
        cursor: pointer;
        padding: 7px 15px;
        border-radius: 4px;
        position: fixed;
        opacity: 0.8;
    }

        #backToTop:hover {
            opacity: 1
        }
</style>
