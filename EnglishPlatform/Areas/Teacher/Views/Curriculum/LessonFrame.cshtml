@{
    Layout = "~/Views/Shared/_LayoutTeacher_frame.cshtml";
    var Data = ViewBag.Data as BaseCustomerEntity.Database.LessonEntity;
    var Course = ViewBag.Course as BaseCustomerEntity.Database.CourseEntity;
    ViewData["Title"] = Data.Title;
}

<script>
    activeTab = "curriculum";
</script>

<div class="left-col p-0 h-100">
    <div class="main-container" style="top:0; bottom: 0">
        <div id="lessonContainer" class="h-100">

        </div>
        <input type="hidden" id="action" value="" />
    </div>
    <input type="hidden" id="LessonType" value="@Data.TemplateType" />
    <input type="hidden" id="LessonID" value="@Data.ID" />
    <input type="hidden" id="ChapterID" value="@Data.ChapterID" />
    <input type="hidden" id="CourseID" value="@Data.CourseID" />

    <style>
        .main-column {
            overflow-x: hidden !important;
            overflow-y: auto !important;
            height: 100%;
            padding: 0 12px;
        }

        #part-menu {
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background: #FFF;
            z-index: 999;
            padding: 7px;
            border: solid 1px #999;
        }

        .tab-pane,
        .tab-pane-quiz {
            padding-bottom: 10px;
            border-bottom: dashed 1px #CCC;
            margin-bottom: 10px;
            overflow:hidden;
        }


            .tab-pane.show,
            .tab-pane-quiz.show {
                display: block;
            }

        .Q3_absrow {
            position: absolute;
            top: 60px;
            left: 0;
            right: 0;
            bottom: 0;
            overflow: hidden;
            margin: 0;
        }
    </style>

</div>
<script src="~/js/content-render.js?20191207"></script>
<script>
    var config = {
        container: "lessonContainer",
        mod: "preview",
        url: {
            load: '@Url.Action("GetDetailsLesson", "Lesson")',
            load_part: '@Url.Action("GetList", "LessonPart")',
            save_part: '@Url.Action("CreateOrUpdate","LessonPart")'
        },
        type: @Data.TemplateType,
        lesson_id: '@Data.ID',
        class_id: '@Data.ID',
        chap_id: '@Data.ChapterID'
    }
    console.log(typeof (Lesson));
    var widget = new Lesson.onReady(config);


</script>

@section Scripts{
    <script>
        function SelectTemplate(type) {
            var modal = $("#lessonModal");
            if (type != null && type != "")
                modal.find("[name=TemplateType]").val(type);
            var template = modal.find("[name=TemplateType]").val();
            switch (template) {
                case "1": //bài giảng
                    modal.find("[for=examOnly]").hide();
                    modal.find("[for=examOnly] input").prop("required", false);
                    modal.find("[for=examOnly] select").prop("required", false);
                    break;
                default:
                    modal.find("[for=examOnly]").show();
                    modal.find("[for=examOnly] input").prop("required", true);
                    modal.find("[for=examOnly] select").prop("required", true);
                    break;
            }
        }

        function CreateLessonPart(lessonID) {
            var modalForm = window.partForm;
            $(modalForm).empty();
            $('#partModal #modalTitle').html("Add Content");
            $(modalForm).append($("<input>", { "type": "hidden", "name": "ParentID", "value": lessonID }));
            $('#action').val("@Url.Action("CreateOrUpdate","LessonPart")");
            var selectTemplate = $("<select>", { "class": "templatetype form-control", "onchange": "chooseTemplate()", "name": "Type", "required": "required" });
            $(modalForm).append(selectTemplate);
            $(selectTemplate).append("<option value=''>--- Choose content type ---</option>")
                .append("<option value='TEXT'>Text</option>")
                .append("<option value='VIDEO'>Video</option>")
                .append("<option value='AUDIO'>Audio</option>")
                .append("<option value='IMG'>Image</option>")
                .append("<option value='DOC'>Document (PDF, DOC)</option>")
                .append("<option value='VOCAB'>Vocabulary</option>")
                .append("<option value='QUIZ1'>QUIZ: Choose correct answer</option>")
                .append("<option value='QUIZ2'>QUIZ: Fill the word</option>")
                .append("<option value='QUIZ3'>QUIZ: Match answer</option>")
                .append("<option value='ESSAY'>QUIZ: Essay</option>");
            $(modalForm).append($("<div>", { "class": "lesson_parts" }));
            $(modalForm).append($("<div>", { "class": "question_template hide" }));
            $(modalForm).append($("<div>", { "class": "answer_template hide" }));
        }

        function EditPart(id) {
            stopAllMedia();
            var modalForm = window.partForm;
            $('#action').val("@Url.Action("CreateOrUpdate","LessonPart")");
            //showModal();
            $(modalForm).empty();
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetDetail", "LessonPart")",
                data: { ID: id },
                dataType: "json",
                success: function (data) {
                    renderEditPart(data.Data);
                }
            });
        }

        function RemovePart(id) {
            var check = confirm("Remove this content?");
            if (check) {

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("Remove","LessonPart")",
                    data: {
                        "ID": id
                    },
                    success: function (data) {
                        if (data.Error == null) {
                            document.location = document.location;
                        }
                        else {
                            alert(data.Error);
                        }
                    }
                });
            }
        }

        var ChangePartPosition = function (id, pos) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ChangePosition", "LessonPart")",
                data: {
                    "ID": id,
                    "pos": pos
                },
                success: function (data) {
                    console.log(data.message);
                }
            });
        }

        var chooseTemplate = function () {
            var type = $('.templatetype').val();
            renderPartTemplate(type);
        }

        var renderPartTemplate = function (type, data = null) {
            var contentholder = $('.lesson_parts');
            contentholder.empty();
            var question_template_holder = $('.question_template');
            question_template_holder.empty();
            var answer_template_holder = $('.answer_template');
            answer_template_holder.empty();

            contentholder.append($("<label>", { "class": "title", "text": "Title:" }));
            contentholder.append($("<input>", { "type": "text", "name": "Title", "class": "input-text form-control", "placeholder": "Title", "required": "required" }));
            if (data != null && data.Title != null)
                contentholder.find("[name=Title]").val(data.Title);

            switch (type) {
                case "TEXT"://Text
                    contentholder.append($("<label>", { "class": "title", "text": "Enter your content" }));
                    contentholder.append($("<textarea>", { "id": "editor", "rows": "15", "name": "Description", "class": "input-text form-control", "placeholder": "Enter content" }));
                    if (data != null && data.Description != null)
                        contentholder.find("[name=Description]").val(data.Description);

                    CKEDITOR.replace("editor");

                    //ClassicEditor
                    //    .create(document.querySelector('#editor'))
                    //    .then(newEditor => {
                    //        myEditor = newEditor;
                    //    })
                    //    .catch(error => {
                    //        console.error(error);
                    //    });
                    break;
                case "VIDEO":
                    contentholder.append($("<label>", { "class": "title", "text": "Choose video" }));
                    contentholder.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(contentholder.find(".media_holder"), "", "VIDEO", data != null ? data.Media : null);
                    contentholder.append($("<div>", { "class": "media_preview" }));
                    break;
                case "AUDIO":
                    contentholder.append($("<label>", { "class": "title", "text": "Choose audio" }));
                    contentholder.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(contentholder.find(".media_holder"), "", "AUDIO", data != null ? data.Media : null);
                    contentholder.append($("<div>", { "class": "media_preview" }));
                    break;
                case "IMG":
                    contentholder.append($("<label>", { "class": "title", "text": "Choose image" }));
                    contentholder.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(contentholder.find(".media_holder"), "", "IMG", data != null ? data.Media : null);
                    contentholder.append($("<div>", { "class": "media_preview" }));
                    break;
                case "DOC":
                    contentholder.append($("<label>", { "class": "title", "text": "Choose document (pdf, doc)" }));
                    contentholder.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(contentholder.find(".media_holder"), "", "DOC", data != null ? data.Media : null);
                    contentholder.append($("<div>", { "class": "media_preview" }));
                    break;
                case "QUIZ1"://Trắc nghiệm chuẩn
                    var questionTemplate = $("<fieldset>", { "class": "fieldQuestion", "Order": 0 });
                    questionTemplate.append($("<input>", { "type": "hidden", "name": "Questions.ID" }));
                    questionTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Order", "value": 0 }));
                    questionTemplate.append($("<label>", { "class": "fieldset_title", "text": "" }));
                    questionTemplate.append($("<input>", { "type": "button", "class": "quiz-remove", "value": "X", "onclick": "questionService.remove(this)", "tabindex": -1 }));
                    questionTemplate.append($("<textarea>", { "rows": "3", "name": "Questions.Content", "class": "input-text quiz-text form-control", "placeholder": "Question" }));
                    questionTemplate.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(questionTemplate.find(".media_holder"), "Questions.");
                    questionTemplate.append($("<div>", { "class": "media_preview" }));
                    questionTemplate.append(
                        $("<div>", {class: "mt-1"}).append($("<label>", { "class": "input_label mr-1", "text": "Point" }))
                            .append($("<input>", { "type": "text", "name": "Questions.Point", "class": "input-text part_point form-control", "placeholder": "Point", "value": "1" })));
                    questionTemplate.append($("<div>", {class: "mt-1"}).append($("<label>", { "class": "part_label", "text": "Answer (tick if correct)" })));

                    var answer_wrapper = $("<div>", { "class": "answer-wrapper" });
                    answer_wrapper.append($("<input>", { "type": "button", "class": "btn btnAddAnswer", "value": "+", "onclick": "addNewAnswer(this)" }));
                    questionTemplate.append(answer_wrapper);
                    questionTemplate.append($("<textarea>", { "rows": "2", "name": "Questions.Description", "class": "input-text part_description form-control", "placeholder": "Explaination" }));
                    question_template_holder.append(questionTemplate);

                    var answerTemplate = $("<fieldset>", { "class": "answer-box" });
                    answerTemplate.append($("<input>", { "type": "button", "class": "answer-remove", "value": "X", "onclick": "answerService.remove(this)", "tabindex": -1 }));
                    answerTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Answers.ID" }));
                    answerTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Answers.ParentID", "value": 0 }));
                    answerTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Answers.IsCorrect" }));
                    answerTemplate.append($("<input>", { "type": "checkbox", "class": "input-checkbox answer-checkbox", "onclick": "toggleCorrectAnswer(this)" }));
                    answerTemplate.append($("<input>", { "type": "text", "name": "Questions.Answers.Content", "class": "input-text answer-text form-control", "placeholder": "Answer" }));
                    answerTemplate.append($("<div>", { "class": "media_holder mt-1" }));
                    render.mediaAdd(answerTemplate.find(".media_holder"), "Questions.Answers.");
                    answerTemplate.append($("<div>", { "class": "media_preview" }));
                    answer_template_holder.append(answerTemplate);
                    contentholder.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(contentholder.find(".media_holder"), "", "", data != null ? data.Media : null);
                    contentholder.append($("<div>", { "class": "media_preview" }));
                    contentholder.append($("<div>", { "class": "part_content " + type }));
                    contentholder.append($("<input>", { "type": "button", "class": "btn btnAddQuestion", "value": "Add question", "onclick": "addNewQuestion()" }));
                    //Add First Question
                    if (data != null && data.Questions != null) {
                        for (var i = 0; data.Questions != null && i < data.Questions.length; i++) {
                            var quiz = data.Questions[i];
                            addNewQuestion(quiz);
                        }
                    }
                    else
                        addNewQuestion();
                    break;
                case "QUIZ2"://Trắc nghiệm dạng điền từ
                    var questionTemplate = $("<fieldset>", { "class": "fieldQuestion", "Order": 0 });
                    var quizWrapper = $("<div>", { "class": "quiz-wrapper" });
                    quizWrapper.append($("<input>", { "type": "hidden", "name": "Questions.ID" }));
                    quizWrapper.append($("<input>", { "type": "hidden", "name": "Questions.Order", "value": 0 }));
                    quizWrapper.append($("<label>", { "class": "fieldset_title", "text": "" }));
                    quizWrapper.append($("<input>", { "type": "button", "class": "quiz-remove", "value": "X", "onclick": "questionService.remove(this)", "tabindex": -1 }));
                    quizWrapper.append($("<input>", { "name": "Questions.Content", "class": "input-text quiz-text", "placeholder": "Position (skip for media content)" }));
                    quizWrapper.append($("<label>", { "class": "input_label", "text": "Point" }));
                    quizWrapper.append($("<input>", { "type": "text", "name": "Questions.Point", "class": "input-text part_point", "placeholder": "Point", "value": "1" }));
                    quizWrapper.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(quizWrapper.find(".media_holder"), "Questions.");
                    quizWrapper.append($("<div>", { "class": "media_preview" }));
                    questionTemplate.append(quizWrapper);

                    var answer_wrapper = $("<div>", { "class": "answer-wrapper" });
                    answer_wrapper.append($("<input>", { "type": "button", "class": "btn btnAddAnswer", "value": "+", "onclick": "addNewAnswer(this)" }));
                    questionTemplate.append(answer_wrapper);
                    questionTemplate.append($("<textarea>", { "rows": "2", "name": "Questions.Description", "class": "input-text part_description", "placeholder": "Explanation" }));
                    question_template_holder.append(questionTemplate);

                    var answerTemplate = $("<fieldset>", { "class": "answer-box" });
                    answerTemplate.append($("<input>", { "type": "button", "class": "answer-remove", "value": "X", "onclick": "answerService.remove(this)", "tabindex": -1 }));
                    answerTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Answers.ID" }));
                    answerTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Answers.ParentID", "value": 0 }));
                    answerTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Answers.IsCorrect", "value": true }));
                    answerTemplate.append($("<input>", { "type": "text", "name": "Questions.Answers.Content", "class": "input-text answer-text", "placeholder": "Answer" }));
                    answer_template_holder.append(answerTemplate);

                    contentholder.append($("<label>", { "class": "title", "text": "Choose media" }));
                    contentholder.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(contentholder.find(".media_holder"), "", "", data != null ? data.Media : null);
                    contentholder.append($("<div>", { "class": "media_preview" }));
                    contentholder.append($("<div>", { "class": "part_content " + type }));
                    contentholder.append($("<input>", { "type": "button", "class": "btn btnAddQuestion", "value": "Add question", "onclick": "addNewQuestion()", "tabindex": -1 }));

                    //Add First Question
                    if (data != null && data.Questions != null) {
                        for (var i = 0; data.Questions != null && i < data.Questions.length; i++) {
                            var quiz = data.Questions[i];
                            addNewQuestion(quiz);
                        }
                    }
                    else
                        addNewQuestion();
                    break;
                case "QUIZ3"://Trắc nghiệm match
                    var questionTemplate = $("<fieldset>", { "class": "fieldQuestion", "Order": 0 });
                    questionTemplate.append($("<input>", { "type": "hidden", "name": "Questions.ID" }));
                    questionTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Order", "value": 0 }));
                    questionTemplate.append($("<label>", { "class": "fieldset_title", "text": "" }));
                    questionTemplate.append($("<input>", { "type": "button", "class": "quiz-remove", "value": "X", "onclick": "questionService.remove(this)", "tabindex": -1 }));

                    var quizWrapper = $("<div>", { "class": "quiz-wrapper" });
                    quizWrapper.append($("<input>", { "type": "text", "name": "Questions.Content", "class": "input-text quiz-text form-control", "placeholder": "Question", "tabindex": 0 }));
                    quizWrapper.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(quizWrapper.find(".media_holder"), "Questions.");
                    quizWrapper.append($("<div>", { "class": "media_preview" }));
                    quizWrapper.append($("<label>", { "class": "input_label", "text": "Point" }));
                    quizWrapper.append($("<input>", { "type": "text", "name": "Questions.Point", "class": "input-text part_point form-control", "placeholder": "Point", "value": "1", "tabindex": 0 }));
                    questionTemplate.append(quizWrapper);

                    var answer_wrapper = $("<div>", { "class": "answer-wrapper" });
                    answer_wrapper.append($("<input>", { "type": "button", "class": "btn btn-primary btnAddAnswer", "value": "+", "onclick": "addNewAnswer(this)", "tabindex": -1 }));
                    questionTemplate.append(answer_wrapper);
                    question_template_holder.append(questionTemplate);

                    var answerTemplate = $("<fieldset>", { "class": "answer-box selected" });
                    answerTemplate.append($("<input>", { "type": "button", "class": "answer-remove", "value": "X", "onclick": "answerService.remove(this)", "tabindex": -1 }));
                    answerTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Answers.ID" }));
                    answerTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Answers.ParentID", "value": 0 }));
                    answerTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Answers.IsCorrect", "value": true }));
                    answerTemplate.append($("<input>", { "type": "checkbox", "class": "input-checkbox answer-checkbox", "onclick": "toggleCorrectAnswer(this)", "checked": "checked", "tabindex": 0 }));
                    answerTemplate.append($("<input>", { "type": "text", "name": "Questions.Answers.Content", "class": "input-text answer-text form-control", "placeholder": "Answer (tick if correct)", "tabindex": 0 }));
                    answerTemplate.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(answerTemplate.find(".media_holder"), "Questions.Answers.");
                    answerTemplate.append($("<div>", { "class": "media_preview" }));
                    answer_template_holder.append(answerTemplate);

                    contentholder.append($("<label>", { "class": "title", "text": "Choose media", "tabindex": -1 }));
                    contentholder.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(contentholder.find(".media_holder"), "", "", data != null ? data.Media : null);
                    contentholder.append($("<div>", { "class": "media_preview" }));
                    contentholder.append($("<div>", { "class": "part_content " + type }));
                    contentholder.append($("<input>", { "type": "button", "class": "btn btnAddQuestion", "value": "Add question", "onclick": "addNewQuestion()", "tabindex": -1 }));

                    //Add question
                    if (data != null && data.Questions != null) {
                        for (var i = 0; data.Questions != null && i < data.Questions.length; i++) {
                            var quiz = data.Questions[i];
                            addNewQuestion(quiz);
                        }
                    }
                    else
                        addNewQuestion();
                    break;
                case "ESSAY"://Tự luận
                    contentholder.append($("<label>", { "class": "title", "text": "Enter title" }));
                    contentholder.append($("<textarea>", { "id": "editor", "rows": "15", "name": "Description", "class": "input-text form-control", "placeholder": "Description" }));
                    if (data != null && data.description != null)
                        contentholder.find("[name=Description]").val(data.description);
                    CKEDITOR.replace("editor");

                    //ClassicEditor
                    //    .create(document.querySelector('#editor'))
                    //    .then(newEditor => {
                    //        myEditor = newEditor;
                    //    })
                    //    .catch(error => {
                    //        console.error(error);
                    //    });

                    var questionTemplate = $("<fieldset>", { "class": "fieldQuestion", "Order": 0 });
                    questionTemplate.append($("<input>", { "type": "hidden", "name": "Questions.ID" }));
                    questionTemplate.append($("<input>", { "type": "hidden", "name": "Questions.Order", "value": 0 }));
                    questionTemplate.append($("<label>", { "class": "fieldset_title", "text": "" }));

                    var quizWrapper = $("<div>", { "class": "quiz-wrapper" });
                    quizWrapper.append($("<input>", { "type": "text", "name": "Questions.Content", "class": "input-text quiz-text form-control", "placeholder": "Question", "tabindex": 0 }));
                    quizWrapper.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(quizWrapper.find(".media_holder"), "Questions.");
                    quizWrapper.append($("<div>", { "class": "media_preview" }));
                    quizWrapper.append($("<label>", { "class": "input_label", "text": "Point" }));
                    quizWrapper.append($("<input>", { "type": "text", "name": "Questions.Point", "class": "input-text part_point form-control", "placeholder": "Point", "value": "1", "tabindex": 0 }));
                    questionTemplate.append(quizWrapper);

                    contentholder.append($("<label>", { "class": "title", "text": "Choose media", "tabindex": -1 }));
                    contentholder.append($("<div>", { "class": "media_holder" }));
                    render.mediaAdd(contentholder.find(".media_holder"), "", "", data != null ? data.Media : null);
                    contentholder.append($("<div>", { "class": "media_preview" }));
                    contentholder.append($("<div>", { "class": "part_content " + type }));

                    if (data != null && data.Questions != null) {
                        for (var i = 0; data.Questions != null && i < data.Questions.length; i++) {
                            var quiz = data.Questions[i];
                            addNewQuestion(quiz);
                        }
                    }
                    else
                        addNewQuestion();
                    break;
                default:
                    alert("Not implement");
                    break;
            }

            if (data != null && data.Media != null)
                render.mediaContent(data, contentholder.find(".media_preview:first"), type);
            //debugger;
        }

        var render = {
            editPart: function (data) {
                var modalForm = window.partForm;
                $('#partModal #modalTitle').html("Update");
                $(modalForm).append($("<input>", { "type": "hidden", "name": "ParentID", "value": data.ParentID }));
                $(modalForm).append($("<input>", { "type": "hidden", "name": "ID", "value": data.ID }));
                $(modalForm).append($("<input>", { "type": "hidden", "name": "Type", "value": data.Type }));

                $('#action').val("@Url.Action("CreateOrUpdate","LessonPart")");

                $(modalForm).append($("<div>", { "class": "lesson_parts" }));
                $(modalForm).append($("<div>", { "class": "question_template hide" }));
                $(modalForm).append($("<div>", { "class": "answer_template hide" }));
                renderPartTemplate(data.Type, data);

            },
            part: function (data) {
                var time = "", point = "";

                if (data.Timer > 0) {
                    time = " (" + data.Timer + "m)";
                }
                if (data.Point > 0) {
                    point = " (" + data.Point + "p)";
                }

                var container = $("#" + data.ParentID).find(".tab-content");
                var tabContainer = $("#menu-tab #pills-tab");


                //tabs
                var lessonitem = null;
                if ($('li #pills-' + data.ID).length > 0) {
                    lessonitem = $('li #pills-' + data.ID).parent().empty()
                }
                else {
                    lessonitem = $("<li>", { "class": "nav-item" });
                    tabContainer.append(lessonitem);
                }

                var itemtitle = $("<a>", { "id": "pills-" + data.ID, "class": "nav-link", "data-toggle": "pill", "href": "#pills-part-" + data.ID, "role": "tab", "aria-controls": "pills-" + data.ID, "aria-selected": "false", "text": data.Title });
                lessonitem.append(itemtitle);

                var tabsitem = null;

                if ($('#pills-part-' + data.ID).length > 0) {
                    //clear old-tab
                    tabsitem = $('#pills-part-' + data.ID).empty();
                }
                else
                    tabsitem = $("<div>", { "id": "pills-part-" + data.ID, "class": "tab-pane fade", "role": "tabpanel", "aria-labelledby": "pills-" + data.ID });

                var itembox = $("<div>", { "class": "part-box " + data.Type, "id": data.ID });
                tabsitem.append(itembox);

                var ItemRow = $("<div>", { "class": "row" });

                var boxHeader = $("<div>", { "class": "part-box-header row" });
                if (data.Title != null) {
                    boxHeader.append($("<h5>", { "class": "title col-md-10", "text": data.Title + time + point }));
                }
                //boxHeader.append($("<a>", { "class": "btn btn-sm btn-view", "text": "Collapse", "onclick": "toggleCompact(this)" }));
                var boxButton = $("<div>", { "class": "text-right col-md-2" });
                boxButton.append($("<button>", { "class": "btn btn-primary btn-sm btn-edit", "text": "Edit", "data-toggle": "modal", "data-target": "#partModal", "onclick": "lessonPartService.edit('" + data.ID + "')" }))
                boxButton.append($("<button>", { "class": "btn btn-danger btn-sm btn-close", "text": "Remove", "onclick": "lessonPartService.remove('" + data.ID + "')" }));

                itembox.append(boxHeader);
                boxHeader.append(boxButton);
                //itembox.append(ItemRow);
                switch (data.Type) {
                    case "TEXT":
                        var itemBody = $("<div>", { "class": "content-wrapper" });
                        if (data.Description != null) {
                            itemBody.append($("<div>", { "class": "doc-content" }).html(data.Description));
                        }
                        itemtitle.prepend($("<i>", { "class": "far fa-file-word" }));
                        itembox.append(itemBody);
                        container.append(tabsitem);
                        break;
                    case "IMG":
                        var itemBody = $("<div>", { "class": "media-wrapper" });
                        render.mediaContent(data, itemBody, "IMG");
                        if (data.Description != null)
                            wrapper.append($("<div>", { "class": "description", "text": data.Description }));
                        itemtitle.prepend($("<i>", { "class": "fas fa-file-image" }));
                        itembox.append(itemBody);
                        container.append(tabsitem);
                        break;
                    case "AUDIO":
                        var itemBody = $("<div>", { "class": "media-wrapper" });
                        render.mediaContent(data, itemBody, "AUDIO");
                        if (data.Description != null)
                            wrapper.append($("<div>", { "class": "description", "text": data.Description }));
                        itemtitle.prepend($("<i>", { "class": "fas fa-music" }));
                        itembox.append(itemBody);
                        container.append(tabsitem);
                        break;
                    case "VIDEO":
                        var itemBody = $("<div>", { "class": "media-wrapper" });
                        render.mediaContent(data, itemBody, "VIDEO");
                        if (data.Description != null)
                            wrapper.append($("<div>", { "class": "description", "text": data.Description }));
                        itemtitle.prepend($("<i>", { "class": "far fa-play-circle" }));
                        itembox.append(itemBody);
                        container.append(tabsitem);
                        break;
                    case "DOC":
                        var itemBody = $("<div>", { "class": "media-wrapper" });
                        render.mediaContent(data, itemBody, "DOC");
                        if (data.Description != null)
                            wrapper.append($("<div>", { "class": "description", "text": data.Description }));
                        itemtitle.prepend($("<i>", { "class": "fas fa-file-word" }));
                        itembox.append(itemBody);
                        container.append(tabsitem);
                        break;
                    case "QUIZ1":
                    case "QUIZ2":
                        var itemBody = $("<div>", { "class": "quiz-wrapper" });
                        itemtitle.prepend($("<i>", { "class": "fab fa-leanpub" }));
                        itembox.append(itemBody);
                        render.mediaContent(data, itemBody, "");
                        container.append(tabsitem);
                        //Render Content

                        //Render Question
                        totalQuiz = data.Questions.length;
                        for (var i = 0; data.Questions != null && i < data.Questions.length; i++) {
                            var item = data.Questions[i];
                            render.questions(item, data.Type);
                        }
                        break;
                    case "QUIZ3":
                        var itemBody = $("<div>", { "class": "quiz-wrapper col-8" });
                        itemtitle.prepend($("<i>", { "class": "fab fa-leanpub" }));
                        render.mediaContent(data, ItemRow, "");
                        ItemRow.append(itemBody);
                        ItemRow.find(".media-holder").addClass("col-12");
                        var answers_box = $("<div>", { "class": "answer-wrapper no-child col-4" });
                        ItemRow.append(answers_box);
                        $(answers_box).droppable({
                            tolerance: "intersect",
                            accept: ".answer-item",
                            activeClass: "hasAnswer",
                            hoverClass: "answerHover",
                            drop: function (event, ui) {
                                var prevHolder = ui.helper.data('parent');
                                $(prevHolder).find(".placeholder").show();
                                $(this).append($(ui.draggable));
                            }
                        });
                        container.append(tabsitem);
                        //Render Question
                        totalQuiz = data.Questions.length;
                        for (var i = 0; data.Questions != null && i < data.Questions.length; i++) {
                            var item = data.Questions[i];
                            render.questions(item, data.Type);
                        }
                        break;
                    case "ESSAY":
                        var itemBody = $("<div>", { "class": "content-wrapper" });
                        if (data.Description != null) {
                            itemBody.append($("<div>", { "class": "doc-content" }).html(data.Description));
                        }
                        itemtitle.prepend($("<i>", { "class": "fab fa-leanpub" }));
                        itembox.append(itemBody);
                        container.append(tabsitem);
                        var itemBody = $("<div>", { "class": "quiz-wrapper" });
                        itembox.append(itemBody);
                        render.mediaContent(data, itemBody, "");
                        totalQuiz = data.Questions.length;
                        for (var i = 0; data.Questions != null && i < data.Questions.length; i++) {
                            var item = data.Questions[i];
                            render.questions(item, data.Type);
                        }
                        break;
                }

                if (tabContainer.find(".nav-item").length == 1) {
                    itemtitle.addClass("active");
                    tabsitem.addClass("show active");
                }
                $('.btn').tooltip({
                    trigger: "hover"
                });
            },
            partNew: function (data, index) {

                var container = $("#" + data.ParentID).find(".tab-content");
                var tabContainer = $("#menu-tab #pills-tab");

                var lessonitem = null;
                if ($('li #pills-' + data.ID).length > 0) {
                    lessonitem = $('li #pills-' + data.ID).parent().empty()
                }
                else {
                    lessonitem = $("<li>", { "class": "nav-item" });
                    tabContainer.append(lessonitem);
                }

                var itemtitle = $("<a>", { "id": "pills-" + data.ID, "class": "nav-link", "data-toggle": "pill", "href": "#pills-part-" + data.ID, "role": "tab", "aria-controls": "pills-" + data.ID, "aria-selected": "false", "text": data.Title });
                lessonitem.append(itemtitle);

                var active = "";
                if (index != void 0 && index == 0) {
                    active = "show active";
                }

                var type = $('#LessonType').val();
                var dspClass = 'fade ';
                if (type == TEMPLATE_TYPE.LESSON)
                    dspClass = 'd-block ';

                var html = '<div id="pills-part-' + data.ID + '" class="tab-pane ' + dspClass + active + '" role="tabpanel" aria-labelledby="pills-' + data.ID + '">';

                html += '<div class="part-box ' + (type == TEMPLATE_TYPE.LESSON ? 'position-relative border-bottom ' : '') + data.Type + '" id="' + data.ID + '">';

                switch (data.Type) {
                    case "QUIZ1": html += renderQUIZ1(data); //type == 2 ? renderQUIZ1(data) : renderQUIZ1_BG(data);
                        break;
                    case "QUIZ2": html += renderQUIZ2(data);//type == 2 ? renderQUIZ2(data) : renderQUIZ2_BG(data);
                        break;
                    case "QUIZ3": html += renderQUIZ3(data); //type == 2 ? renderQUIZ3(data) : renderQUIZ3_BG(data);
                        break;
                    case "ESSAY": html += renderESSAY(data); //type == 2 ? renderESSAY(data) : renderESSAY_BG(data);
                        break;
                    case "VOCAB": html += renderVOCAB(data); //type == 2 ? renderVOCAB(data) : renderVOCAB_BG(data);
                        break;
                    case "DOC": html += renderDOC(data);
                        break;
                    case "IMG": html += renderIMG(data);
                        break;
                    case "AUDIO": html += renderAUDIO(data);
                        break;
                    case "VIDEO": html += renderVIDEO(data);
                        break;
                    default: html += renderTEXT(data); //text
                        break;
                }
                html += '</div></div>';
                container.append(html);
                container.find('.part-column').addClass('scrollbar-outer').scrollbar();
                $('.lesson-container .card-body').addClass('scrollbar-outer').scrollbar();
                //return html;
            },
            questions: function (data, template) {
                //render question
                switch (template) {
                    case "QUIZ2":
                        var container = $("#" + data.ParentID + " .quiz-wrapper");
                        var quizitem = $("<div>", { "class": "quiz-item", "id": data.ID });
                        var boxHeader = $("<div>", { "class": "quiz-box-header" });
                        boxHeader.append($("<div>", { "class": "quiz-text", "text": data.Content }));
                        render.mediaContent(data, boxHeader);
                        quizitem.append(boxHeader);

                        container.append(quizitem);
                        var answer_wrapper = $("<div>", { "class": "answer-wrapper" });

                        quizitem.append(answer_wrapper);

                        if (data.Description !== "") {
                            var extend = $("<div>", { "class": "quiz-extend", "text": data.Description });
                            quizitem.append(extend);
                        }

                        for (var i = 0; data.Answers != null && i < data.Answers.length; i++) {
                            var item = data.Answers[i];
                            render.answers(item, template);
                        }
                        break;
                    case "QUIZ3":
                        var container = $("#" + data.ParentID + " .quiz-wrapper");

                        var quizitem = $("<div>", { "class": "quiz-item", "id": data.ID });

                        var quiz_part = $("<div>", { "class": "quiz-pane col-6" });
                        var answer_part = $("<div>", { "class": "answer-pane no-child col-6" });
                        quizitem.append(quiz_part);
                        quizitem.append(answer_part);

                        var pane_item = $("<div>", { "class": "pane-item" });
                        if (data.Media == null) {
                            pane_item.append($("<div>", { "class": "quiz-text", "text": data.Content }));
                        } else {
                            render.mediaContent(data, pane_item);
                        }

                        quiz_part.append(pane_item);
                        container.append(quizitem);

                        $(answer_part).droppable({
                            tolerance: "intersect",
                            accept: ".answer-item",
                            activeClass: "hasAnswer",
                            hoverClass: "answerHover",
                            drop: function (event, ui) {
                                $(this).find(".placeholder").hide();
                                var prevHolder = ui.helper.data('parent');

                                if ($(this).find(".answer-item").length > 0) {//remove all answer to box
                                    //$(container).siblings(".answer-wrapper").append($(this).find(".answer-item"));
                                    $(prevHolder).append($(this).find(".answer-item"));
                                }
                                else {
                                    $(prevHolder).find(".placeholder").show();
                                };
                                $(this).append($(ui.draggable));
                            }
                        });

                        for (var i = 0; data.Answers != null && i < data.Answers.length; i++) {
                            var item = data.Answers[i];
                            render.answers(item, template);
                        }
                        break;
                    default:
                        var point = "";

                        if (data.Point > 0) {
                            point = " (" + data.Point + "p)";
                        }
                        var container = $("#" + data.ParentID + " .quiz-wrapper");

                        var itembox = $("<div>", { "class": "quiz-item", "id": data.ID });
                        var boxHeader = $("<div>", { "class": "quiz-box-header" });
                        if (data.Content != null)
                            boxHeader.append($("<h5>", { "class": "title", "text": data.Content + point }));
                        else
                            boxHeader.append($("<h5>", { "class": "title", "text": point }));

                        render.mediaContent(data, boxHeader);

                        itembox.append(boxHeader);
                        var answer_wrapper = $("<div>", { "class": "answer-wrapper" });

                        itembox.append(answer_wrapper);

                        if (data.Description !== "") {
                            var extend = $("<div>", { "class": "quiz-extend", "text": data.Description });
                            itembox.append(extend);
                        }

                        container.append(itembox);

                        //Render Answer
                        for (var i = 0; data.Answers != null && i < data.Answers.length; i++) {
                            var item = data.Answers[i];
                            render.answers(item, template);
                        }
                        break;
                }
            },
            answers: function (data, template) {
                var container = $("#" + data.ParentID + " .answer-wrapper");
                var answer = $("<fieldset>", { "class": "answer-item" });
                switch (template) {
                    case "QUIZ2":

                        if ($(container).find(".answer-item").length == 0) {
                            answer.append($("<input>", { "type": "text", "class": "input-text answer-text form-control", "placeholder": data.Content }));
                            container.append(answer);
                        }
                        else {
                            var oldval = $(container).find(".answer-text").attr("placeholder");
                            $(container).find(".answer-text").attr("placeholder", oldval + " | " + data.Content);
                        }
                        break;
                    case "QUIZ3":
                        var placeholder = $("#" + data.ParentID).find(".answer-pane");
                        $(placeholder).removeClass("no-child");
                        placeholder.empty().append($("<div>", { "class": "pane-item placeholder", "text": "Drop your answer here" }));
                        container = $("#" + data.ParentID).parent().siblings(".answer-wrapper");

                        if (data.Content != null)
                            answer.append($("<input>", { "type": "hidden", "value": data.Content }));

                        if (data.Media != null) {
                            render.mediaContent(data, answer);
                        }
                        else
                            answer.append($("<label>", { "class": "answer-text", "text": data.Content }));

                        answer.draggable({
                            cursor: "move",
                            helper: 'clone',
                            revert: "true",
                            scroll: true,
                            start: function (event, ui) {
                                ui.helper.data('parent', $(this).parent());
                            },
                            stop: function (event, ui) {
                                //var prevParent = ui.helper.data('parent');
                                //$(prevParent).find(".placeholder").show();
                            }
                        });

                        container.append(answer);
                        break;
                    default:
                        var form = $("<div>", { "class": "form-check" });
                        answer.append(form);
                        form.append($("<input>", { "type": "hidden" }));
                        form.append($("<input>", { "id": data.ID, "type": "radio", "class": "input-checkbox answer-checkbox form-check-input", "onclick": "answerQuestion(this,'" + data.ParentID + "')", "name": "rd_" + data.ParentID }));
                        if (data.Content != null)
                            form.append($("<label>", { "class": "answer-text form-check-label", "for": data.ID, "text": data.Content }));
                        render.mediaContent(data, answer);
                        container.append(answer);
                        break;
                }

            },
            mediaAdd: function (wrapper, prefix, type = "", data = null) {
                wrapper.empty();
                wrapper.append($("<input>", { "type": "hidden", "name": prefix + "Media.Name", "for": "medianame" }));
                wrapper.append($("<input>", { "type": "hidden", "name": prefix + "Media.OriginalName", "for": "mediaorgname" }));
                wrapper.append($("<input>", { "type": "hidden", "name": prefix + "Media.Extension", "for": "mediaext" }));
                wrapper.append($("<input>", { "type": "hidden", "name": prefix + "Media.Path", "for": "mediapath" }));
                switch (type) {
                    case "IMG":
                        wrapper.append($("<input>", { "type": "file", "name": "file", "onchange": "changeMedia(this)", "class": "hide", "accept": "image/*" }));
                        break;
                    case "VIDEO":
                        wrapper.append($("<input>", { "type": "file", "name": "file", "onchange": "changeMedia(this)", "class": "hide", "accept": "video/*" }));
                        break;
                    case "AUDIO":
                        wrapper.append($("<input>", { "type": "file", "name": "file", "onchange": "changeMedia(this)", "class": "hide", "accept": "audio/*" }));
                        break;
                    case "DOC":
                        wrapper.append($("<input>", { "type": "file", "name": "file", "onchange": "changeMedia(this)", "class": "hide", "accept": ".pdf" }));
                        break;
                    default:
                        wrapper.append($("<input>", { "type": "file", "name": "file", "onchange": "changeMedia(this)", "class": "hide" }));
                        break;
                }
                wrapper.append($("<input>", { "type": "button", "class": "btn btn-primary btnAddFile", "onclick": "chooseFile(this)", "value": "Choose file", "tabindex": -1 }));
                wrapper.append($("<input>", { "type": "button", "class": "btn btn-danger btnResetFile hide", "onclick": "resetMedia(this)", "value": "x", "tabindex": -1 }));
                if (data != null) {
                    if (data.Name != null) $(wrapper).find("[name='" + prefix + "Media.Name']").val(data.Name);
                    if (data.OriginalName != null) {
                        $(wrapper).find("[name='" + prefix + "Media.OriginalName']").val(data.OriginalName);
                        $(wrapper).find(".btnAddFile").val(data.OriginalName);
                        $(wrapper).find(".btnResetFile").removeClass("hide");
                    }
                    if (data.Extension != null) $(wrapper).find("[name='" + prefix + "Media.Extension']").val(data.Extension);
                    if (data.Path != null) {
                        $(wrapper).find("[name='" + prefix + "Media.Path']").val(data.Path);
                    }
                }
            },
            mediaContent: function (data, wrapper, type = "") {

                if (data.Media != null) {
                    var mediaHolder = $("<div>", { "class": "media-holder " + type });
                    switch (type) {
                        case "IMG":
                            mediaHolder.append($("<img>", { "class": "img-fluid lazy", "src": data.Media.Path }));
                            break;
                        case "VIDEO":
                            mediaHolder.append("<video controls><source src='" + data.Media.Path + "' type='" + data.Media.Extension + "' />Your browser does not support the video tag</video>");
                            break;
                        case "AUDIO":
                            mediaHolder.append("<audio id='audio' controls><source src='" + data.Media.Path + "' type='" + data.Media.Extension + "' />Your browser does not support the audio tag</audio>");
                            break;
                        case "DOC":
                            mediaHolder.append($("<embed>", { "src": data.Media.Path, "width": "100%", "height": "800px" }));
                            break;
                        default:
                            if (data.Media.Extension != null)
                                if (data.Media.Extension.indexOf("image") >= 0)
                                    mediaHolder.append($("<img>", { "class": "img-fluid lazy", "src": data.Media.Path }));
                                else if (data.Media.Extension.indexOf("video") >= 0)
                                    mediaHolder.append("<video controls><source src='" + data.Media.Path + "' type='" + data.Media.Extension + "' />Your browser does not support the video tag</video>");
                                else if (data.Media.Extension.indexOf("audio") >= 0)
                                    mediaHolder.append("<audio id='audio' controls><source src='" + data.Media.Path + "' type='" + data.Media.Extension + "' />Your browser does not support the audio tag</audio>");
                                else
                                    mediaHolder.append($("<embed>", { "src": data.Media.Path }));
                            break;
                    }
                    wrapper.append(mediaHolder);
                }

            }
        }
    </script>
    <style>

        .right-content .left-col {
            padding: 0 12px;
            position: absolute;
            width: 100%;
        }

            .right-content .left-col .page-title {
                padding: 12px;
            }

            .right-content .left-col .main-container {
                position: absolute;
                padding: 0;
                top: 56px;
                bottom: 44px;
                right: 0;
                left: 0;
                overflow-x: hidden;
                overflow-y: auto;
                z-index: 1000;
                height: auto;
            }

        .description img {
            max-width: 100%;
        }

        .part-box {
            /*position: relative;*/
            /*top: 0;
            left: 0;
            bottom: 0;
            right: 0;*/
            /*width: 100%;*/
            overflow: hidden;
        }

            .part-box .scroll-wrapper {
                /*overflow-x: hidden !important;*/
                /*overflow-y: auto !important;*/
                height: 100%;
                /*padding: 0 12px;*/
            }

                .part-box .scroll-wrapper p {
                    margin: 0.25rem 0;
                }

            .part-box .scroll-wrapper {
                font-size: 1rem;
            }

                .part-box .scroll-wrapper .dragging {
                    overflow: visible !important;
                    /*overflow-y: auto !important;*/
                }

                .part-box .scroll-wrapper .droptarget {
                    z-index: -1;
                    /*overflow-y: auto !important;*/
                }

        #lessonSummary {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: #004085;
            max-height: 44px;
            /*transition: ease 0.5s;*/
            z-index: 1001;
        }

            #lessonSummary.expand {
                max-height: 200px;
                opacity: 0.85;
            }

            #lessonSummary .btn {
                line-height: 1;
                padding: .255rem .75rem;
            }

            #lessonSummary #quizNavigator {
                display: none;
            }

            #lessonSummary.expand #quizNavigator {
                display: block;
            }

        .rounded-quiz {
            width: 28px;
            height: 28px;
        }

            .rounded-quiz.completed {
                background-color: #28a745 !important;
            }

        .QUIZ1 .answer-item, .QUIZ2 .answer-item {
            max-width: 30%;
            padding-right: 10px;
            display: inline-block;
        }




        #nav-menu {
            z-index: 2;
            padding: 8px;
        }

            #nav-menu.bd-top {
                border-top: dashed 1px #CCC;
            }

            #nav-menu.bd-bottom {
                border-bottom: dashed 1px #CCC;
            }


            #nav-menu .lesson-tab {
                height: 42px;
            }

        #pills-tab {
            width: 100%;
            overflow: hidden;
            background: #DDD;
            border: solid 1px #999;
            z-index: 1021;
            border-radius: 10px;
        }

            #pills-tab.compact {
                height: 42px;
                background: #DDD;
            }

            #pills-tab .nav-item {
                width: 100%;
            }

                #pills-tab .nav-item .nav-link {
                    padding: 3px 10px;
                    cursor: pointer;
                }

        .tab-content > .tab-pane.show {
            display: block;
        }

        /*************** SIMPLE OUTER SCROLLBAR ***************/

        .scrollbar-outer > .scroll-element,
        .scrollbar-outer > .scroll-element div {
            border: none;
            margin: 0;
            padding: 0;
            position: absolute;
            z-index: 10;
        }

        .scrollbar-outer > .scroll-element {
            background-color: #ffffff;
        }

            .scrollbar-outer > .scroll-element div {
                display: block;
                height: 100%;
                left: 0;
                top: 0;
                width: 100%;
            }

            .scrollbar-outer > .scroll-element.scroll-x {
                bottom: 0;
                height: 12px;
                left: 0;
                width: 100%;
            }

            .scrollbar-outer > .scroll-element.scroll-y {
                height: 100%;
                right: 0;
                top: 0;
                width: 12px;
            }

            .scrollbar-outer > .scroll-element.scroll-x .scroll-element_outer {
                height: 8px;
                top: 2px;
            }

            .scrollbar-outer > .scroll-element.scroll-y .scroll-element_outer {
                left: 2px;
                width: 8px;
            }

            .scrollbar-outer > .scroll-element .scroll-element_outer {
                overflow: hidden;
            }

            .scrollbar-outer > .scroll-element .scroll-element_track {
                background-color: #eeeeee;
            }

            .scrollbar-outer > .scroll-element .scroll-element_outer,
            .scrollbar-outer > .scroll-element .scroll-element_track,
            .scrollbar-outer > .scroll-element .scroll-bar {
                -webkit-border-radius: 8px;
                -moz-border-radius: 8px;
                border-radius: 8px;
            }

            .scrollbar-outer > .scroll-element .scroll-bar {
                background-color: #d9d9d9;
            }

                .scrollbar-outer > .scroll-element .scroll-bar:hover {
                    background-color: #c2c2c2;
                }

            .scrollbar-outer > .scroll-element.scroll-draggable .scroll-bar {
                background-color: #919191;
            }
    </style>
}

@section Modals{

    <div class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" id="lessonModal">
        <div class="modal-dialog modal-xl lesson-modal" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Edit Lesson</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="@Url.Action("CreateOrUpdate","Lesson")" id="modal-body" name="lessonForm" enctype="multipart/form-data">
                        <input type="hidden" name="ID" value="@Data.ID" />
                        <input type="hidden" name="CourseID" value="@Course.ID" />
                        <input type="hidden" name="ChapterID" value="" />
                        <div class="form-group">
                            <label class="col-form-label">Lessson Type:</label>
                            <select name="TemplateType" class="form-control" onchange="SelectTemplate()">
                                <option value="1">Lecture</option>
                                <option value="2">Exam</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="col-form-label">Title:</label>
                            <input type="text" class="form-control" name="Title" required>
                        </div>
                        <div class="form-group" style="width: 45%;  display:inline-block; margin-right: 5%;" for="examOnly">
                            <label class="col-form-label">Duration (minutes):</label>
                            <input type="text" class="form-control" name="Timer" placeholder="0 = unlimited" required>
                        </div>
                        <div class="form-group" style="width: 45%;  display:inline-block;" for="examOnly">
                            <label class="col-form-label">Attempt limit:</label>
                            <input type="text" class="form-control" name="Limit" placeholder="0 = unlimited" required>
                        </div>
                        <div class="form-group" style="width: 45%; display:inline-block; margin-right: 5%;" for="examOnly">
                            <label class="col-form-label">Point:</label>
                            <input type="text" class="form-control" name="Point" placeholder="0" required>
                        </div>
                        <div class="form-group" style="width: 45%;  display:inline-block;" for="examOnly">
                            <label class="col-form-label">Multiple:</label>
                            <input type="text" class="form-control" name="Multiple" placeholder="> 0" required>
                        </div>
                        <div class="form-group" style="width: 45%;  display:inline-block;" for="examOnly">
                            <label class="col-form-label">Exam Type:</label>
                            <select name="Etype" class="form-control" required>
                                <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.PRACTICE">Practice</option>
                                <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.WEEKLY">Weekly Exam</option>
                                <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.CHECKPOINT">Checkpoint Exam</option>
                                <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.EXPERIMENT">Experiment Report</option>
                                <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.INTERSHIP">Intership Report</option>
                                <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.END">End-of-course Exam</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-close" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary btnSaveForm" onclick="submitForm(event, '#lessonModal', RefreshPage())">Save</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" tabindex="-1" role="dialog" aria-hidden="true" id="partModal">
        <div class="modal-dialog modal-xl lesson-modal" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Add new part</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="#" id="modal-body" name="partForm" enctype="multipart/form-data"></form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-close" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary btnSaveForm" onclick="submitForm(event)">Save</button>
                </div>
            </div>
        </div>
    </div>
}