@{

    Layout = "~/Views/Shared/_LayoutTeacher_NewUI.cshtml";
    ViewData["Title"] = "Quản lý giáo viên";
    var listGrade = ViewBag.Grade as List<BaseCustomerEntity.Database.GradeEntity>;
    var listSubject = ViewBag.Subject as List<BaseCustomerEntity.Database.SubjectEntity>;
    var listTeacher = ViewBag.Teacher as List<BaseCustomerEntity.Database.TeacherEntity>;
    var listSkills = ViewBag.Skills as List<BaseCustomerEntity.Database.SkillEntity>;
    var listClass = ViewBag.Classes as List<BaseCustomerEntity.Database.ClassEntity>;
    var roles = ViewBag.Roles as List<BaseCustomerEntity.Database.RoleEntity>;
    var user = ViewBag.User as string;
    //var hasManageRole = (bool)(ViewBag.Managable ?? false);
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    string processUrl(string act, string ctrl, Object param = null)
    {
        string url = Url.Action(act, ctrl, param);

        return $"/{center}{url}";
    }
}
<script>
    setActiveMenu("teacher");
</script>

<section class="module" id="dashboard_content">
    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-header" v-cloak>
        <div class="flex flex-row border-b flex-wrap align-items-center">
            <div class="search-box m-1">
                <button><i class="ic ic-find"></i></button>
                <input type="text" name="" v-model="searchTerm" placeholder="Tên giáo viên">
            </div>

            <b-button class="btn btn-addevent btn-student btn-sm m-1 btn-secondary" v-on:click="showAddModal()"><i class="ti-plus"></i></b-button>
            <b-button class="btn btn-addevent btn-student btn-sm m-1 btn-secondary" style="margin-left:5px" v-on:click="showUploadModal($event.target.value)"><i class="ti-zip"></i></b-button>
        </div>
    </div>
    <div class="card-body" v-cloak>
        <table id="ed_table" class="table">
            <thead>
                <tr>
                    <th v-for="(field,k) in fields">{{field.label}}</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="(item,k) in tableData">
                    <td>{{(page - 1) * view + (k+1)}}</td>
                    <td><a href="#" :title="item.FullName">{{item.FullName}}</a></td>
                    <td>{{item.Email}}</td>
                    <td>{{item.Phone}}</td>
                    <td>{{item.RoleName}}</td>
                    <td>
                        <template v-if="item.ID != '@user'">
                            <button class="btn-act btn-trash" v-on:click="showAddModal(item)"><i class="ti-pencil-alt"></i></button>
                            <button class="btn-act btn-trash" v-on:click="showPassModal(item)"><i class="ti-key"></i></button>
                            <button class="btn-act btn-trash" v-on:click="removeMember(item)"><i class="ti-trash"></i></button>
                        </template>
                    </td>
                </tr>

            </tbody>
        </table>
        <div class="box margin-t20 flex">
            <div class="paging-view">
                Hiển thị:
                <select v-model="view" v-on:change="getData()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                <div class="right">
                    <b-pagination v-model="page"
                                  :total-rows="totalRec"
                                  :per-page="view"
                                  v-on:input="getData()"></b-pagination>
                </div>
            </div>
        </div>
    </div>
</section>


@section Scripts {

    <script type="text/x-template" id="autocomplete">
        <div class="autocomplete">
            <input type="text" v-on:input="onChange" v-model="search" v-on:keyup.down="onArrowDown" v-on:keyup.up="onArrowUp" v-on:keyup.enter="onEnter" class="form-control" placeholder="Nhập để tìm kiếm (>2 chữ)" />
            <ul id="autocomplete-results" v-show="isOpen" class="autocomplete-results">
                <li class="loading" v-if="isLoading">
                    Loading results...
                </li>
                <li v-else v-for="(result, i) in results" :key="i" v-on:click="setResult(result)" class="autocomplete-result" :class="{'is-active': i === arrowCounter }">
                    {{ result.FullName }}
                </li>
            </ul>

        </div>
    </script>

    <style>
        #app {
            font-family: "Avenir", Helvetica, Arial, sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            color: #2c3e50;
            margin-top: 60px;
        }

        .autocomplete {
            position: relative;
            width: 100%;
        }

        .autocomplete-results {
            padding: 0;
            margin: 0;
            border: 1px solid #eeeeee;
            max-height: 120px;
            overflow: auto;
            width: 100%;
            position: absolute;
            background: #FFF;
        }

        .autocomplete-result {
            list-style: none;
            text-align: left;
            padding: 4px 10px;
            cursor: pointer;
        }

            .autocomplete-result.is-active,
            .autocomplete-result:hover {
                background-color: #4aae9b;
                color: white;
            }
    </style>

    <script>
        new Vue({
            el: "#main",
            mounted() {
                this.getData()
                //this.getActiveClass()
                this.list_subject = @Html.Raw(Json.Serialize(listSubject));
                this.list_grades_full = @Html.Raw(Json.Serialize(listGrade));
                this.list_skill = @Html.Raw(Json.Serialize(listSkills));
            },
            data: {
                isLoading: false,
                editorOption: {
                    theme: 'snow'
                },
                add_member: {
                    id: "",
                    name: "",
                    email: "",
                    phone: "",
                    role: "",
                    pass: ""
                },
                fields: [
                    {
                        key: 'stt',
                        label: '#'
                    },
                    {
                        key: 'name',
                        label: 'Họ tên'
                    },
                    {
                        key: 'email',
                        label: 'Email'
                    },
                    {
                        key: 'phone',
                        label: 'SĐT'
                    },
                    {
                        key: 'pos',
                        label: 'Chức danh'
                    },
                    {
                        key: 'actions',
                        label: 'Tác vụ'
                    }
                ],
                tableData: [
                ],
                //list_subject: [],
                //list_skill: [],
                list_roles: @Html.Raw(Json.Serialize(roles)),
                //list_grades_full: [],
                //teacherSource: [],
                //courseSource: [],
                //list_active_class: [],
                //week: '',
                view: 30,
                page: 1,
                //search_class_id: '',
                //search_subject_id: '',
                //search_grade_id: '',
                //search_teacher_id: '',
                //search_skill_id: '',
                searchTerm: '',
                totalRec: 0,
                uploadfile: {
                    file: null,
                },
            },
            watch: {
                searchTerm: function () {
                    if (this.searchTimeout != null)
                        clearTimeout(this.searchTimeout)
                    var fn = this.getData
                    this.searchTimeout = setTimeout(function () {
                        fn()
                        fn = null
                    }, 500)
                },
            },
            methods: {
                getData() {
                    let _that = this
                    let _form = new FormData()
                    //_form.append('SubjectID', _that.search_subject_id)
                    //_form.append('ClassID', _that.search_class_id)
                    //_form.append('SkillID', _that.search_skill_id)
                    //_form.append('GradeID', _that.search_grade_id)
                    _form.append('TeacherID', _that.search_teacher_id)
                    _form.append('PageSize', _that.view)
                    _form.append('PageIndex', _that.page)
                    _form.append('SearchText', _that.searchTerm)
                    let _url = '@processUrl("GetList", "TeacherManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.tableData = response.data.Data;
                            this.tableData = _that.tableData
                            this.totalRec = response.data.Model.totalRecord
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = Math.floor(tt / this.view) + (tt % this.view > 0 ? 1 : 0);
                        }).catch(e => { })
                },
                destroy(id) {
                    this.tableData.forEach(function (item, k) {
                        if (item.id == id) {
                            item.id = 0
                        }
                    })
                    let _data = this.tableData.filter(function (a) {
                        return a.id > 0
                    })
                    this.tableData = _data
                },
                toggleState(obj) {
                    this.tableData.forEach(function (item, k) {
                        if (item.id === obj.id) {
                            item.state = !item.state
                        }
                    })
                },
                hideModal() {
                    $('.close').click();
                },
                showAddModal(data) {
                    if (data != null) {
                        this.add_member.id = data.ID
                        this.add_member.email = data.Email
                        this.add_member.name = data.FullName
                        this.add_member.phone = data.Phone
                        this.add_member.role = data.RoleID
                    }
                    else {
                        this.add_member.id = ''
                        this.add_member.email = ''
                        this.add_member.name = ''
                        this.add_member.phone = ''
                        this.add_member.role = ''
                    }

                    this.$bvModal.show('modal_event')
                },
                showUploadModal() {
                    this.$bvModal.show('modal_upload')
                },
                showPassModal(data) {
                    this.add_member.id = data.ID
                    this.add_member.pass = ''
                    this.$bvModal.show('modal_pass')
                },
                createMember() {
                    let _that = this
                    let _form = new FormData()
                    if (_that.add_member.name.trim() == '') {
                        Swal.fire('Chưa nhập tên', '', 'warning');
                        _that.add_member.name = '';
                        return false;
                    }
                    if (_that.add_member.email.trim() == '') {
                        Swal.fire('Chưa nhập email', '', 'warning');
                        _that.add_member.email = '';
                        return false;
                    }
                    if (_that.add_member.role == '') {
                        Swal.fire('Chưa chọn chức danh', '', 'warning');
                        return false;
                    }
                    _form.append('ID', _that.add_member.id)
                    _form.append('FullName', _that.add_member.name)
                    _form.append('Email', _that.add_member.email)
                    _form.append('Phone', _that.add_member.phone)
                    _form.append('RoleID', _that.add_member.role)
                    _that.isLoading = true
                    let _url = '@processUrl("AddMember", "TeacherManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.isLoading = false
                            if (response.data.error != null) {
                                alert(response.data.error);
                                return false;
                            }
                            else {
                                alert(response.data.msg)
                                //this.search_class_id = _that.add_student.class_id
                                //this.search_grade_id = ''
                                //this.search_skill_id = ''
                                //this.search_subject_id = ''
                                this.getData()
                                this.hideModal()
                            }
                        }).catch(e => {
                            _that.isLoading = false
                            console.log(e)
                        })
                },
                uploadMember() {
                    let _that = this
                    let _form = new FormData()
                    if (!_that.uploadfile.file) {
                         alert('Chưa chọn danh sách');
                        return false;
                    }
                    //_form.append('ClassID', _that.add_student.class_id)
                    _form.append('fileUpload', _that.uploadfile.file)
                    _that.isLoading = true
                    let _url = '@processUrl("ImportMember", "TeacherManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.isLoading = false
                            if (response.data.error != null) {
                                alert(response.data.error);
                                return false;
                            }
                            else {
                                alert(response.data.msg)
                                //this.search_class_id = _that.add_student.class_id
                                //this.search_grade_id = ''
                                //this.search_skill_id = ''
                                //this.search_subject_id = ''
                                this.getData()
                                this.hideModal()
                            }
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = Math.floor(tt / this.view) + (tt % this.view > 0 ? 1 : 0);
                        }).catch(e => {
                            _that.isLoading = false
                            console.log(e)
                        })
                },
                changePass() {
                    let _that = this
                    let _form = new FormData()
                    if (_that.add_member.pass.trim() == '') {
                        Swal.fire('Chưa nhập mật khẩu', '', 'warning');
                        _that.add_member.pass = '';
                        return false;
                    }
                    _form.append('ID', _that.add_member.id)
                    _form.append('Password', _that.add_member.pass)
                    _that.isLoading = true
                    let _url = '@processUrl("ChangePass", "TeacherManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.isLoading = false
                            if (response.data.error != null) {
                                alert(response.data.error);
                                return false;
                            }
                            else {
                                alert(response.data.msg)
                                //this.getData()
                                this.hideModal()
                            }
                        }).catch(e => {
                            _that.isLoading = false
                            console.log(e)
                        })
                },
                removeMember(member) {
                    console.log(member);
                    if (!confirm('Xác nhận xóa giáo viên ' + member.FullName + ' khỏi cơ sở?')) {
                        return false;
                    }
                    let _that = this
                    let _form = new FormData()
                    _form.append('ID', member.ID)
                    let _url = '@processUrl("RemoveMember", "TeacherManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            if (response.data.error != null) {
                                alert(response.data.error);
                                return false;
                            }
                            else {
                                alert(response.data.msg)
                                this.getData()
                                this.hideModal()
                            }
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = Math.floor(tt / this.view) + (tt % this.view > 0 ? 1 : 0);
                        }).catch(e => { console.log(e) })
                },
                changeFile() {
                    console.log(event.target.files[0])
                    this.uploadfile.file = event.target.files[0]
                },
                downloadTemplate() {
                    window.open("@processUrl("ExportTemplate", "TeacherManage")");
                }
            }
        });

    </script>
}

@section Modals{
    <b-modal :no-close-on-backdrop="true" id="modal_event" centered title="Thêm giáo viên">
        <b-col class="form-group">
            <label for="">Họ tên</label>
            <input class="form-control" v-model="add_member.name" />
        </b-col>
        <b-col class="form-group">
            <label for="">Email</label>
            <input class="form-control" v-model="add_member.email" v-if="add_member.id == ''" />
            <input class="form-control" v-model="add_member.email" disabled="disabled" v-else />
        </b-col>
        <b-col class="form-group">
            <label for="">Điện thoại</label>
            <input class="form-control" v-model="add_member.phone" />
        </b-col>
        <b-col class="form-group">
            <label for="">Chọn chức danh</label>
            <select v-model="add_member.role" class="form-control">
                <option value="">Chọn chức danh</option>
                <option v-for="(item,k) in list_roles" :value="item.ID">{{item.Name}}</option>
            </select>
        </b-col>

        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="createMember()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Đóng</b-button>
            </template>
        </template>

    </b-modal>

    <!-- Modal choose file -->
    <b-modal :no-close-on-backdrop="true" id="modal_upload" centered title="Thêm danh sách từ file">
        <b-col class="form-group">
            <label for="">Chọn danh sách giáo viên (excel)</label>
            <input type="file" class="btn btn-info" :ref="`uploadfile`" accept=".xls,.xlsx" v-on:change="changeFile()" /><br />
        </b-col>
        <template v-slot:modal-footer="{ ok, cancel}">
            <button v-on:click="downloadTemplate()" class="btn btn-secondary">Tải file mẫu</button>
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="uploadMember()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>

    <!-- Modal change pass -->
    <b-modal :no-close-on-backdrop="true" id="modal_pass" centered title="Đổi mật khẩu">

        <b-col class="form-group">
            <label for="">Nhập mật khẩu mới</label>
            <input class="form-control" v-model="add_member.pass" type="password" autocomplete="off" />
        </b-col>
        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="changePass()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>
}
