@{

    Layout = "~/Views/Shared/_LayoutTeacher_NewUI.cshtml";
    var model = ViewBag.Model as BaseCustomerMVC.Models.DefaultModel;
    ViewData["Title"] = "My Courses - " + DateTime.Now.ToString("D");
    var subjects = ViewBag.Subjects as List<BaseCustomerEntity.Database.SubjectEntity>;
    var grades = ViewBag.Grades as List<BaseCustomerEntity.Database.GradeEntity>;
    var skills = ViewBag.Skills as List<BaseCustomerEntity.Database.SkillEntity>;
}
<script src="~/js/daterangepicker.min.js"></script>
<link href="~/css/daterangepicker.css" rel="stylesheet" />
<script src="/libs/vuejs-datepicker.min.js"></script>
<script>
    setActiveMenu("course");
</script>


<section class="module" id="dashboard_content">
    <div class="card-header">
        <div class="flex border-b padding-b25 justify-content-between">
            <div class="flex">
                <div class="box filter-box">
                    <input type="text" value="01/08/2019 - 30/09/2019" name="dates">
                    <span class="ic ic-picker"></span>
                </div>
                <div class="box filter-box w-152">
                    <select v-model="subject">
                        <option value="">Chọn chương trình</option>
                        <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                    </select>
                </div>
                <div class="search-box">
                    <button><i class="ic ic-find"></i></button>
                    <input type="text" name="" placeholder="Search">
                </div>
            </div>
            <b-button class="btn-addevent" v-on:click="showClassModal()"><i class="ti-plus"></i> Thêm lớp</b-button>
        </div>
    </div>
    <div class="card-body">
        <table id="ed_table" class="table">
            <thead>
                <tr>
                    <th v-for="(field,k) in fields">{{field.label}}</th>
                </tr>
            </thead>
            <tbody>
                <tr v-if="tableData == null || tableData.length <= 0">
                    <td colspan="6">Không có thông tin phù hợp</a></td>
                </tr>
                <tr v-else v-for="(item,k) in tableData">
                    <td>{{(page - 1) * view + (k+1)}}</td>
                    <td><a :href="'@Url.Action("Detail","Class")/' + item.ID" :title="item.Name">{{item.Name}}</a></td>
                    <td>{{item.SkillName}}</td>
                    <td>{{item.Students}}</td>
                    <td><span>{{formatShortDate(item.StartDate)}}</span><span>{{formatShortDate(item.EndDate)}}</span></td>
                    <td><b-form-checkbox switch v-model="item.IsActive" v-on:change="toggleState(item)"></b-form-checkbox></td>
                    <td>
                        <div class="d-flex btn-group">
                            <a class="btn-act btn-edit" href="javascript:;" v-on:click="showClassModal(item)"><i class="ti-pencil-alt"></i></a>
                            <button class="btn-act btn-trash" v-on:click="removeClass(item)"><i class="ti-trash"></i></button>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="box margin-t20 flex">
            <div class="paging-view">
                Hiển thị:
                <select v-model="view" v-on:change="getData()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                <div class="inner">
                    <button v-on:click="goPage(0)"><i class="ti-angle-left"></i></button>
                    <button v-on:click="goPage(page - 1)"><i class="ti-angle-double-left"></i></button>
                    <input type="text" v-model="page" v-on:change="getData()" />
                    <button v-on:click="goPage(page + 1)"><i class="ti-angle-double-right"></i></button>
                    <button v-on:click="goPage(max_page)"><i class="ti-angle-right"></i></button>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts{
    <script>

        new Vue({
            el: "#main",
            mounted() {
                var start = moment();
                var end = moment().add(29, 'days');
                $('input[name="dates"]').daterangepicker({
                    startDate: start,
                    endDate: end,
                    locale: {
                        format: "DD/MM/YYYY",
                    }
                }, function (s, e, label) {
                    RepDate(s, e);
                    GetData();
                });
                this.list_subject = @Html.Raw(Json.Serialize(subjects));
                this.list_grades_full = @Html.Raw(Json.Serialize(grades));
                this.list_skill = @Html.Raw(Json.Serialize(skills));
                window.ChooseCalendar = this.chooseCalendar
                window.changeAddSubject = this.changeAddSubject
                window.GetData = this.getData
                window.RepDate = this.repDate
                $('input[name=dates]').siblings('.ic-picker').click(function () { ChooseCalendar() });
                this.getData()

            },
            components: {
          	    vuejsDatepicker
            },
            data: {
                isLoading: false,
                list_subject: [],
                tableData: [
                ],
                fields: [
                    {
                        key: 'stt',
                        label: '#'
                    },
                    {
                        key: 'class_name',
                        label: 'Tên lớp'
                    },
                    {
                        key: 'skills',
                        label: 'Môn học'
                    },
                    {
                        key: 'students',
                        label: 'Học viên'
                    },
                    {
                        key: 'date',
                        label: 'Thời gian'
                    },
                    {
                        key: 'status',
                        label: 'Trạng thái'
                    },
                    {
                        key: 'actions',
                        label: 'Tác vụ'
                    }
                ],
                subject: '',
                list_subject: [],
                list_grades_full: [],
                list_skill: [],
                teacherSource: [],
                courseSource: [],
                loaded_teacher: [],
                loaded_course: [],
                view: 10,
                page: 1,
                startdate: moment(),
                enddate: moment().add(29, 'days'),
                class_info: {
                    ID: '',
                    Name: '',
                    StartDate: '',
                    EndDate: '',
                    Description: '',
                    thumbnail: {
                        src: '',
                        file: null,
                        height: 90,
                        width: 160
                    },
                    subject: [
                        {
                            ID: '',
                            SubjectID: '',
                            GradeID: '',
                            SkillID: '',
                            TeacherID: '',
                            CourseID: ''
                        }
                    ]
                },
                curr: 0
            },
            computed: {
                sDate: {
                    get() {
                        return moment(this.startdate).format("MM/DD/YYYY");
                    },
                    set(value) {
                        this.startdate = value;
                    }
                },
                eDate: {
                    get() {
                        return moment(this.enddate).format("MM/DD/YYYY");
                    },
                    set(value) {
                        this.enddate = value;
                    }
                }
            },
            watch: {
                subject: function () {
                    this.getData()
                }
            },
            methods: {
                getData() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('SubjectID', _that.subject)
                    _form.append('PageSize', _that.view)
                    _form.append('PageIndex', _that.page)
                    _form.append('StartDate', _that.sDate)
                    _form.append('EndDate', _that.eDate)
                    let _url = '@Url.Action("GetManageList", "Class")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.tableData = response.data.Data;
                            var tt = response.data.Model.totalRecord;
                            this.max_page = tt / this.view + (tt % this.view > 0 ? 1 : 0);
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },

                //Class Action
                toggleState(obj) {
                    let _that = this;
                    _that.tableData.forEach(function (item, k) {
                        if (item.ID === obj.ID) {
                            let _url = item.IsActive ? '@Url.Action("Unpublish", "Class")' : '@Url.Action("Publish", "Class")'
                            let _form = new FormData()
                            _form.append('ArrID', item.ID);
                            axios.post(_url, _form)
                                .then(response => {
                                    console.log('update ok');
                                    //item.IsActive = !item.IsActive;
                                    //_that.list_data[k].IsActive = !_that.list_data[k].IsActive;
                                }).catch(e => { })
                        }
                    })
                },
                createClass() {

                    let _that = this

                    if (_that.class_info.Name == '' || _that.class_info.Name == null) {
                        alert("Vui lòng nhập tên lớp");
                        _that.$refs["addName"].focus();
                        return false;
                    }

                    if (_that.class_info.StartDate == '' || _that.class_info.StartDate == null) {
                        alert("Vui lòng nhập ngày mở lớp");
                        _that.$refs["addStartDate"].showCalendar();//.focus();
                        return false;
                    }
                    var _startdate = '';
                    try {
                        _startdate = moment(_that.class_info.StartDate).format("MM/DD/YYYY")
                    }
                    catch(e){
                        alert("Vui lòng nhập ngày mở lớp");
                        _that.$refs["addStartDate"].showCalendar();//.focus();
                        return false;
                    }

                    if (_that.class_info.EndDate == '' || _that.class_info.EndDate == null) {
                        alert("Vui lòng nhập ngày kết thúc lớp");
                        this.$refs["addEndDate"].showCalendar();
                        return false;
                    }

                    var _enddate = '';
                    try {
                        _enddate = moment(_that.class_info.EndDate).format("MM/DD/YYYY")
                    }
                    catch(e){
                        alert("Vui lòng nhập ngày kết thúc lớp");
                        _that.$refs["addStartDate"].showCalendar();//.focus();
                        return false;
                    }

                    let _form = new FormData()
                    if(_that.class_info.ID != null)
                        _form.append('ID', _that.class_info.ID)
                    _form.append('Name', _that.class_info.Name)
                    _form.append('StartDate', _startdate)
                    _form.append('EndDate', _enddate)

                    if(_that.class_info.Description != null)
                        _form.append('Description', _that.class_info.Description)
                    if (_that.class_info.thumbnail)
                        if (_that.class_info.thumbnail.file) {
                            _form.append('fileUpload', this.class_info.thumbnail.file)
                        }

                    var valid = true
                    var notify = false
                    if (_that.class_info.subject != null) {
                        _that.class_info.subject.forEach(function (item, k) {
                            if (item.Skill == '' || item.SubjectID == '' || item.GradeID == '' || item.CourseID == '' || item.TeacherID == '') {
                                alert("Vui lòng nhập đầy đủ thông tin cho môn học " + (k + 1));
                                valid = false
                                return false;
                            }
                            if (item.ID != null && item.ID != '')
                                notify = true
                            _form.append('ClassSubjects[' + k + '].ID', item.ID)
                            _form.append('ClassSubjects[' + k + '].SubjectID', item.SubjectID)
                            _form.append('ClassSubjects[' + k + '].GradeID', item.GradeID)
                            _form.append('ClassSubjects[' + k + '].CourseID', item.CourseID)
                            _form.append('ClassSubjects[' + k + '].TeacherID', item.TeacherID)
                        })
                    }

                    if (!valid) return false

                    if (notify) {
                        if (!confirm("Lưu ý: thay đổi thông tin môn học sẽ khởi tạo lại toàn bộ thông tin liên quan đến học tập của môn học. Tiếp tục?"))
                            return false;
                    }
                     _that.isLoading = true
                    let _url = '@Url.Action("Create","Class")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.isLoading = false;
                            console.log(response.data);
                            if (response.data.Error != null)
                                alert(response.data.Error)
                            else {
                                this.getData();
                                _that.$bvModal.hide('modal_class');
                            }
                        }).catch(e => {
                            _that.isLoading = false
                            console.log("Error: " + e)
                        })
                },
                removeClass(obj) {
                    if (confirm("Confirm delete \"" + obj.Name + '"')) {
                        let _that = this
                        let _form = new FormData()
                        _form.append('ArrID', obj.ID)
                        let _url = '@Url.Action("Remove","Class")'
                        axios.post(_url, _form)
                            .then(response => {
                                console.log(response.data);
                                if (response.data.Error != null)
                                    alert(response.data.Error)
                                else {
                                    this.getData();
                                    _that.$bvModal.hide('modal_class');
                                }
                            }).catch(e => {
                                alert("Error: " + e)
                            })
                    }
                },
                //Modal Event
                showClassModal(obj) {
                    let _that = this;
                    if (obj == null) {
                        _that.class_info =
                        {
                            thumbnail: {
                                src: '',
                                file: null,
                                height: 90,
                                width: 160
                            },
                            subject: [
                                {
                                    ID: '',
                                    SkillID: '',
                                    SubjectID: '',
                                    GradeID: '',
                                    TeacherID: '',
                                    CourseID: ''
                                }
                            ]
                        }
                    }
                    else {
                        _that.class_info.ID = obj.ID;
                        _that.class_info.Description = obj.Description;
                        _that.class_info.Name = obj.Name;
                        _that.class_info.thumbnail = {
                            src: obj.Image,
                            file: null,
                            height: 90,
                            width: 160
                        }
                        _that.class_info.StartDate = obj.StartDate;
                        _that.class_info.EndDate = obj.EndDate;
                        _that.class_info.subject = [];

                        let _form = new FormData()
                        _form.append('ClassID', obj.ID)
                        let _url = '@Url.Action("GetClassSubjects", "ClassSubject")'
                        axios.post(_url, _form)
                            .then(response => {
                                var _data = response.data.Data;
                                _data.forEach(function (item, k) {
                                    var lock = false
                                    var valid_subject = _that.list_subject.filter(c => c.ID == item.SubjectID);
                                    if (valid_subject.length == 0) {
                                        console.log(_that.list_subject)
                                        _that.list_subject.push({
                                            ID: item.SubjectID,
                                            Name: item.SubjectName,
                                            IsActive: false
                                        });

                                        if (_that.list_grades_full.filter(c => c.ID == item.GradeID).length == 0) {
                                            _that.list_grades_full.push({
                                                ID: item.GradeID,
                                                SubjectID: item.SubjectID,
                                                Name: item.GradeName,
                                                IsActive: false
                                            })
                                        }
                                        lock = true
                                    }
                                    else {
                                        lock = !valid_subject[0].IsActive
                                    }

                                    _that.class_info.subject.push({
                                        UID: moment().format("DDMMYYYYhhmmssSSS") + k,
                                        ID: item.ID,
                                        SkillID: item.SkillID,
                                        SubjectID: item.SubjectID,
                                        GradeID: item.GradeID,
                                        TeacherID: item.TeacherID,
                                        CourseID: item.CourseID,
                                        IsLock: lock
                                    })

                                    _that.changeAddSubject(item)
                                    _that.changeAddGrade(item)


                                    //if (_that.teacherSource.filter(c => c.ID == item.TeacherID && c.SubjectID == item.subject).length == 0) {
                                    //    _that.teacherSource.push({
                                    //        ID: item.TeacherID,
                                    //        SubjectID: item.SubjectID,
                                    //        Name: item.TeacherName,
                                    //        IsActive: false
                                    //    })
                                    //}

                                    if (_that.courseSource.filter(c => c.ID == item.CourseID).length == 0) {
                                        _that.courseSource.push({
                                            ID: item.CourseID,
                                            SkillID: item.SkillID,
                                            Name: item.CourseName,
                                            SubjectID: item.SubjectID,
                                            GradeID: item.GradeID,
                                            IsActive: false
                                        })
                                    }
                                })
                                //_that.$forceUpdate()
                            }).catch(e => { })
                    }
                    _that.$bvModal.show('modal_class')
                },
                hideModal() {
                    $('.close').click();
                },
                getEditTitle() {
                    if (this.class_info.ID == '')
                        return 'Thêm lớp học';
                    else return 'Cập nhật thông tin';
                },
                changeAddSubject(obj) {
                    let _that = this;
                    if (_that.list_grades_full.filter(function (item) {
                        return obj.GradeID == item.ID && obj.SubjectID == item.SubjectID
                    }).length == 0) {
                        _that.class_info.subject.forEach(function (sbj) {
                            //console.log(obj.UID)
                            if (sbj.UID == obj.UID) {
                                sbj.GradeID = ''
                                sbj.CourseID = ''
                                sbj.TeacherID = ''
                                sbj.SkillID = ''
                                return
                            }
                        });
                    }

                    //load teacher
                    if (obj.SubjectID != '') {
                        //console.log(_that.loaded_teacher);
                        if (_that.loaded_teacher.includes(obj.SubjectID)) return;
                        //_that.loaded_teacher.push(obj.SubjectID);
                        let _form = new FormData()
                        _form.append('SubjectID', obj.SubjectID)
                        let _url = '@Url.Action("GetListTeacher", "Class")'
                        axios.post(_url, _form)
                            .then(response => {
                            var _data = response.data.Data;
                            _data.forEach(function (item, k)
                            {
                                if (_that.teacherSource.filter(function (tc) {
                                    return tc.ID == item.id && tc.SubjectID == obj.SubjectID
                                }).length == 0)
                                _that.teacherSource.push({
                                    ID: item.id,
                                    FullName: item.fullname,
                                    SubjectID: obj.SubjectID,
                                    IsActive: true
                                })
                            })
                                console.log(_that.teacherSource)
                            _that.loaded_teacher.push(obj.SubjectID);
                        }).catch(e => { })
                    }
                },
                changeAddGrade(obj) {
                    let _that = this;
                    if (obj.GradeID == '') return;
                    let key = obj.SubjectID + "_" + obj.GradeID
                    if (_that.loaded_course.includes(key)) return;
                    //load course
                    let _form = new FormData()
                    _form.append('SubjectID', obj.SubjectID)
                    _form.append('GradeID', obj.GradeID)
                    let _url = '@Url.Action("GetActiveList", "Curriculum")'
                    axios.post(_url, _form)
                        .then(response => {
                            var _data = response.data.Data;
                            _data.forEach(function (item, k)
                            {
                                if (_that.courseSource.filter(function (item) {
                                    return obj.CourseID == item.ID && obj.SubjectID == item.SubjectID && obj.GradeID == item.GradeID
                                }).length == 0)
                                _that.courseSource.push({
                                    ID: item.ID,
                                    Name: item.Name,
                                    SubjectID: obj.SubjectID,
                                    GradeID: obj.GradeID,
                                    SkillID: item.SkillID,
                                    IsActive: true
                                })
                            })
                            _that.loaded_course.push(key);
                        }).catch(e => { })
                },
                changeAddSkill(obj) {
                   obj.CourseID = ''
                },
                addSubject() {
                    let length = this.class_info.subject.length;
                    this.curr = length
                    let _subject = {
                        UID: moment().format("DDMMYYYYhhmmssSSS"),
                        ID: '',
                        SkillID: '',
                        SubjectID: '',
                        GradeID: '',
                        TeacherID: '',
                        CourseID: ''
                    }
                    this.class_info.subject.push(_subject)
                    this.$forceUpdate();
                },
                removeSubject(k) {
                    this.class_info.subject.splice(k, 1);
                },
                errorImgUrl() {
                    this.class_info.thumbnail.src = null;
                    this.class_info.thumbnail.file = null;
                    this.$forceUpdate();
                },
                previewThumb() {
                    let _that = this
                    if (event.target.files[0]['type'] === 'image/jpeg' ||
                        event.target.files[0]['type'] === 'image/png' ||
                        event.target.files[0]['type'] === 'image/gif') {
                    } else {
                        return
                    }
                    _that.class_info.thumbnail.src = URL.createObjectURL(event.target.files[0])
                    _that.class_info.thumbnail.file = event.target.files[0]
                    var src = URL.createObjectURL(event.target.files[0])
                    setTimeout(function () {
                        var imgTesting = new Image();
                        imgTesting.src = src;
                        setTimeout(function () {
                            _that.class_info.thumbnail.height = 90
                            _that.class_info.thumbnail.width = 160
                        }, 1000);
                    }, 1000);
                },

                //nav
                goPage(pgIdx) {
                    if (pgIdx < 1) pgIdx = 1;
                    if (pgIdx > this.max_page)
                        pgIdx = this.max_page;
                    this.page = pgIdx;
                    this.getData();
                },

                //support
                formatShortDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD/MM/YYYY")
                },
                repDate(svalue, evalue) {
                    this.eDate = evalue;
                    this.sDate = svalue;
                },
                matchSubject(obj, item) {
                    return item.IsActive || item.ID == obj.SubjectID
                },
                matchGrade(obj, item) {
                    return item.SubjectID == obj.SubjectID && (item.IsActive || item.ID == obj.GradeID)
                },
                matchTeacher(obj, item) {
                    return (item.SubjectID == obj.SubjectID)
                        && (item.IsActive || item.ID == obj.TeacherID)
                },
                matchCourse(obj, item) {
                    return item.SubjectID == obj.SubjectID && item.GradeID == obj.GradeID && item.SkillID == obj.SkillID && (item.IsActive || (item.ID == obj.CourseID))
                }
            }
        });

    </script>
}
@section Modals{
    <b-modal :no-close-on-backdrop="true" id="modal_class" centered v-bind:title="getEditTitle()">
        <div class="row">
            <div class="col-md-5">
                <b-col class="form-group">
                    <label class="label">Tên lớp học*</label>
                    <input type="text" v-model="class_info.Name" class="form-control" ref="addName">
                </b-col>
                <div class="d-flex">
                    <b-col class="form-group">
                        <label class="label">Ngày bắt đầu*</label>
                        <vuejs-datepicker v-model="class_info.StartDate" format="dd/MM/yyyy" class="form-control" ref="addStartDate"></vuejs-datepicker>
                    </b-col>
                    <b-col class="form-group">
                        <label class="label">Ngày kết thúc*</label>
                        <vuejs-datepicker v-model="class_info.EndDate" format="dd/MM/yyyy" class="form-control" ref="addEndDate"></vuejs-datepicker>
                    </b-col>
                </div>
                <b-col class="form-group">
                    <label class="label">Mô tả</label>
                    <textarea v-model="class_info.Description" rows="2" class="form-control" ref="addDescription"></textarea>
                </b-col>
                <b-col class="form-group">
                    <label class="label">Chọn ảnh lớp học</label>
                    <div id="thumb_class" v-if="class_info.thumbnail.src">
                        <img v-on:error="errorImgUrl()" :src="class_info.thumbnail.src" alt="" />
                    </div>
                    <label for="class_thumbnail" class="label frm-upload" v-else>
                        <i class="ic ic-paper-clip"></i>Tải ảnh lên
                        <input type="file" id="class_thumbnail" :ref="`thumbnail`" v-on:change="previewThumb()">
                    </label>
                </b-col>
            </div>
            <div class="col-md-7">
                <ul class="list list-subject">
                    <li v-for="(sub,k) in class_info.subject" class="flex" :id="sub.UID">
                        <div class="width-100">
                            <label for="">Chương trình</label>
                            <select v-model="sub.SubjectID" class="form-control" v-on:change="changeAddSubject(sub)" :disabled="sub.IsLock">
                                <option value="">Chọn chương trình</option>
                                <option v-for="(item,k) in list_subject" :value="item.ID" v-if="matchSubject(sub, item)">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100">
                            <label for="">Cấp độ</label>
                            <select v-model="sub.GradeID" class="form-control" v-on:change="changeAddGrade(sub)" :disabled="sub.IsLock">
                                <option value="">Chọn cấp độ</option>
                                <option v-for="(item,k) in list_grades_full" v-if="matchGrade(sub, item)" :value="item.ID">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100">
                            <label for="">Môn học</label>
                            <select v-model="sub.SkillID" class="form-control" v-on:change="changeAddSkill(sub)" :disabled="sub.IsLock">
                                <option value="">Chọn môn học</option>
                                <option v-for="(item,k) in list_skill" :value="item.ID">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100">
                            <label for="">Bài giảng</label>
                            <select v-model="sub.CourseID" class="form-control" :disabled="sub.IsLock">
                                <option value="">Chọn bài giảng</option>
                                <option v-for="(item,k) in courseSource" v-if="matchCourse(sub,item)" :value="item.ID">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100">
                            <label for="">Giáo viên</label>
                            <select v-model="sub.TeacherID" class="form-control" :disabled="sub.IsLock">
                                <option value="">Chọn giáo viên</option>
                                <option v-for="(item,k) in teacherSource" v-if="matchTeacher(sub, item)" :value="item.ID">{{item.FullName}}</option>
                            </select>
                        </div>
                        <div class="btn-group">
                            <button class="btn-act" v-on:click="removeSubject(k)" :disabled="sub.IsLock"><i class="ti-trash"></i></button>
                        </div>
                    </li>
                </ul>
                <a href="javascript:;" title="Thêm môn học" v-on:click="addSubject()" class="btn-add-sub"><i class="ic ic-plus-c"></i> Thêm môn học</a>
            </div>
        </div>

        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="createClass()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>

        </template>
    </b-modal>
}
