@{

    Layout = "~/Views/Shared/_LayoutTeacher_NewUI.cshtml";
    var model = ViewBag.Model as BaseCustomerMVC.Models.DefaultModel;
    ViewData["Title"] = "Quản lý lớp học";
    var subjects = ViewBag.Subjects as List<BaseCustomerEntity.Database.SubjectEntity>;
    var grades = ViewBag.Grades as List<BaseCustomerEntity.Database.GradeEntity>;
    var skills = ViewBag.Skills as List<BaseCustomerEntity.Database.SkillEntity>;
    var isHeadteacher = ViewBag.IsHeadTeacher ?? false;
    var userid = User.Claims.Single(t => t.Type == "UserID").Value;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    //List<BaseCustomerEntity.Database.CenterMemberEntity> allcenters = ViewBag.AllCenters as List<BaseCustomerEntity.Database.CenterMemberEntity>;

    string processUrl(string act, string ctrl, Object param = null)
    {
        string url = Url.Action(act, ctrl, param);

        return $"/{center}{url}";
    }
}
<script src="~/js/daterangepicker.min.js"></script>
<link href="~/css/daterangepicker.css" rel="stylesheet" />
<script src="/libs/vuejs-datepicker.min.js"></script>
<script>
    setActiveMenu("course");
</script>

<section class="module" id="dashboard_content">
    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-header border-b" v-cloak>
        <div class="flex flex-row flex-wrap pb-2 align-items-center">
            <div class="box filter-box d-none m-1">
                <input type="text" value="-- Chọn thời gian --" name="dates" v-on:click="initDate()">
                <span class="ic ic-picker inactive"></span>
            </div>
            <div class="box filter-box col-12 col-md-3 ml-0 mb-1">
                <select v-model="subject">
                    <option value="">Chọn chương trình</option>
                    <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                </select>
            </div>
            <div class="search-box col-12 col-md-3 mb-1 ml-0 ml-md-2">
                <button><i class="ic ic-find"></i></button>
                <input type="text" name="" v-model="searchTerm" placeholder="Tên lớp cần tìm">
            </div>
            @if (isHeadteacher)
            {
                <div class="box private_box col-12 col-md-3 mb-1 ml-0 ml-md-2">
                    <input type="checkbox" v-model="isPrivate" /><span> Chỉ hiện lớp của tôi</span>
                </div>
            }
            <b-button class="btn-addevent btn-sm col-12 col-md-2 ml-auto" v-on:click="showClassModal()"><i class="ti-plus"></i> Thêm lớp</b-button>
        </div>
    </div>
    <div class="card-body" v-cloak>
        <table id="ed_table" class="table">
            <thead>
                <tr>
                    <th v-for="(field,k) in fields">{{field.label}}</th>
                </tr>
            </thead>
            <tbody>
                <tr v-if="tableData == null || tableData.length <= 0">
                    <template v-if="isLoading">
                        <td colspan="8">Đang gửi dữ liệu...</td>
                    </template>
                    <template v-else>
                        <td colspan="8">Không có thông tin phù hợp</td>
                    </template>
                </tr>
                <tr v-else v-for="(item,k) in tableData">
                    <td>{{(page - 1) * view + (k+1)}}</td>
                    <td><a :href="'@processUrl("Detail", "Class")/' + item.ID" :title="item.Name">{{item.Name}}</a></td>
                    <td>{{item.SkillName}}</td>
                    <td>{{item.CreatorName}}</td>
                    <td>{{item.Students}}</td>
                    <td><span>{{formatShortDate(item.StartDate)}}</span><span>{{formatShortDate(item.EndDate)}}</span></td>
                    @*<td> {{ item.IsActive? 'Hoạt động' : 'Tạm dừng'}} </td>*@
                    <td>
                        <b-form-checkbox switch v-model="item.IsActive" v-on:change="toggleState(item)" class="mt-2" @if (!isHeadteacher) { @: v-if="item.Creator == '@userid'"
                                         }>
                        </b-form-checkbox>
                    </td>
                    <td>
                        <div class="d-flex btn-group" @if (!isHeadteacher) { @: v-if="item.Creator == '@userid'"
                             }>
                            @*<b-form-checkbox switch v-model="item.IsActive" v-on:change="toggleState(item)" class="mt-2"></b-form-checkbox>*@

                            <a class="btn-act btn-edit" title="Cập nhật" href="javascript:;" v-on:click="showClassModal(item)"><i class="ti-pencil-alt"></i></a>

                            <a href="javascript:;" title="Quản lý học viên" v-on:click="manageStudent(item)" class="btn-act btn-edit"><i class="ti-user"></i></a>
                            <a class="btn-act btn-edit" title="Nhân bản" href="javascript:;" v-on:click="showCloneModal(item)"><i class="ti-layers"></i></a>
                            <button class="btn-act btn-trash" title="Xóa" v-on:click="removeClass(item)"><i class="ti-trash"></i></button>
                        </div>
                        <div class="d-flex btn-group" v-if="isHeadteacher=='False' && item.Creator != '@userid'">
                            <a class="btn-act btn-edit" title="Cập nhật" href="javascript:;" v-on:click="showClassModal(item)"><i class="ti-pencil-alt"></i></a>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="box margin-t20 flex">
            <div class="paging-view">
                Hiển thị:
                <select v-model="view" v-on:change="getData()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                @*<div class="inner">
                        <button v-on:click="goPage(0)"><i class="ti-angle-left"></i></button>
                        <button v-on:click="goPage(page - 1)"><i class="ti-angle-double-left"></i></button>
                        <input type="text" v-model="page" v-on:change="getData()" />
                        <button v-on:click="goPage(page + 1)"><i class="ti-angle-double-right"></i></button>
                        <button v-on:click="goPage(max_page)"><i class="ti-angle-right"></i></button>
                    </div>*@
                <div class="right">
                    <b-pagination v-model="page"
                                  :total-rows="totalRec"
                                  :per-page="view"
                                  v-on:input="getData()"></b-pagination>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts{
    <script type="text/x-template" id="autocomplete">
        <div class="autocomplete">
            <input type="text" v-on:input="onChange" v-model="search" v-on:keyup.down="onArrowDown" v-on:keyup.up="onArrowUp" v-on:keyup.enter="onEnter" class="form-control" :placeholder="plhd" />
            <ul id="autocomplete-results" v-show="isOpen" class="autocomplete-results">
                <li class="loading" v-if="isLoading">
                    Đang gửi dữ liệu ...
                </li>
                <li v-else v-for="(result, i) in results" :key="i" v-on:click="setResult(result)" class="autocomplete-result" :class="{'is-active': i === arrowCounter }">
                    {{ result.Name }}
                </li>
            </ul>

        </div>
    </script>

    <style>
        .autocomplete {
            position: relative;
            width: 100%;
        }

        .autocomplete-results {
            padding: 0;
            margin: 0;
            border: 1px solid #eeeeee;
            max-height: 120px;
            overflow: auto;
            width: 100%;
            position: absolute;
            min-width: 200px;
            background: #FFF;
        }

        .autocomplete-result {
            list-style: none;
            text-align: left;
            padding: 4px 10px;
            cursor: pointer;
        }

            .autocomplete-result.is-active,
            .autocomplete-result:hover {
                background-color: #4aae9b;
                color: white;
            }
    </style>

    <script>
        Vue.component("autocomplete",
            {
                template: "#autocomplete",
                props: {
                    items: {
                        type: Array,
                        required: false,
                        default: () => []
                    },
                    url: {
                        type: String,
                        required: false,
                        default: () => ''
                    },
                    plhd: {
                        type: String,
                        required: false,
                        default: () => 'Nhập để tìm kiếm (>2 chữ)'
                    }
                },
                data() {
                    return {
                        isOpen: false,
                        results: [],
                        search: "",
                        isLoading: false,
                        arrowCounter: 0,
                        loadedTerms: [],
                    };
                },
                methods: {
                    onChange() {
                        // Let's warn the parent that a change was made
                        this.$emit("input", this.search, this.filterResults);
                        if (this.search.length < 2) {
                            this.isOpen = false
                        }
                        else {
                            this.isOpen = true
                        }
                    },
                    searchResult() {
                        this.filterResults();
                        this.isOpen = true;
                        this.$forceUpdate();
                    },
                    filterResults() {
                        this.results = this.items
                        this.isOpen = true
                    },
                    setResult(result) {
                        this.search = result.Name;
                        this.isOpen = false;
                        this.arrowCounter = -1;
                        this.$emit("chooseitem", result);
                    },
                    onArrowDown(evt) {
                        if (this.arrowCounter < this.results.length) {
                            this.arrowCounter = this.arrowCounter + 1;
                        }
                    },
                    onArrowUp() {
                        if (this.arrowCounter > 0) {
                            this.arrowCounter = this.arrowCounter - 1;
                        }
                    },
                    onEnter() {
                        if (this.arrowCounter < 0 || this.arrowCounter > this.results.length)
                            return false;
                        this.setResult(this.results[this.arrowCounter])
                        //this.search = this.results[this.arrowCounter].FullName;
                        //this.isOpen = false;
                        //this.arrowCounter = -1;
                        //this.$emit("chooseStudent", result);
                    },
                    handleClickOutside(evt) {
                        if (!this.$el.contains(evt.target)) {
                            this.isOpen = false;
                            this.arrowCounter = -1;
                        }
                    }
                },
                watch: {
                    items: function (val, oldValue) {
                        // actually compare them
                        if (val.length !== oldValue.length) {
                            this.results = val;
                            this.isLoading = false;
                        }
                    }
                },
                mounted() {
                    document.addEventListener("click", this.handleClickOutside);
                },
                destroyed() {
                    document.removeEventListener("click", this.handleClickOutside);
                }
            }
        )
    </script>
    <style>
        .private_box {
            padding: 5px 0;
            width: 200px;
        }

            .private_box input {
                width: 20px;
                height: 20px;
                vertical-align: middle;
            }

            .private_box span {
                vertical-align: middle;
            }


        .ic-picker {
            cursor: pointer;
        }

            .ic-picker.inactive {
                background-image: url('../images/pickerdate-1.png');
            }

        #modal_class .modal-dialog,
        #modal_student .modal-dialog {
            max-width: 1100px;
        }

        #modal_class .vdp-datepicker input {
            width: 100%;
        }

        .thumb {
            position: relative;
        }

            .thumb img {
                position: absolute;
                top: 50%;
                margin-top: -50%;
                max-height: none !important;
                height: auto !important;
            }

        .frm-upload {
            border: none;
            height: auto;
        }
    </style>
    <script>
        var isSearchDate = false;
        new Vue({
            el: "#main_content",
            mounted() {
                this.view = 30
                this.list_subject = @Html.Raw(Json.Serialize(subjects));
                this.list_grades_full = @Html.Raw(Json.Serialize(grades));
                this.list_skill = @Html.Raw(Json.Serialize(skills));
                window.changeAddSubject = this.changeAddSubject
                window.InitDate = this.initDate
                window.DestroyDate = this.destroyDate
                window.GetData = this.getData
                window.RepDate = this.repDate
                $('input[name=dates]').siblings('.ic-picker').click(function () {
                    if (isSearchDate) {
                        DestroyDate(this)
                    }
                    else {
                        InitDate();
                    }
                });
                this.getData()
            },
            components: {
                vuejsDatepicker
            },
            data: {
                isPrivate: false,
                isLoading: false,
                list_subject: [],
                tableData: [],
                ac_student: [],
                fields: [
                    {
                        key: 'stt',
                        label: '#'
                    },
                    {
                        key: 'class_name',
                        label: 'Tên lớp'
                    },
                    {
                        key: 'skills',
                        label: 'Môn học'
                    },
                    {
                        key: 'creator_name',
                        label: 'Giáo viên tạo'
                    },
                    {
                        key: 'students',
                        label: 'Học viên'
                    },
                    {
                        key: 'date',
                        label: 'Thời gian'
                    },
                    {
                        key: 'status',
                        label: 'Trạng thái'
                    },
                    {
                        key: 'actions',
                        label: 'Tác vụ'
                    }
                ],
                students_fields: [
                    {
                        key: 'stt',
                        label: '#'
                    },
                    {
                        key: 'name',
                        label: 'Họ tên'
                    },
                    {
                        key: 'email',
                        label: 'Email'
                    },
                    {
                        key: 'phone',
                        label: 'SĐT'
                    },
                    {
                        key: 'actions',
                        label: 'Tác vụ'
                    }
                ],
                subject: '',
                list_subject: [],
                list_grades_full: [],
                list_skill: [],
                teacherSource: [],
                courseSource: [],
                loaded_teacher: [],
                loaded_course: [],
                view: 20,
                totalRec: 0,
                page: 1,
                student_data: {
                    data: [],
                    view: 30,
                    totalRec: 0,
                    page: 1,
                    isLoading: false
                },
                searchTerm: '',
                startdate: moment(new Date(1800,1,1)),
                enddate: moment(new Date(1800, 1, 1)),
                add_student: {
                    id: "",
                    name: "",
                    email: "",
                    class_id: "",
                    uploadfile: {
                        file: null,
                    },
                },
                class_info: {
                    ID: '',
                    Name: '',
                    StartDate: '',
                    EndDate: '',
                    Description: '',
                    ClassMechanism:'@BaseCustomerEntity.Database.CLASS_MECHANISM.OPEN',//mặc định là lớp mở
                    thumbnail: {
                        src: '',
                        file: null,
                        height: 90,
                        width: 160
                    },
                    subject: [
                        {
                            ID: '',
                            SubjectID: '',
                            GradeID: '',
                            SkillID: '',
                            TeacherID: '',
                            CourseID: '',
                            TypeClass: '@BaseCustomerEntity.Database.CLASS_TYPE.STANDARD'
                        }
                    ]
                },
                curr: 0,
                isHeadteacher:'@isHeadteacher'
            },
            computed: {
                sDate: {
                    get() {
                        return moment(this.startdate).format("MM/DD/YYYY");
                    },
                    set(value) {
                        this.startdate = value;
                    }
                },
                eDate: {
                    get() {
                        return moment(this.enddate).format("MM/DD/YYYY");
                    },
                    set(value) {
                        this.enddate = value;
                    }
                }
            },
            watch: {
                subject: function () {
                    this.getData()
                },
                isPrivate: function () {
                    this.getData()
                },
                searchTerm: function(){
                    if(this.searchTimeout != null)
                        clearTimeout(this.searchTimeout)
                    var fn = this.getData
                    this.searchTimeout = setTimeout(function(){
                        fn()
                        fn = null
                    }, 500)
                },
            },
            methods: {
                getData() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('SubjectID', _that.subject)
                    _form.append('PageSize', _that.view)
                    _form.append('PageIndex', _that.page)
                    _form.append('StartDate', _that.sDate)
                    _form.append('EndDate', _that.eDate)
                    _form.append('SearchText', _that.searchTerm)
                    _form.append('Center', '@center')
                    @if(!isHeadteacher)
                    {
                    @:let _url = '@processUrl("GetClassList", "Class")'
                    }
                    else
                    {
                    @:let _url = '@processUrl("GetManageList", "Class")'
                    @:if( this.isPrivate) _url = '@processUrl("GetClassList", "Class")'
                    }

                    axios.post(_url, _form)
                        .then(response => {
                            _that.tableData = response.data.Data;
                            this.tableData = _that.tableData
                            this.totalRec = response.data.Model.totalRecord
                            console.log(totalRec)
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = tt / this.view + (tt % this.view > 0 ? 1 : 0);
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },
                //Class Action
                toggleState(obj) {
                    //let _that = this;
                    //_that.tableData.forEach(function (item, k) {
                    //    if (item.ID === obj.ID) {
                            let _url = obj.IsActive ? '@processUrl("Unpublish", "Class")' : '@processUrl("Publish", "Class")'
                            let _form = new FormData()
                            _form.append('ArrID', obj.ID);
                            axios.post(_url, _form)
                                .then(response => {
                                    console.log('update ok');
                                    //item.IsActive = !item.IsActive;
                                    //_that.list_data[k].IsActive = !_that.list_data[k].IsActive;
                                }).catch(e => { })
                        //}
                    //})
                },
                createClass() {
                    let _that = this
                    if (_that.class_info.Name == '' || _that.class_info.Name == null) {
                        alert("Vui lòng nhập tên lớp");
                        _that.$refs["addName"].focus();
                        return false;
                    }

                    if (_that.class_info.StartDate == '' || _that.class_info.StartDate == null) {
                        alert("Vui lòng nhập ngày mở lớp");
                        _that.$refs["addStartDate"].showCalendar();//.focus();
                        return false;
                    }
                    var _startdate = '';
                    try {
                        //_startdate = moment(_that.class_info.StartDate).format("MM/DD/YYYY")
                        _startdate = this.formatDate(_that.class_info.StartDate)
                    }
                    catch(e){
                        alert("Vui lòng nhập ngày mở lớp");
                        _that.$refs["addStartDate"].showCalendar();//.focus();
                        return false;
                    }

                    if (_that.class_info.EndDate == '' || _that.class_info.EndDate == null) {
                        alert("Vui lòng nhập ngày kết thúc lớp");
                        this.$refs["addEndDate"].showCalendar();
                        return false;
                    }

                    var _enddate = '';
                    try {
                        //_enddate = moment(_that.class_info.EndDate).format("MM/DD/YYYY")
                        _enddate = this.formatDate(_that.class_info.EndDate)
                    }
                    catch(e){
                        alert("Vui lòng nhập ngày kết thúc lớp");
                        _that.$refs["addStartDate"].showCalendar();//.focus();
                        return false;
                    }

                    let _form = new FormData()
                    if(_that.class_info.ID != null)
                        _form.append('ID', _that.class_info.ID)
                    _form.append('Name', _that.class_info.Name)
                    _form.append('StartDate', _startdate)
                    _form.append('EndDate', _enddate)
                    _form.append('CenterCode', '@center')
                    _form.append('ClassMechanism', _that.class_info.ClassMechanism)

                    if(_that.class_info.Description != null)
                        _form.append('Description', _that.class_info.Description)
                    if (_that.class_info.thumbnail)
                        if (_that.class_info.thumbnail.file) {
                            _form.append('fileUpload', this.class_info.thumbnail.file)
                        }

                    var valid = true
                    var notify = false
                    if (_that.class_info.subject != null) {
                        _that.class_info.subject.forEach(function (item, k) {
                            if (item.Skill == '' || item.SubjectID == '' || item.GradeID == '' || item.CourseID == '' || item.TeacherID == '') {
                                alert("Vui lòng nhập đầy đủ thông tin cho môn học " + (k + 1));
                                valid = false
                                return false;
                            }
                            if (item.OldID != null && item.OldID != '')
                                notify = true
                            _form.append('ClassSubjects[' + k + '].ID', item.ID)
                            _form.append('ClassSubjects[' + k + '].SubjectID', item.SubjectID)
                            _form.append('ClassSubjects[' + k + '].GradeID', item.GradeID)
                            _form.append('ClassSubjects[' + k + '].CourseID', item.CourseID)
                            _form.append('ClassSubjects[' + k + '].TeacherID', item.TeacherID)
                            _form.append('ClassSubjects[' + k + '].TypeClass', item.TypeClass)
                        })
                    }

                    if (!valid) return false

                    if (notify) {
                        if (!confirm("Lưu ý: thay đổi thông tin môn học / cập nhật phiên bản sẽ khởi tạo lại toàn bộ thông tin liên quan đến học tập của môn học. Tiếp tục?"))
                            return false;
                    }
                    _that.isLoading = true
                    let _url = '@processUrl("Create","Class")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.isLoading = false;
                            console.log(response.data);
                            if (response.data.Error != null)
                                alert(response.data.Error)
                            else {

                                this.getData();
                                _that.$bvModal.hide('modal_class');
                                console.log(_that.class_info.ID);

                                if (_that.class_info.ID == null)//add
                                {
                                    var data = response.data.Data;
                                    _that.class_info.ID = data.ID;
                                    _that.manageStudent();
                                }

                            }
                        }).catch(e => {
                            _that.isLoading = false
                            console.log("Error: " + e)
                        })
                },
                removeClass(obj) {
                    if (confirm("Confirm delete \"" + obj.Name + '"')) {
                        let _that = this
                        let _form = new FormData()
                        _form.append('ArrID', obj.ID)
                        let _url = '@processUrl("Remove","Class")'
                        axios.post(_url, _form)
                            .then(response => {
                                console.log(response.data);
                                if (response.data.Error != null)
                                    alert(response.data.Error)
                                else {
                                    this.getData();
                                    _that.$bvModal.hide('modal_class');
                                }
                            }).catch(e => {
                                alert("Error: " + e)
                            })
                    }
                },
                CloneClass() {
                    var modal = $('#CloneModal');
                    //debugger
                    let _url = '@processUrl("CloneClass","Class")'
                    let _that = this

                    let _form = new FormData()
                    if (_that.class_info.ID != null)
                        _form.append('ID', _that.class_info.ID)
                    _form.append('Name', $(modal).find('[id=Name]').val())
                    _form.append('CenterCode', '@center')
                    _that.isLoading = true
                    axios.post(_url, _form)
                        .then(response => {
                            console.log(response.data);
                            _that.isLoading = false;
                            if (response.data.Error != null)
                            {
                                alert(response.data.Error)
                            }
                            else {
                                this.getData();
                                _that.$bvModal.hide('CloneModal');
                                console.log(_that.class_info.ID);

                                if (_that.class_info.ID == null)//add
                                {
                                    var data = response.data.Data;
                                    _that.class_info.ID = data.ID;
                                    _that.manageStudent();
                                }

                            }
                        }).catch(e => {
                            _that.isLoading = false
                            console.log("Error: " + e)
                        })
                },
                //Modal Event
                showClassModal(obj) {
                    let _that = this;
                    debugger
                    if (obj == null) {
                        _that.class_info =
                        {
                            ClassMechanism:'@BaseCustomerEntity.Database.CLASS_MECHANISM.OPEN',
                            thumbnail: {
                                src: '',
                                file: null,
                                height: 90,
                                width: 160
                            },
                            subject: [
                                {
                                    ID: '',
                                    SkillID: '',
                                    SubjectID: '',
                                    GradeID: '',
                                    TeacherID: '',
                                    CourseID: '',
                                    TypeClass: '@BaseCustomerEntity.Database.CLASS_TYPE.STANDARD'
                                }
                            ]
                        }
                    }
                    else {
                        _that.class_info.ID = obj.ID;
                        _that.class_info.Description = obj.Description;
                        _that.class_info.Name = obj.Name;
                        _that.class_info.ClassMechanism = obj.ClassMechanism == null ? '@BaseCustomerEntity.Database.CLASS_MECHANISM.OPEN' : obj.ClassMechanism
                        _that.class_info.thumbnail = {
                            src: obj.Image,
                            file: null,
                            height: 90,
                            width: 160
                        }
                        _that.class_info.StartDate = this.formatDate(obj.StartDate);
                        _that.class_info.EndDate = this.formatDate(obj.EndDate);
                        _that.class_info.subject = [];
                        let _form = new FormData()
                        _form.append('ClassID', obj.ID)
                        let _url = '@processUrl("GetClassSubjects", "ClassSubject")'
                        axios.post(_url, _form)
                            .then(response => {
                                var _data = response.data.Data;
                                _data.forEach(function (item, k) {
                                    var lock = false
                                    var valid_subject = _that.list_subject.filter(c => c.ID == item.SubjectID);
                                    if (valid_subject.length == 0) {
                                        _that.list_subject.push({
                                            ID: item.SubjectID,
                                            Name: item.SubjectName,
                                            IsActive: false
                                        });

                                        if (_that.list_grades_full.findIndex(c => c.ID == item.GradeID) == -1) {
                                            _that.list_grades_full.push({
                                                ID: item.GradeID,
                                                SubjectID: item.SubjectID,
                                                Name: item.GradeName,
                                                IsActive: false
                                            })
                                        }
                                        lock = true
                                    }
                                    else {
                                        lock = !valid_subject[0].IsActive
                                    }
                                    _that.class_info.subject.push({
                                        UID: moment().format("DDMMYYYYhhmmssSSS") + k,
                                        ID: item.ID,
                                        SkillID: item.SkillID,
                                        SubjectID: item.SubjectID,
                                        GradeID: item.GradeID,
                                        TeacherID: item.TeacherID,
                                        CourseID: item.CourseID,
                                        IsLock: lock,
                                        TypeClass: item.TypeClass
                                    })

                                    _that.changeAddSubject(item)
                                    _that.changeAddGrade(item)

                                    if (_that.courseSource.findIndex(c => c.ID == item.CourseID) == -1) {
                                        _that.courseSource.push({
                                            ID: item.CourseID,
                                            SkillID: item.SkillID,
                                            Name: item.CourseName,
                                            SubjectID: item.SubjectID,
                                            GradeID: item.GradeID,
                                            IsActive: false
                                        })
                                    }
                                })
                                //_that.$forceUpdate()
                            }).catch(e => { })
                    }
                    debugger
                    _that.$bvModal.show('modal_class')
                },
                showCloneModal(obj) {
                    let _that = this;
                    _that.class_info.Name = obj.Name;
                    _that.class_info.ID = obj.ID;
                    _that.$bvModal.show('CloneModal')
                },
                hideModal(modalid) {
                    if (modalid == null)
                        $('.close').click();
                    else
                        $('#' + modalid + ' .close').click();
                },
                getEditTitle() {
                    if (this.class_info.ID == '')
                        return 'Thêm lớp học';
                    else return 'Cập nhật thông tin';
                },
                changeAddSubject(obj) {
                    let _that = this;
                    if (_that.list_grades_full.findIndex(item => obj.GradeID == item.ID && obj.SubjectID == item.SubjectID) == -1) {
                        _that.class_info.subject.forEach(function (sbj) {
                            //console.log(obj.UID)
                            if (sbj.UID == obj.UID) {
                                sbj.GradeID = ''
                                sbj.CourseID = ''
                                sbj.TeacherID = ''
                                sbj.SkillID = ''
                                return
                            }
                        });
                    }

                    //load teacher
                    if (obj.SubjectID != '') {
                        //console.log(_that.loaded_teacher);
                        if (_that.loaded_teacher.includes(obj.SubjectID)) return;
                        //_that.loaded_teacher.push(obj.SubjectID);
                        @if(isHeadteacher)
                        {
                            @:let _form = new FormData()
                            @:  _form.append('SubjectID', obj.SubjectID)
                            @:  let _url = '@processUrl("GetListTeacher", "Class")'
                            @:  _form.append('Center', '@center')
                            @:  axios.post(_url, _form)
                            @:      .then(response => {
                            @:          var _data = response.data.Data;
                            @:          _data.forEach(function (item, k)
                            @:          {
                            @:              if (_that.teacherSource.findIndex(tc => tc.ID == item.id && tc.SubjectID == obj.SubjectID) == -1)
                            @:                  _that.teacherSource.push({
                            @:                      ID: item.id,
                            @:                      FullName: item.fullname,
                            @:                      SubjectID: obj.SubjectID,
                            @:                      IsActive: true
                            @:                  })
                            @:          })
                            @:          _that.loaded_teacher.push(obj.SubjectID);
                            @:          }).catch(e => { })

                        }
                        else
                        {
                            @: _that.teacherSource.push({
                            @:      ID: '@User.Claims.FirstOrDefault(t=> t.Type=="UserID").Value',
                            @:      FullName: '@User.Identity.Name',
                            @:      SubjectID: obj.SubjectID,
                            @:      IsActive: true
                            @: })
                            @: _that.loaded_teacher.push(obj.SubjectID);
                        }
                    }
                },
                changeAddGrade(obj) {
                    let _that = this;
                    if (obj.GradeID == '') return;
                    let key = obj.SubjectID + "_" + obj.GradeID
                    if (_that.loaded_course.includes(key)) return;
                    //load course
                    let _form = new FormData()
                    _form.append('SubjectID', obj.SubjectID)
                    _form.append('GradeID', obj.GradeID)
                    _form.append('Center', '@center')
                    let _url = '@processUrl("GetActiveList", "Curriculum")'
                    axios.post(_url, _form)
                        .then(response => {
                            var _data = response.data.Data;
                            _data.forEach(function (item, k)
                            {
                                var oldIdx = _that.courseSource.findIndex(i => i.ID == item.ID)
                                if (oldIdx == -1) {
                                    _that.courseSource.push({
                                        ID: item.ID,
                                        Name: item.Name,
                                        SubjectID: obj.SubjectID,
                                        GradeID: obj.GradeID,
                                        SkillID: item.SkillID,
                                        IsActive: true
                                    })
                                }
                                else {
                                    _that.courseSource[oldIdx].IsActive = true
                                }
                                //console.log(_that.courseSource);
                            })

                            _that.loaded_course.push(key);
                        }).catch(e => { })
                },
                changeAddSkill(obj) {
                   obj.CourseID = ''
                },
                addSubject() {
                    let length = this.class_info.subject.length;
                    this.curr = length
                    let _subject = {
                        UID: moment().format("DDMMYYYYhhmmssSSS"),
                        ID: '',
                        SkillID: '',
                        SubjectID: '',
                        GradeID: '',
                        TeacherID: '',
                        CourseID: ''
                    }
                    this.class_info.subject.push(_subject)
                    this.$forceUpdate();
                },
                removeSubject(k) {
                    this.class_info.subject.splice(k, 1);
                },
                refreshSubject(k, obj) {
                    if (this.class_info.subject[k].ID != "") {
                        $(obj.target).attr('oldID', this.class_info.subject[k].ID);
                        $(obj.target).addClass('text-danger');
                        this.class_info.subject[k].OldID = this.class_info.subject[k].ID;
                        this.class_info.subject[k].ID = "";
                    }
                    else {
                        var oldId = $(obj.target).attr('oldID');
                        this.class_info.subject[k].ID = oldId;
                        $(obj.target).removeClass('text-danger');
                        this.class_info.subject[k].OldID = null;
                    }
                },
                errorImgUrl() {
                    this.class_info.thumbnail.src = null;
                    this.class_info.thumbnail.file = null;
                    this.$forceUpdate();
                },
                previewThumb() {
                    let _that = this
                    if (event.target.files[0]['type'] === 'image/jpeg' ||
                        event.target.files[0]['type'] === 'image/png' ||
                        event.target.files[0]['type'] === 'image/gif') {
                    } else {
                        return
                    }
                    _that.class_info.thumbnail.src = URL.createObjectURL(event.target.files[0])
                    _that.class_info.thumbnail.file = event.target.files[0]
                    var src = URL.createObjectURL(event.target.files[0])
                    setTimeout(function () {
                        var imgTesting = new Image();
                        imgTesting.src = src;
                        setTimeout(function () {
                            _that.class_info.thumbnail.height = 90
                            _that.class_info.thumbnail.width = 160
                        }, 1000);
                    }, 1000);
                },
                initDate() {
                    console.log(isSearchDate);
                    if (isSearchDate) return;
                    let _that = this
                    var start = moment();
                    var end = moment().add(29, 'days');
                    $('input[name="dates"]').daterangepicker({
                        startDate: start,
                        endDate: end,
                        locale: {
                            format: "DD/MM/YYYY",
                        }
                    }, function (s, e, label) {
                        RepDate(s, e);
                        GetData();
                    });
                    $('input[name="dates"]').siblings().removeClass('inactive');
                    isSearchDate = true;
                    $('input[name="dates"]').focus().click();
                    _that.startdate = start;
                    _that.enddate = end;
                    GetData()
                },
                destroyDate() {
                    let _that = this
                    if (!isSearchDate) return false;
                    //$('input[name="dates"]').daterangepicker().destroy()
                    $('input[name="dates"]').data('daterangepicker').remove();
                    $('input[name="dates"]').val('-- Chọn thời gian --');
                    $('input[name="dates"]').siblings().addClass('inactive');
                    isSearchDate = false;
                    _that.startdate = moment(new Date(1800, 1, 1));
                    _that.enddate = moment(new Date(1800, 1, 1));
                    GetData();

                },
                //student
                manageStudent(data) {
                    let _that = this;
                    this.hideModal();
                    if (data != null) {
                        _that.class_info.ID = data.ID
                        _that.class_info.Name = data.Name
                    }
                    _that.student_data.page = 1;
                    this.loadStudent();
                    _that.$bvModal.show('modal_student')
                },
                loadStudent() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('ClassID', _that.class_info.ID)
                    _form.append('PageSize', _that.student_data.view)
                    _form.append('PageIndex', _that.student_data.page)
                    _form.append('Center', '@center')
                    let _url = '@processUrl("GetList", "StudentManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.student_data.data = response.data.Data;
                            this.student_data = _that.student_data
                            this.student_data.totalRec = response.data.Model.totalRecord
                            this.setClassStudent(_that.class_info.ID, response.data.Model.totalRecord);

                        }).catch(e => { })
                },
                showStudentAddModal() {
                    this.add_student.class_id = this.class_info.ID
                    this.$bvModal.show('modal_student_add')
                },
                showStudentUploadModal() {
                    this.add_student.class_id = this.class_info.ID
                    this.add_student.uploadfile.file = null
                    this.$bvModal.show('modal_student_upload')
                },
                chooseStudent(student) {
                    this.add_student.name = student.Name
                    this.add_student.email = student.Email
                    this.add_student.id = student.ID
                },
                setClassStudent(classid, count) {
                    this.tableData.forEach(function (item) {
                        if (item.ID == classid)
                            item.Students = count;
                    })
                },
                autocompleteStudent(term, callback) {
                    let _that = this
                    if (term.length >= 2) {
                        if (this.actimeout != null)
                            clearTimeout(this.actimeout);
                        this.actimeout = setTimeout(function () {
                            if (_that.loadedTermsST == null)
                                _that.loadedTermsST = []

                            if (_that.loadedTermsST.filter(item => item.term.indexOf(term) > -1).length == 0) {
                                let _form = new FormData()
                                _form.append('term', term)
                                _form.append('Center', '@center')
                                let _url = '@processUrl("Search","StudentManage")'
                                axios.post(_url, _form)
                                    .then(response => {
                                        var data = []
                                        if (response.data.length > 0) {
                                            response.data.forEach(function (item) {
                                                data.push({
                                                    ID: item.ID,
                                                    Name: item.FullName,
                                                    Email: item.Email
                                                });
                                            })
                                        }
                                        _that.ac_student = data
                                        _that.loadedTermsST.push({
                                            term: term,
                                            data: data
                                        })
                                        callback()
                                    }).catch(e => { })
                            } else {
                                _that.student_data.data = _that.loadedTermsST.filter(item => item.term.indexOf(term) > -1)[0].data;
                                callback()
                            }
                        }, 500)
                    }
                },
                createStudent() {
                    let _that = this
                    let _form = new FormData()
                    if (_that.add_student.class_id == '') {
                        Swal.fire('Chưa chọn lớp học','','warning');
                        return false;
                    }
                    if (_that.add_student.id == '') {
                        alert('Vui lòng chọn lại học viên')
                        return false;
                    }
                    _form.append('ClassID', _that.add_student.class_id)
                    _form.append('StudentID', _that.add_student.id)
                    _that.student_data.isLoading = true
                    let _url = '@processUrl("AddStudent", "StudentManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.student_data.isLoading = false
                            if (response.data.error != null) {
                                alert(response.data.error);
                                return false;
                            }
                            else {
                                alert(response.data.msg)
                                this.search_class_id = _that.add_student.class_id
                                this.search_grade_id = ''
                                this.search_skill_id = ''
                                this.search_subject_id = ''
                                this.loadStudent()
                                this.$bvModal.hide('modal_student_add')
                            }
                        }).catch(e => {
                            _that.student_data.isLoading = false
                            console.log(e)
                        })
                },
                uploadStudent() {
                    let _that = this
                    let _form = new FormData()
                    if (_that.add_student.class_id == '') {
                        alert('Chưa chọn lớp học');
                        return false;
                    }
                    if (!_that.add_student.uploadfile.file) {
                         alert('Chưa chọn danh sách học viên');
                        return false;
                    }
                    _form.append('ClassID', _that.add_student.class_id)
                    _form.append('fileUpload', _that.add_student.uploadfile.file)
                    _that.student_data.isLoading = true
                    let _url = '@processUrl("ImportStudent", "StudentManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.student_data.isLoading = false
                            if (response.data.error != null) {
                                alert(response.data.error);
                                return false;
                            }
                            else {
                                alert(response.data.msg)
                                this.search_class_id = _that.add_student.class_id
                                this.loadStudent()
                                this.$bvModal.hide('modal_student_upload')
                            }
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = Math.floor(tt / this.view) + (tt % this.view > 0 ? 1 : 0);
                        }).catch(e => {
                            _that.student_data.isLoading = false
                            console.log(e)
                        })
                },
                removeStudent(student) {
                    if (!confirm('Xác nhận xóa học viên ' + student.FullName + ' khỏi lớp ' + student.ClassName + '?')) {
                        return false;
                    }
                    let _that = this
                    let _form = new FormData()
                    _form.append('ClassID', student.ClassID)
                    _form.append('StudentID', student.ID)
                    let _url = '@processUrl("RemoveStudent", "StudentManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            if (response.data.error != null) {
                                alert(response.data.error);
                                return false;
                            }
                            else {
                                alert(response.data.msg)
                                this.getData()
                                this.hideModal()
                            }
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = Math.floor(tt / this.view) + (tt % this.view > 0 ? 1 : 0);
                        }).catch(e => { console.log(e) })
                },
                changeFile() {
                    console.log(event.target.files[0])
                    this.add_student.uploadfile.file = event.target.files[0]
                },
                downloadTemplate() {
                    window.open("@processUrl("ExportTemplate", "StudentManage")");
                },
                //support
                formatShortDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD/MM/YYYY")
                },
                repDate(svalue, evalue) {
                    this.eDate = evalue;
                    this.sDate = svalue;
                },
                matchSubject(obj, item) {
                    return item.IsActive || item.ID == obj.SubjectID
                },
                matchGrade(obj, item) {
                    return item.SubjectID == obj.SubjectID && (item.IsActive || item.ID == obj.GradeID)
                },
                matchTeacher(obj, item) {
                    return (item.SubjectID == obj.SubjectID)
                        && (item.IsActive || item.ID == obj.TeacherID)
                },
                matchCourse(obj, item) {
                    //console.log(this.courseSource)
                    return item.SubjectID == obj.SubjectID && item.GradeID == obj.GradeID && item.SkillID == obj.SkillID && (item.IsActive || (item.ID == obj.CourseID))
                },
                formatDate(value) {
                    if (value) {
                        return moment(String(value)).format('YYYY-MM-DD')
                    }
                },
                a(obj, userid) {
                    //debugger
                    //if (obj.TeacherID == userid) return true
                    //else return false
                }
            }
        });

    </script>
}
@section Modals{
    <b-modal :no-close-on-backdrop="true" id="modal_class" centered v-bind:title="getEditTitle()" style="width:90%">
        <div class="row">
            <div class="col-md-4">
                <b-col class="form-group">
                    <label class="label">Tên lớp học*</label>
                    <input type="text" v-model="class_info.Name" class="form-control" ref="addName">
                </b-col>
                <b-col class="form-row row">
                    <b-col class="col-sm-6">
                        <label class="label">Ngày bắt đầu*</label>
                        @*<vuejs-datepicker v-model="class_info.StartDate" format="dd/MM/yyyy" class="form-control" ref="addStartDate"></vuejs-datepicker>*@
                        <input type="date" v-model="class_info.StartDate" class="form-control" ref="addEndDate">
                    </b-col>
                    <b-col class="col-sm-6">
                        <label class="label">Ngày kết thúc*</label>
                        @*<vuejs-datepicker v-model="class_info.EndDate" format="dd/MM/yyyy" class="form-control" ref="addEndDate"></vuejs-datepicker>*@
                        <input type="date" v-model="class_info.EndDate" class="form-control" ref="addEndDate">
                    </b-col>
                </b-col>
                <b-col class="form-group">
                    <label class="label">Mô tả</label>
                    <textarea v-model="class_info.Description" rows="2" class="form-control" ref="addDescription"></textarea>
                </b-col>
                <b-col class="form-group">
                    <label class="label">Cơ chế lớp:</label>
                    <select v-model="class_info.ClassMechanism" class="form-control">
                        <option value="@BaseCustomerEntity.Database.CLASS_MECHANISM.OPEN">Lớp mở</option>
                        <option value="@BaseCustomerEntity.Database.CLASS_MECHANISM.CLOSE">Lớp đóng</option>
                    </select>
                </b-col>
                <b-col class="form-group">
                    <label class="label">Chọn ảnh lớp học</label>
                    <div id="thumb_class" v-if="class_info.thumbnail.src">
                        <img v-on:error="errorImgUrl()" :src="class_info.thumbnail.src" alt="" />
                    </div>
                    <label for="class_thumbnail" class="label frm-upload">
                        <i class="ic ic-paper-clip"></i>Tải ảnh lên
                        <input type="file" id="class_thumbnail" :ref="`thumbnail`" v-on:change="previewThumb()">
                    </label>
                </b-col>
            </div>
            <div class="col-md-8">
                <ul class="list list-subject" v-for="(sub,k) in class_info.subject">
                    <li class="flex" :id="sub.UID" v-if="sub.TeacherID == '@userid' && isHeadteacher=='False'" style="pointer-events: none;">
                        <div class="width-100 mr-2">
                            <label for="">Chương trình</label>
                            <select v-model="sub.SubjectID" class="form-control" v-on:change="changeAddSubject(sub)" :disabled="sub.IsLock">
                                <option value="">Chọn chương trình</option>
                                <option v-for="(item,k) in list_subject" :value="item.ID" v-if="matchSubject(sub, item)">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100 mr-2">
                            <label for="">Cấp độ</label>
                            <select v-model="sub.GradeID" class="form-control" v-on:change="changeAddGrade(sub)" :disabled="sub.IsLock">
                                <option value="">Chọn cấp độ</option>
                                <option v-for="(item,k) in list_grades_full" v-if="matchGrade(sub, item)" :value="item.ID">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100 mr-2">
                            <label for="">Môn học</label>
                            <select v-model="sub.SkillID" class="form-control" v-on:change="changeAddSkill(sub)" :disabled="sub.IsLock">
                                <option value="">Chọn môn học</option>
                                <option v-for="(item,k) in list_skill" :value="item.ID">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100 mr-2">
                            <label for="">Bài giảng</label>
                            <select v-model="sub.CourseID" class="form-control" :disabled="sub.IsLock">
                                <option value="">Chọn bài giảng</option>
                                <option v-for="(item,k) in courseSource" v-if="matchCourse(sub,item)" :value="item.ID">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100 mr-2">
                            <label for="">Loại học liệu</label>
                            <select v-model="sub.TypeClass" class="form-control" :disabled="sub.IsLock">
                                <option value="@BaseCustomerEntity.Database.CLASS_TYPE.STANDARD">Chính quy</option>
                                <option value="@BaseCustomerEntity.Database.CLASS_TYPE.EXTEND">Chuyên đề</option>
                            </select>
                        </div>
                        <div class="width-100 mr-2">
                            <label for="">Giáo viên</label>
                            <select v-model="sub.TeacherID" class="form-control" :disabled="sub.IsLock">
                                <option value="">Chọn giáo viên</option>
                                <option v-for="(item,k) in teacherSource" v-if="matchTeacher(sub, item)" :value="item.ID">{{item.FullName}}</option>
                            </select>
                        </div>

                        <div class="btn-group mt-4">
                            <button class="btn-act" v-on:click="removeSubject(k)" :disabled="sub.IsLock" title="Xóa môn học" v-if="sub.TypeClass=='@BaseCustomerEntity.Database.CLASS_TYPE.EXTEND'" style="pointer-events: auto;"><i class="ti-trash"></i></button>
                            <button class="btn-act" v-on:click="removeSubject(k)" :disabled="sub.IsLock" title="Xóa môn học" v-else><i class="ti-trash"></i></button>
                            <button class="btn-act" v-on:click="refreshSubject(k, $event)" :disabled="sub.IsLock" title="Cập nhật phiên bản mới nhất"><i class="ti-reload"></i></button>
                        </div>
                    </li>
                    <li class="flex" :id="sub.UID" v-else>
                        <div class="width-100 mr-2">
                            <label for="">Chương trình</label>
                            <select v-model="sub.SubjectID" class="form-control" v-on:change="changeAddSubject(sub)" :disabled="sub.IsLock">
                                <option value="">Chọn chương trình</option>
                                <option v-for="(item,k) in list_subject" :value="item.ID" v-if="matchSubject(sub, item)">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100 mr-2">
                            <label for="">Cấp độ</label>
                            <select v-model="sub.GradeID" class="form-control" v-on:change="changeAddGrade(sub)" :disabled="sub.IsLock">
                                <option value="">Chọn cấp độ</option>
                                <option v-for="(item,k) in list_grades_full" v-if="matchGrade(sub, item)" :value="item.ID">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100 mr-2">
                            <label for="">Môn học</label>
                            <select v-model="sub.SkillID" class="form-control" v-on:change="changeAddSkill(sub)" :disabled="sub.IsLock">
                                <option value="">Chọn môn học</option>
                                <option v-for="(item,k) in list_skill" :value="item.ID">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100 mr-2">
                            <label for="">Bài giảng</label>
                            <select v-model="sub.CourseID" class="form-control" :disabled="sub.IsLock">
                                <option value="">Chọn bài giảng</option>
                                <option v-for="(item,k) in courseSource" v-if="matchCourse(sub,item)" :value="item.ID">{{item.Name}}</option>
                            </select>
                        </div>
                        <div class="width-100 mr-2">
                            <label for="">Loại học liệu</label>
                            <select v-model="sub.TypeClass" class="form-control" :disabled="sub.IsLock">
                                <option value="@BaseCustomerEntity.Database.CLASS_TYPE.STANDARD">Chính quy</option>
                                <option value="@BaseCustomerEntity.Database.CLASS_TYPE.EXTEND">Chuyên đề</option>
                            </select>
                        </div>
                        <div class="width-100 mr-2">
                            <label for="">Giáo viên</label>
                            <select v-model="sub.TeacherID" class="form-control" :disabled="sub.IsLock">
                                <option value="">Chọn giáo viên</option>
                                <option v-for="(item,k) in teacherSource" v-if="matchTeacher(sub, item)" :value="item.ID">{{item.FullName}}</option>
                            </select>
                        </div>

                        <div class="btn-group mt-4">
                            <button class="btn-act" v-on:click="removeSubject(k)" :disabled="sub.IsLock" title="Xóa môn học"><i class="ti-trash"></i></button>
                            <button class="btn-act" v-on:click="refreshSubject(k, $event)" :disabled="sub.IsLock" title="Cập nhật phiên bản mới nhất"><i class="ti-reload"></i></button>
                        </div>
                    </li>
                </ul>
                <a href="javascript:;" title="Thêm môn học" v-on:click="addSubject()" class="btn-add-sub"><i class="ic ic-plus-c"></i> Thêm môn học</a>
            </div>
        </div>

        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang gửi dữ liệu ...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="createClass()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>


    <b-modal :no-close-on-backdrop="true" id="modal_student" centered title="Cập nhật danh sách học viên" style="width:800px">
        <div class="row">
            <div class="col-md-12">

                <div class="flex border-b padding-b25 justify-content-between">
                    <div class="flex width-100">
                        <label class="label">Lớp: {{class_info.Name}} </label>
                        <input type="hidden" value="{{class_info.ID}}" />
                    </div>

                    <div class="flex">
                        <b-button class="btn-addevent btn-student btn-sm" v-on:click="showStudentAddModal()"><i class="ti-plus"></i></b-button>
                        <b-button class="btn-addevent btn-student btn-sm" style="margin-left:5px" v-on:click="showStudentUploadModal($event.target.value)"><i class="ti-zip"></i></b-button>
                    </div>
                </div>
                <table id="st_table" class="table">
                    <thead>
                        <tr>
                            <th v-for="(field,k) in students_fields">{{field.label}}</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item,k) in student_data.data">
                            <td>{{k+1}}</td>
                            <td><a :href="'@processUrl("StudentDetail", "Class")/' + item.ID + '/' + item.ClassID" :title="item.FullName">{{item.FullName}}</a></td>
                            <td>{{item.Email}}</td>
                            <td>{{item.Phone}}</td>
                            <td><button class="btn-act btn-trash" v-on:click="removeStudent(item)"><i class="ti-trash"></i></button></td>
                        </tr>
                    </tbody>
                </table>
                <div class="box margin-t20 flex">
                    <div class="paging-view">
                        Hiển thị:
                        <select v-model="student_data.view" v-on:change="loadStudent()">
                            <option value="10">10 kết quả</option>
                            <option value="20">20 kết quả</option>
                            <option value="30">30 kết quả</option>
                        </select>
                    </div>
                    <div class="page-control">
                        <div class="right">
                            <b-pagination v-model="student_data.page"
                                          :total-rows="student_data.totalRec"
                                          :per-page="student_data.view"
                                          v-on:input="loadStudent()"></b-pagination>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <template v-slot:modal-footer>
            <b-button variant="danger" v-on:click="hideModal()">Đóng</b-button>
        </template>
    </b-modal>

    <b-modal :no-close-on-backdrop="true" id="modal_student_add" centered title="Thêm học viên">
        <b-col class="form-group">
            <label class="label">Lớp: {{class_info.Name}} </label>
            <input type="hidden" value="{{class_info.ID}}" />
        </b-col>
        <b-col class="form-group">
            <label for="">Học viên</label>
            <autocomplete v-on:chooseitem="chooseStudent" :items="ac_student" v-on:input="autocompleteStudent" />
        </b-col>
        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="student_data.isLoading">
                <b-button>Đang gửi dữ liệu ...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="createStudent()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal('modal_student_add')">Huỷ</b-button>
            </template>
        </template>
    </b-modal>

    <b-modal :no-close-on-backdrop="true" id="modal_student_upload" centered title="Nhập học viên từ file">
        <b-col class="form-group">
            <label class="label">Lớp: {{class_info.Name}} </label>
            <input type="hidden" value="{{class_info.ID}}" />
        </b-col>
        <b-col class="form-group">
            <label for="">Chọn danh sách học viên (excel)</label>
            <input type="file" class="btn btn-info" :ref="`uploadfile`" accept=".xls,.xlsx" v-on:change="changeFile()" /><br />
        </b-col>
        <template v-slot:modal-footer="{ ok, cancel}">
            <button v-on:click="downloadTemplate()" class="btn btn-secondary">Tải file mẫu</button>
            <template v-if="student_data.isLoading">
                <b-button>Đang gửi dữ liệu ...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="uploadStudent()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal('modal_student_upload')">Huỷ</b-button>
            </template>
        </template>
    </b-modal>


    @* Modal Clone *@
    <b-modal :no-close-on-backdrop="true" id="CloneModal" centered title="Nhân bản">
        <b-col class="form-group">
            <label>Lớp:</label>
            <input type="text" class="form-control" :value="class_info.Name" readonly />
            <input type="hidden" value="{{class_info.ID}}" name="ID" id="ID" />
        </b-col>
        <b-col class="form-group">
            <label class="label">Tên lớp mới: </label>
            <input type="text" class="form-control" :value="class_info.Name" name="Name" id="Name" />
        </b-col>
        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="student_data.isLoading">
                <b-button>Đang gửi dữ liệu ...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="CloneClass()">Nhân bản</b-button>
                <b-button variant="danger" v-on:click="hideModal('CloneModal')">Huỷ</b-button>
            </template>
        </template>
    </b-modal>


}
