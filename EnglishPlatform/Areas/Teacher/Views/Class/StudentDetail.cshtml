@{

    Layout = "~/Views/Shared/_LayoutTeacher_NewUI.cshtml";
    var currentClass = ViewBag.Class as BaseCustomerEntity.Database.ClassEntity;
    var currentStudent = ViewBag.Student as BaseCustomerEntity.Database.StudentEntity;
    ViewData["Title"] = currentClass.Name + " / " + currentStudent.FullName;
}
<script src="~/js/daterangepicker.min.js"></script>
<link href="~/css/daterangepicker.css" rel="stylesheet" />
<script src="/libs/vuejs-datepicker.min.js"></script>
<script>
    setActiveMenu("course");
</script>

<section class="module" id="dashboard_content">
    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-header" v-cloak>
        <div class="flex mb-2">
            <h2 class="title"><a href="@Url.Action("Detail", "Class")/@currentClass.ID#student" title="Quản lý môn học"><i class="ti-arrow-left d-none"></i></a>{{domDecoder(className)}}/@currentStudent.FullName</h2>
            @*<div class="search-box">
                    <button><i class="ic ic-find"></i></button>
                    <input type="text" name="" placeholder="Search">
                </div>*@
        </div>
        <div class="flex j-between">
            <div class="flex padding-b25">
                <div class="box filter-box w-250">
                    <input type="text" value="01/08/2019 - 30/09/2019" name="dates">
                    <span class="ic ic-picker"></span>
                </div>
                <div class="box filter-box w-152">
                    <select v-model="search_subject">
                        <option value="">Môn học</option>
                        <option v-for="(item, k) in classSubjects"
                                :value="item.ID">
                            {{item.Title}}
                        </option>
                    </select>
                </div>
            </div>
            <div class="flex rate" v-if="tab[1]">
                <span><i class="ic ic-paper-yet"></i>Điểm: {{avgPoint.toFixed(2)}}%</span>
                <span><i class="ic ic-award"></i>Xếp hạng: 1</span>
                <!-- <span><i class="ic ic-award-2"></i>Xếp hạng: 2</span> -->
                <!-- <span><i class="ic ic-award-3"></i>Xếp hạng: 3</span> -->
                <!-- <span><i class="ic ic-award-n"></i>Xếp hạng: 4</span> -->
            </div>
        </div>
        <div class="flex j-between border-b">
            <div class="tab bg-none">
                <ul class="flex">
                    <li v-bind:class="{active : tab[0]}"><a href="javascript:;" title="Lịch sử học tập" v-on:click="tabChange()">Lịch sử học tập</a></li>
                    <li v-bind:class="{active : tab[1]}"><a href="javascript:;" title="Kết quả" v-on:click="tabChange(1)">Kết quả</a></li>
                </ul>
            </div>
            <div class="c-right"></div>
        </div>
    </div>
    <div class="card-body" v-cloak>
        <div class="box" v-if="tab[0]">
            <table id="ed_table" class="table">
                <thead>
                    <tr>
                        <th v-for="(field,k) in progressFields">{{field.label}}</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-if="progressData == null || progressData.length <= 0">
                        <td colspan="4">Chưa có lịch sử học tập</a></td>
                    </tr>
                    <tr v-for="(item,k) in progressData" v-else>
                        <td><a href="#" :title="item.Title" class="title">{{item.Title}}</a></td>
                        <td>{{formatShortDate(item.ScheduleStart)}} - {{formatShortDate(item.ScheduleEnd)}}</td>
                        <td>{{formatFullDate(item.LearnLast)}}</td>
                        <td>{{item.LearnCount}}</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="box" v-if="tab[1]">
            <table id="ed_table" class="table">
                <thead>
                    <tr>
                        <th v-for="(field,k) in resultFields">{{field.label}}</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-if="resultData == null || resultData.length <= 0">
                        <td colspan="5">Chưa có kết quả</a></td>
                    </tr>
                    <tr v-for="(item,k) in resultData">
                        <td><a href="#" :title="item.Title" class="title">{{item.Title}}</a></td>
                        <td>{{formatShortDate(item.ScheduleStart)}} - {{formatShortDate(item.ScheduleEnd)}}</td>
                        <td>{{formatFullDate(item.LearnLast)}}</td>
                        <td class="text-danger" v-bind:class="{good : (item.Result > 50)}">{{item.Result == null ? '---' : (item.Result.toFixed(2) + '%')}}</td>
                        <td>{{item.LearnCount}}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        new Vue({
            el: "#main",
            mounted() {
                this.loadClassSubjects()
                var start = moment('@currentClass.StartDate.ToLocalTime().ToString("MM/dd/yyyy")');
                var end = moment('@currentClass.EndDate.ToLocalTime().ToString("MM/dd/yyyy")');
                $('input[name="dates"]').daterangepicker({
                    startDate: start,
                    endDate: end,
                    locale: {
                        format: "DD/MM/YYYY",
                    }
                }, function (s, e, label) {
                    RepDate(s, e);
                    loadData()
                });
                window.RepDate = this.repDate
                window.tabChange = this.tabChange
                window.loadData = this.loadData
                this.tabChange()
            },
            components: {
                vuejsDatepicker
            },
            data: {
                classID: '@currentClass.ID',
                className: '@currentClass.Name',
                classSubjects: [],
                search_subject: '',
                progressFields: [
                    {
                        key: 'lesson',
                        label: 'Bài học'
                    },
                    {
                        key: 'schedule',
                        label: 'Lịch học'
                    },
                    {
                        key: 'last_update',
                        label: 'Lần cuối'
                    },
                    {
                        key: 'total',
                        label: 'Lượt học'
                    },
                ],
                resultFields: [
                    {
                        key: 'lesson',
                        label: 'Bài kiểm tra'
                    },
                    {
                        key: 'schedule',
                        label: 'Lịch kiểm tra'
                    },
                    {
                        key: 'last_update',
                        label: 'Lần cuối'
                    },
                    {
                        key: 'score',
                        label: 'Điểm'
                    },
                    {
                        key: 'total',
                        label: 'Lượt làm bài'
                    },
                ],
                progressData: [],
                resultData: [],
                view: 10,
                page: 1,
                avgPoint: 0,
                startdate: moment('@currentClass.StartDate.ToLocalTime().ToString("MM/dd/yyyy")'),
                enddate: moment('@currentClass.EndDate.ToLocalTime().ToString("MM/dd/yyyy")'),
                tab: [true, false]
            },
            watch: {
                search_subject: function () {
                    console.log(this.search_subject)
                    this.loadData()
                }
            },
             computed: {
                sDate: {
                    get() {
                        return moment(this.startdate).format("MM/DD/YYYY");
                    },
                    set(value) {
                        this.startdate = value;
                    }
                },
                eDate: {
                    get() {
                        return moment(this.enddate).format("MM/DD/YYYY");
                    },
                    set(value) {
                        this.enddate = value;
                    }
                }
            },
            methods: {
                loadData() {
                    let _that = this
                    var pos = 0
                    _that.tab.forEach(function (item, k) {
                        if (_that.tab[k] == true) {
                            pos = k
                        }
                    })
                    switch (pos) {
                        case 0:
                            _that.loadHistory();
                            break;
                        case 1:
                            _that.loadResult();
                            break;
                    }
                    this.$forceUpdate()
                },
                loadResult() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('ClassID', _that.classID)
                    _form.append('ID', '@currentStudent.ID')
                    _form.append('ClassSubjectID', _that.search_subject)
                    _form.append('StartDate', moment(_that.startdate).format("MM/DD/YYYY"))
                    _form.append('EndDate',  moment(_that.enddate).format("MM/DD/YYYY"))

                    let _url = '@Url.Action("GetLearningResult", "Class")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.resultData = response.data.Data;
                            _that.avgPoint = 0;
                            console.log(_that.avgPoint)
                            if (_that.resultData.length > 0) {
                                _that.resultData.forEach(function (exam) {
                                    _that.avgPoint += exam.Result
                                });
                                _that.avgPoint = _that.avgPoint / _that.resultData.length
                            }
                        }).catch(e => { })
                },
                loadHistory() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('ClassID', _that.classID)
                    _form.append('ID', '@currentStudent.ID')
                    _form.append('ClassSubjectID', _that.search_subject)
                    _form.append('StartDate', moment(_that.startdate).format("MM/DD/YYYY"))
                    _form.append('EndDate',  moment(_that.enddate).format("MM/DD/YYYY"))

                    let _url = '@Url.Action("GetLearningProgress", "Class")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.progressData = response.data.Data;
                        }).catch(e => { })
                },
                loadClassSubjects() {
                    let _that = this
                    if (_that.classSubjects.length > 0)
                        return;

                    let _form = new FormData()
                    _form.append('ClassID', _that.classID)
                    let _url = '@Url.Action("GetClassSubjects", "ClassSubject")'
                    axios.post(_url, _form)
                        .then(response => {
                            var _data = response.data.Data;
                            _that.classSubjects = [];
                            _data.forEach(function (item, k) {
                                _that.classSubjects.push({
                                    ID: item.ID,
                                    Title: item.SkillName,
                                    Image: item.SkillImage,
                                })
                            })
                        }).catch(e => { })
                },
                tabChange(a = 0) {
                    // có thể load data theo từng tab để tối ưu hiệu năng
                    // this.getData()
                    let _that = this
                    _that.tab.forEach(function (item, k) {
                        _that.tab[k] = false;
                    })
                    this.tab = _that.tab
                    this.tab[a] = true
                    this.loadData()
                },
                domDecoder(str) {
                    let parser = new DOMParser();
                    let dom = parser.parseFromString('<!doctype html><body>' + str, 'text/html');
                    return dom.body.textContent;
                },
                formatShortDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD/MM/YYYY")
                },
                formatFullDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD/MM/YYYY hh:mm A")
                },
                repDate(svalue, evalue) {
                    this.eDate = evalue;
                    this.sDate = svalue;
                },
            }
        });
    </script>
}

@section Modals{


    <div class="modal fade edit-modal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true" id="addStudentModal">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Add Student to Class</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="ID" />
                    <div class="form-group">
                        <label class="col-form-label">Find Student:</label>
                        <input type="text" class="form-control" id="studentName" name="Name" placeholder="Please type to search">
                        <input type="hidden" value="" id="studentID" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="AddStudent()">Add</button>
                </div>
            </div>
        </div>
    </div>
    <style>
        .ui-front {
            z-index: 9999
        }
    </style>
}