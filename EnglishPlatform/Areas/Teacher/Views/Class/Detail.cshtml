@{

    Layout = "~/Views/Shared/_LayoutTeacher_NewUI.cshtml";
    var currentClass = ViewBag.Class as BaseCustomerMVC.Models.ClassViewModel;
    ViewData["Title"] = currentClass.Name;
}
@*<script src="/libs/vuejs-datepicker.min.js"></script>*@
<link href="~/js/lib/datetimepicker/jq.datetimepicker.css" rel="stylesheet" />
<script src="~/js/lib/datetimepicker/php-date-formatter.min.js"></script>
<script src="~/js/lib/datetimepicker/jquery.mousewheel.js"></script>
<script src="~/js/lib/datetimepicker/jquery.datetimepicker.js"></script>

<script>
    setActiveMenu("course");
</script>

<section class="module" id="dashboard_content">

    <div class="card-header">
        <div class="flex mb-2">
            <h2 class="title"><a href="@Url.Action("Detail", "Class")" title="Quản lý môn học"><i class="ti-arrow-left"></i></a>{{domDecoder(className)}}</h2>
            @*<div class="search-box mr-2" v-if="tab[2]">
                <button><i class="ic ic-find"></i></button>
                <input type="text" name="" placeholder="Search">
            </div>
            <div class="flex" v-if="tab[2]">
                <b-button class="btn-addevent btn-student" v-on:click="showStudentModal()"><i class="ti-plus"></i></b-button>
                <b-button class="btn-addevent btn-student" style="margin-left:5px" v-on:click="showStudentUploadModal()"><i class="ti-zip"></i></b-button>
            </div>*@
        </div>
        <div class="flex j-between border-b">
            <div class="tab bg-none">
                <ul class="flex">
                    <li v-bind:class="{active : tab[0]}"><a href="javascript:;" title="Tổng quan" v-on:click="tabChange()">Tổng quan</a></li>
                    <li v-bind:class="{active : tab[1]}"><a href="javascript:;" title="Môn học" v-on:click="tabChange(1)">Môn học</a></li>
                    <li v-bind:class="{active : tab[2]}"><a href="javascript:;" title="Học viên" v-on:click="tabChange(2)">Học viên</a></li>
                    <li v-bind:class="{active : tab[3]}"><a href="javascript:;" title="Tài liệu tham khảo" v-on:click="tabChange(3)">Tài liệu tham khảo</a></li>
                    <li v-bind:class="{active : tab[4]}"><a href="javascript:;" title="Trao đổi / thảo luận" v-on:click="tabChange(4)">Thảo luận</a></li>
                </ul>
            </div>
            <div class="c-right"></div>
        </div>
    </div>
    <div class="card-body">
        <div class="box" v-if="tab[0]">
            <ul class="box list ls-overview mb-3">
                <li class="flex margin-b20">
                    <a href="#" class="thumb"><img :src="classImg" alt="" /></a>
                    <div class="c-right">
                        <p><span class="label">Tên lớp: </span>{{domDecoder(className)}}</p>
                        @*<p><span class="label">Mã lớp : </span>IELTS_PL5_1</p>*@
                        @*<p><span class="label">Cấp độ : </span>{{gradeName}}</p>*@
                        <p><span class="label">Chương trình: </span>{{subjectName}}</p>
                        <p><span class="label">Môn học: </span>{{skillName}}</p>
                        <ul class="time-line flex">
                            <li><i class="ti-time"></i>Bắt đầu: {{formatShortDate(startDate)}} </li>
                            <li><i class="ti-time"></i>Kết thúc: {{formatShortDate(endDate)}} </li>
                        </ul>
                    </div>
                </li>
            </ul>
            <div class="box info-practice">
                <h4>Chi tiết lớp học</h4>
                <p>{{domDecoder(classDescription)}}</p>
            </div>
        </div>
        <div class="box" v-if="tab[1]">
            <ul class="list ls-pratice">
                <li v-for="(obj,i) in classSubjects">
                    <div class="inner">
                        <a href="javascript:;" v-b-toggle="`collapse-${i}`" class="btn-collapse parrent" v-on:click="loadContent(obj.ID)"><i class="ic ic-headphone-o" :style="'background-image:url(' + obj.Image + ')'"></i>{{obj.Title +' (GV: ' + obj.Teacher + ')'}}</a>
                        <b-collapse :id="`collapse-${i}`" accordion="my-accordion" role="tabpanel">
                            <ul class="list">
                                <chap-content v-for="(item,k) in list_chapters" v-if="matchedChap(item, obj.ID + '-')"
                                              v-bind:data="item"
                                              v-bind:pos="k"
                                              v-bind:subchaps="filterChap(item, list_chapters)"></chap-content>
                            </ul>
                        </b-collapse>
                    </div>
                </li>
            </ul>
        </div>
        <div class="box" v-if="tab[2]">
            <table id="ed_table" class="table">
                <thead>
                    <tr>
                        <th v-for="(field,k) in fields">{{field.label}}</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(item,k) in studentData">
                        <td>{{(k+1)}}</td>
                        <td><a :href="'@Url.Action("StudentDetail", "Class")/' + item.ID + '/' + item.ClassID" :title="item.FullName">{{item.FullName}}</a></td>
                        @*<td>{{item.Email}}</td>
                        <td>{{item.Phone}}</td>*@
                        <td v-bind:class="{good : (item.Percent > 50)}">{{item.Percent + '%'}}</td>
                        <td>{{formatTime(item.LastJoinDate)}}</td>
                        <td v-bind:class="{good : (item.Score > 50)}">{{item.Score == null ? '---' : (item.Score.toFixed(2) + '%')}}</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="box" v-if="tab[3]">
            <div class="row ls-doc">
                <div class="col-md-12">
                    <div class="inner">
                        <a href="#" title="" class="thumb">
                            <img src="/pictures/doc1.png" alt="">
                        </a>
                        <div class="entry">
                            <div class="flex j-between">
                                <div class="c-left">
                                    <a href="#" title="" class="title">IELTS Practice Tests</a>
                                    <div class="rating"><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i></div>
                                </div>
                                <div class="c-right">
                                    <a href="#" title="Xem" class="btn-view">Xem</a>
                                    <a href="#" title="Tải về" class="btn-download">Tải về</a>
                                </div>
                            </div>
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="inner">
                        <a href="#" title="" class="thumb">
                            <img src="/pictures/doc2.png" alt="">
                        </a>
                        <div class="entry">
                            <div class="flex j-between">
                                <div class="c-left">
                                    <a href="#" title="" class="title">IELTS Practice Tests</a>
                                    <div class="rating"><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i></div>
                                </div>
                                <div class="c-right">
                                    <a href="#" title="Xem" class="btn-view">Xem</a>
                                    <a href="#" title="Tải về" class="btn-download">Tải về</a>
                                </div>
                            </div>
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="box" v-if="tab[4]">
            Thảo luận
        </div>
    </div>

</section>
@section Scripts{

    <style>
        .ls-pratice .card-body {
            overflow: visible;
        }

        .ls-pratice .list {
            max-height: none;
            overflow: visible;
        }

        .ls-pratice .sub-practice .date {
            width: 160px;
            padding: 2px 12px;
        }

            .ls-pratice .sub-practice .date::after {
                top: 7px;
            }

        .ls-pratice .sub-practice .status {
            padding: 10px
        }

        .input-group.date input {
            width: 125px;
            border: none;
            padding: 0;
        }

            .input-group.date input:read-only {
                background: #FFF;
            }

            .input-group.date input:focus {
                outline: none !important;
            }
    </style>



    <script type="text/x-template" id="chapContentTemp">
        <li class="col-md-12">
            <div class="inner">
                <a href="javascript:;" v-b-toggle="`prc-${data.ID}-${pos}`" class="btn-collapse" v-on:click="loadContent(data.ClassSubject, data.ID)"><i class="ic ic-edit-small"></i>{{data.Title}}<i class="ic ic-collapse"></i></a>
                <b-collapse :id="`prc-${data.ID}-${pos}`" :accordion="`my-accordion-${data.Parent}`" role="tabpanel">
                    <b-card-body>
                        <ul class="list">
                            <chap-content v-for="(subItem,j) in subchaps"
                                          v-bind:data="subItem"
                                          v-bind:pos="j"
                                          v-bind:subchaps="filterChap(subItem, subchaps)"></chap-content>
                            <lesson-item v-for="lesson in filterLesson(data)" v-bind:data="lesson" v-bind:classSubject="data.ClassSubject"></lesson-item>
                        </ul>
                    </b-card-body>
                </b-collapse>
            </div>
        </li>
    </script>

    <script type="text/x-template" id="lessonItemTemp">
        <li class="sub-practice">
            <div class="flex j-between width-100">
                <a :href="'@Url.Action("Detail", "Lesson")/' + data.ID + '/' + classSubject"> <span class="width-100">{{data.Title}}</span></a>
                <div class="flex width-100 j-end picker-schedule">
                    <datepicker :date="data.StartDate" :idx="0" :obj="data" class="date st" v-on:input="updateSchedule(data)"></datepicker>
                    <datepicker :date="data.EndDate" :idx="1" :obj="data" class="date ed" v-on:input="updateSchedule(data)"></datepicker>
                </div>
                <div class="status">
                    <b-form-checkbox switch v-model="data.IsActive" v-on:change="toggleLessonState(data)"></b-form-checkbox>
                </div>
            </div>
        </li>
    </script>

    <script>
        Vue.component('chap-content', {
            template: '#chapContentTemp',
            props: {
                subchaps: Array,
                lessons: Array,
                data: Object,
                pos: String
            }
        })
        Vue.component('lesson-item',{
            template: '#lessonItemTemp',
            props: {
                data: Object,
                classSubject: String
            }
        })

        var datepickerComponent = Vue.extend({
          //v-el:select
          template: `<div class="input-group date" ref="inputgroup">` +
            `<input type="text" class="form-control" v-model="dateVal" readonly="readonly"><span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>` +
            `</div>`,
            props: {
                obj: '',
                idx: '0',
                date: '2015-01-01'
            },
            data: function () {
                return {};
            },
            computed:
            {
                dateVal: {
                    get() {
                        return this.date == '' ? '' : moment(this.date).format("DD/MM/YYYY HH:mm");
                    },
                    set(value) {
                        this.date = moment(value,"DD/MM/YYYY HH:mm").format();
                    }
                },
            },
            mounted: function () {
                let _that = this
                Vue.nextTick(function () {
                    //console.log($(_that.$refs.inputgroup))
                    $($(_that.$refs.inputgroup).find('input')).datetimepicker({
                        formatTime: 'H:i',
                        formatDate: 'd/m/Y',
                        timepickerScrollbar: true,
                        scrollMonth: false,
                        defaultTime: '08:00',
                        step: 15,
                        onChangeDateTime: function (dp, $input) {
                            //console.log($input.val())
                            _that.dateVal = $input.val()
                            if (moment($input.val(),"DD/MM/YYYY HH:mm").format() == "Invalid date") {
                                //console.log('false');
                                return false;
                            }

                            if (_that.idx == '0') {
                                if (_that.obj.StartDate != _that.date) {
                                    _that.obj.StartDate = _that.date
                                    //console.log(_that.obj.StartDate + ' _ ' + _that.obj.EndDate)
                                    _that.$emit('input')
                                }
                            }
                            else {
                                if (_that.obj.EndDate != _that.date) {
                                    _that.obj.EndDate = _that.date
                                    //console.log(_that.obj.StartDate + ' _ ' + _that.obj.EndDate)
                                    _that.$emit('input')
                                }
                            }
                        }
                    })
                })
            }
        })

        Vue.component('datepicker', datepickerComponent);

        new Vue({
            el: "#main",
            mounted() {
                this.loadClassDetail()
                window.loadContent = this.loadContent
                window.updateSchedule = this.updateSchedule
                window.filterChap = this.filterChap
                window.filterLesson = this.filterLesson
                var hash = window.location.hash;
                if (hash.startsWith('#')) {
                    hash = hash.split('#')[1]
                    //console.log(hash)
                    switch (hash) {
                        case 'module':
                            this.tabChange(1);
                            break;
                        case 'student':
                            this.tabChange(2);
                            break;
                        case 'preference':
                            this.tabChange(3);
                            break;
                        case 'discuss':
                            this.tabChange(4);
                            break;
                    }
                }
            },
            //components: {
            //    vuejsDatepicker
            //},
            data: {
                classID: '@currentClass.ID',
                className: '@currentClass.Name',
                startDate: '@currentClass.StartDate',
                endDate: '@currentClass.EndDate',
                classDescription: '@currentClass.Description',
                classImg: '@currentClass.Image',
                subjectName: '@currentClass.SubjectName',
                skillName: '@currentClass.SkillName',
                classSubjects: [
                ],
                list_data: [
                ],
                list_subjects: [],
                list_chapters: [],
                list_lessons:[],
                loaded_chapter: [],
                loaded_subject: [],
                fields: [
                    {
                        key: 'stt',
                        label: '#'
                    },
                    {
                        key: 'name',
                        label: 'Họ tên'
                    },
                    //{
                    //    key: 'email',
                    //    label: 'Email'
                    //},
                    //{
                    //    key: 'phone',
                    //    label: 'SĐT'
                    //},
                    {
                        key: 'per',
                        label: 'Tiến độ'
                    },
                    {
                        key: 'last_update',
                        label: 'Lần học cuối'
                    },
                    {
                        key: 'score',
                        label: 'Điểm trung bình'
                    }
                ],
                studentData: [
                ],
                view: 10,
                page: 1,
                tab: [true, false, false, false, false]
            },
            watch: {
            },
            methods: {
                tabChange(a = 0) {
                    // có thể load data theo từng tab để tối ưu hiệu năng
                    // this.getData()
                    let _that = this
                    _that.tab.forEach(function (item, k) {
                        _that.tab[k] = false;
                    })
                    this.tab = _that.tab
                    this.tab[a] = true
                    switch (a) {
                        case 0:
                            this.loadClassDetail();
                            break;
                        case 1:
                            this.loadClassSubjects();
                            break;
                        case 2:
                            this.loadClassStudent();
                            break;
                        case 3:
                            this.loadPreference();
                            break;
                        case 4:
                            this.loadComment();
                            break;
                    }
                    this.$forceUpdate()
                },
                loadClassDetail() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('ID', _that.classID)
                    let _url = '@Url.Action("GetDetail", "Class")'
                    axios.post(_url, _form)
                        .then(response => {
                        var _data = response.data.Data;
                        _data.forEach(function (item, k)
                        {
                            _that.teacherSource.push({
                                ID: item.id,
                                FullName: item.fullname,
                                SubjectID: obj.SubjectID
                            })
                        })
                        _that.loaded_teacher.push(obj.SubjectID);
                    }).catch(e => { })
                },
                loadClassSubjects() {
                    let _that = this
                    if (_that.classSubjects.length > 0)
                        return;

                    let _form = new FormData()
                    _form.append('ClassID', _that.classID)
                    let _url = '@Url.Action("GetClassSubjects", "ClassSubject")'
                        axios.post(_url, _form)
                            .then(response => {
                                var _data = response.data.Data;
                                _that.classSubjects = [];
                                _data.forEach(function (item, k) {
                                    _that.classSubjects.push({
                                        ID: item.ID,
                                        Title: item.SkillName,
                                        Image: item.SkillImage,
                                        Teacher: item.TeacherName,
                                        Chapters: [],
                                        Lessons: []
                                    })
                                    //_that.changeAddSubject(item)
                                    //_that.changeAddGrade(item)
                                })

                                //_that.$forceUpdate()
                            }).catch(e => { })
                },
                loadContent(subject, chapter) {
                    let _that = this
                    let key = subject + "_" + chapter
                    if (_that.loaded_chapter.includes(key))
                        return;

                    let _form = new FormData()
                    _form.append('ID', subject)
                    if(chapter)
                        _form.append('Parent', chapter)
                        let _url = '@Url.Action("GetContents", "ClassSubject")'
                        axios.post(_url, _form)
                            .then(response => {
                                var _data = response.data.Data;
                                var _lesson = response.data.Lesson;
                                //_that.classSubjects.forEach(function (item, k)
                                //{
                                //    if (item.ID == subject) {

                                _data.forEach(function (chapter, k) {
                                    var parent = chapter.ParentID;
                                    if (parent == "0") { parent = "";}
                                    _that.list_chapters.push({
                                        ID: chapter.ID,
                                        Title: chapter.Name,
                                        ClassSubject: subject,
                                        Parent: parent
                                    })
                                })
                                _lesson.forEach(function (lesson, k) {
                                    var parent = '';
                                    if (lesson.ChapterID) {
                                        parent = lesson.ChapterID;
                                    }

                                        _that.list_lessons.push({
                                            ID: lesson.ID,
                                            ScheduleID: lesson.ScheduleID,
                                            Title: lesson.Title,
                                            ClassSubject: subject,
                                            Parent: parent,
                                            StartDate: moment(lesson.StartDate) > moment(new Date(1900,1,1)) ? lesson.StartDate : "",
                                            EndDate: moment(lesson.EndDate) > moment(new Date(1900,1,1)) ? lesson.EndDate : "",
                                            IsActive: lesson.IsActive,
                                            IsUpdating: false
                                        })

                                })
                                this.loaded_chapter.push(key);
                                this.list_chapters = _that.list_chapters
                                this.list_lessons = _that.list_lessons
                                _that.$forceUpdate()
                            }).catch(e => { })
                },
                loadClassStudent() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('ClassID', _that.classID)
                    _form.append('PageSize', 1000)
                    _form.append('PageIndex', 1)
                    let _url = '@Url.Action("GetList", "StudentManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.studentData = response.data.Data;
                            this.studentData = _that.studentData
                            this.totalRec = response.data.Model.totalRecord
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = Math.floor(tt / this.view) + (tt % this.view > 0 ? 1 : 0);
                        }).catch(e => { })
                },
                loadPreference() {
                    //console.log(4)
                },
                loadComment() {
                    document.location = '@Url.Action("Index","Discuss", new { id = currentClass.ID })'
                    //console.log(5)
                },
                updateSchedule(obj) {
                    obj.IsUpdating = true

                    var startdate = moment(obj.StartDate).format("MM-DD-YYYY HH:mm:ss");
                    var enddate = moment(obj.EndDate).format("MM-DD-YYYY HH:mm:ss");

                    let _form = new FormData()
                    _form.append('ID', obj.ScheduleID)
                    _form.append('StartDate', startdate)
                    _form.append('EndDate', enddate)
                    let _url = '@Url.Action("Update", "LessonSchedule")'
                        axios.post(_url, _form)
                            .then(response => {
                                obj.IsUpdating = false
                            }).catch(e => { })
                },
                formatShortDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD/MM/YYYY")
                },
                formatTime(time) {
                    if (moment(time) < moment(new Date(2000, 1, 1))) return "-";
                    return moment(time).format("DD/MM/YYYY HH:mm")
                },
                matchedChap(obj, key) {
                    return (obj.ClassSubject + '-' + obj.Parent) == key
                },
                matchedLesson(obj, key) {
                    return (obj.ClassSubject + '-' + obj.Parent) == key
                },
                filterChap(obj, list) {
                    return list.filter((p) => {
        	            return p.Parent == obj.ID && p.ClassSubject == obj.ClassSubject
                    })
                },
                filterLesson(obj) {
                    var filter = this.list_lessons.filter((p) => {
        	            return p.Parent == obj.ID && p.ClassSubject == obj.ClassSubject
                    })
                    return filter;
                },
                 //Lesson Action
                toggleLessonState(obj) {
                    let _that = this;
                    //console.log(obj)
                    //_that.tableData.forEach(function (item, k) {
                        //if (item.ID === obj.ID) {
                            let _url = obj.IsActive ? '@Url.Action("Unpublish", "LessonSchedule")' : '@Url.Action("Publish", "LessonSchedule")'
                            let _form = new FormData()
                            _form.append('ArrID', obj.ScheduleID);
                            axios.post(_url, _form)
                                .then(response => {
                                    console.log('update ok');
                                    //item.IsActive = !item.IsActive;
                                    //_that.list_data[k].IsActive = !_that.list_data[k].IsActive;
                                }).catch(e => { })
                        //}
                    //})
                },
                domDecoder(str) {
                    let parser = new DOMParser();
                    let dom = parser.parseFromString('<!doctype html><body>' + str, 'text/html');
                    return dom.body.textContent;
                }
            }
        });
    </script>
}
