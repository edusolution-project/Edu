@{

    Layout = "~/Views/Shared/_LayoutTeacher_NewUI.cshtml";
    var currentClass = ViewBag.Class as BaseCustomerMVC.Models.ClassViewModel;
    ViewData["Title"] = currentClass.Name;
    var currentuser = User.Claims.Single(t => t.Type == "UserID").Value;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    var listsubjects = ViewBag.Subjects as List<BaseCustomerEntity.Database.SubjectEntity>;
    var listgrades = ViewBag.Grades as List<BaseCustomerEntity.Database.GradeEntity>;
    string processUrl(string act, string ctrl, Object param = null)
    {
        string url = Url.Action(act, ctrl, param);

        return $"/{center}{url}";
    }
    var startdate = currentClass.StartDate.ToLocalTime();
}


@*<script src="/libs/vuejs-datepicker.min.js"></script>*@
<script src="~/js/bootstrap-vue.min.js"></script>
<link href="~/js/lib/datetimepicker/jq.datetimepicker.css" rel="stylesheet" />
<script src="~/js/lib/datetimepicker/php-date-formatter.min.js"></script>
<script src="~/js/lib/datetimepicker/jquery.mousewheel.js"></script>
<script src="~/js/jquery-ui.min.js"></script>
<link href="~/css/jquery-ui.min.css" rel="stylesheet" />
<script src="~/js/lib/datetimepicker/jquery.datetimepicker.js"></script>

<script src="/libs/quill-editor/quill.min.js"></script>
<script src="/libs/quill-editor/quill-vue.min.js"></script>
<link href="/libs/quill-editor/quill.core.css" rel="stylesheet">
<link href="/libs/quill-editor/quill.snow.css" rel="stylesheet">
<link href="/libs/quill-editor/quill.bubble.css" rel="stylesheet">
@*<script src="~/js/export2excel/jquery.table2excel.js"></script>*@
<script>
    setActiveMenu("course");
</script>
<section class="module" id="dashboard_content">
    <div class="card-header" v-cloak>
        <div class="flex mb-2">
            <h2 class="title"><a href="@processUrl("Detail", "Class")" title="{{domDecoder(className)}}"><i class="ti-arrow-left d-none"></i></a>{{domDecoder(className)}}</h2>
        </div>
        <div class="flex j-between border-b">
            <div class="tab bg-none">
                <ul class="flex flex-row">
                    <li v-bind:class="{active : tab[0]}"><a href="javascript:;" title="Tổng quan" v-on:click="tabChange()">Tổng quan</a></li>
                    <li v-bind:class="{active : tab[1]}"><a href="javascript:;" title="Môn học" v-on:click="tabChange(1)">Tạo lịch dạy</a></li>
                    <li v-bind:class="{active : tab[2]}"><a href="javascript:;" title="Bảng điểm" v-on:click="tabChange(2)">Bảng điểm</a></li>
                    <li v-bind:class="{active : tab[3]}"><a href="javascript:;" title="Nhóm" v-on:click="tabChange(3)">Nhóm</a></li>
                    <li v-bind:class="{active : tab[5]}"><a href="javascript:;" title="Chấm bài tự luận" v-on:click="tabChange(5)">Chấm bài tự luận</a></li>
                </ul>
            </div>
            <div class="c-right">
                <b-button class="btn-addevent" v-on:click="addGroup()" v-if="tab[3]"><i class="ti-plus"></i></b-button>
            </div>
        </div>


        <div id="main-route" class="main-route mb-3 mt-2">
            <ul class="route_holder" id="cid_0" cid="0">
                <li class="route_item start"><a class="route_title">{{formatDatenoYear(startDate)}}</a><span class="route_period"></span></li>
                <li v-for="(obj,index) in (parseInt(period/7) + (period % 7 > 0 ? 1: 0))" class="route_item"
                    v-on:click="showWeekLesson(addDays(startDate, index * 7 - padRoute))"
                    :class="addDays(startDate, (index + 1) * 7 - padRoute) < moment() ? 'passed' : (addDays(startDate, (index) * 7 - padRoute) > moment() ? '': 'now')"><a class="route_title">{{formatDatenoYear(addDays(startDate, index * 7 - padRoute))}} - {{formatDatenoYear(addDays(startDate, (index * 7 + 6) > period ? (period - padRoute) : (index * 7 + 6 - padRoute)))}}</a><span class="route_period">Tuần {{index + 1}}</span></li>
                <li class="route_item end"><a class="route_title">{{formatDatenoYear(endDate)}}</a><span class="route_period"></span></li>
            </ul>
        </div>

        <div class="d-flex align-items-center" v-if="tab[2]">
            @*<div class="col-md-12 form-row pb-2" v-if="tab[2]">*@
            <div class="box filter-box m-1 col-12 col-md-2">
                <select v-model="searchCsbj">
                    <option value="">Tổng hợp</option>
                    <option v-for="(item,k) in classSubjects" :value="{ID:item.ID,CourseName:item.CourseName,TypeClass:item.TypeClass}" v-if="item.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM">Kiểm tra & Đánh giá</option>
                    @*<option v-for="(item,k) in classSubjects" :value="{ID:item.ID,CourseName:item.CourseName}" v-if="item.TypeClass != @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM">
                            {{item.CourseName}} <i class="far fa-check-circle" v-if="item.HasLessonActive"></i>
                        </option>*@
                    <template v-for="(item, k) in classSubjects" v-if="item.TypeClass != @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM">
                        @*<option :value="item.ID" v-if="item.HasLessonActive">&#10003; {{item.CourseName}}</option>*@
                        <option :value="{ID:item.ID,CourseName:item.CourseName,TypeClass:item.TypeClass}" v-if="item.HasLessonActive">{{item.CourseName}} ___ [ĐÃ GIAO]</option>
                        <option :value="{ID:item.ID,CourseName:item.CourseName,TypeClass:item.TypeClass}" v-else>{{item.CourseName}}</option>
                    </template>
                </select>
            </div>

            <button type="button" class="btn btn-addevent btn-student btn-sm m-1 btn-secondary" style="margin-left: 5px;" v-on:click="exportExcel('table_point')"><i title="Xuất file" class="ti-import"></i></button>
            @*<button type="button" class="btn btn-addevent btn-student btn-sm m-1 btn-secondary" style="margin-left: 5px;" v-on:click="export2ExcelV2()"><i title="Xuất file" class="ti-export"></i></button>*@
            @*<button type="button" class="btn btn-addevent btn-student btn-sm m-1 btn-secondary" style="margin-left: 5px;" onclick="ExportExcelV2()"><i title="Xuất file" class="ti-export"></i></button>*@
            <!--</template>
                <template v-else>
                    <button type="button" class="btn btn-addevent btn-student btn-sm m-1 btn-secondary" style="margin-left: 5px;" disabled><i title="Xuất file" class="ti-export"></i></button>
                </template>
            </div>-->
        </div>
    </div>
    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-body" v-cloak>
        <div class="box" v-if="tab[0]">
            <ul class="box list ls-overview mb-3">
                <li class="flex margin-b20">
                    <a href="#" class="thumb"><img :src="cacheStatic(classImg,256)" alt="" /></a>
                    <div class="c-right">
                        <p><span class="label">Tên lớp: </span>{{domDecoder(className)}}</p>
                        <p><span class="label">Chương trình: </span>{{domDecoder(subjectName)}}</p>
                        <p><span class="label">Môn học: </span>{{skillName}}</p>
                        <ul class="time-line flex">
                            <li><i class="ti-time"></i>Bắt đầu: {{formatShortDate(startDate)}} </li>
                            <li><i class="ti-time"></i>Kết thúc: {{formatShortDate(endDate)}} </li>
                        </ul>
                    </div>
                </li>
            </ul>
            <div class="box info-practice">
                <h4>Chi tiết lớp học</h4>
                <p v-html="replaceBrkLine(domDecoder(classDescription))"></p>
            </div>
        </div>
        <div class="box" v-show="tab[1]">
            <div class="form-group">
                <h3 style="font-size:15px;" class="font-weight-bold">Học liệu chính quy</h3>
                <ul class="list ls-practice">
                    <li v-for="(obj,i) in classSubjects" v-if="obj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.STANDARD" :for="obj.ID">
                        <div class="class_row d-flex justify-content-start">
                            <a href="javascript:;" v-b-toggle="`collapse-${i}`" class="btn-collapse parent flex-row align-items-center pb-2 mb-0 pt-2" v-on:click="loadContent(obj.ID)" :style="'color: ' + obj.Color">
                                <i class="ic ic-headphone-o mr-1 align-middle" :style="'background-image:url(' + cacheStatic(obj.Image,48) + ')'"></i>{{obj.Title + ' (' + obj.CourseName + ' - GV: ' + obj.Teacher + ')'}}
                                <i class="far fa-arrow-alt-circle-down ml-1 align-middle"></i>
                            </a>
                            <a href="javascript:;" class="font-weight-bolder pb-2 mb-0 pt-2 text-dark" v-on:click="showScoreboard(obj)">
                                <i class="fas fa-poll-h ml-3"></i>
                                Bảng điểm
                            </a>
                            <a href="javascript:;" class="font-weight-bolder pb-2 mb-0 pt-2 text-dark" v-if="obj.TeacherID == '@currentuser'" v-on:click="showEditor(obj)">
                                <i class="far fa-edit ml-3"></i>
                                Soạn thảo
                            </a>
                        </div>
                        <b-collapse :id="`collapse-${i}`" accordion="my-accordion-0" role="tabpanel">
                            <ul class="list">
                                <chap-content v-for="(item,k) in list_chapters" v-if="item.ClassSubject + '-' + item.Parent == obj.ID + '-'"
                                              v-bind:data="item"
                                              v-bind:classbj="obj.ID"
                                              v-bind:pos="k"
                                              v-bind:owner="obj.TeacherID"
                                              v-bind:listchaps="list_chapters"
                                              v-bind:group="group_data"></chap-content>
                                <lesson-item v-for="lesson in filterLesson({ID:'0', ClassSubject: obj.ID})"
                                             v-bind:data="lesson"
                                             v-bind:owner="obj.TeacherID"
                                             v-bind:classSubject="obj.ID"
                                             v-bind:group="group_data"></lesson-item>
                            </ul>
                        </b-collapse>
                    </li>
                </ul>
            </div>
            <div class="form-group">
                <h3 style="font-size:15px;" class="font-weight-bold pt-3">Học liệu chuyên đề</h3>
                <ul class="list ls-practice">
                    <li v-for="(obj,i) in classSubjects" v-if="obj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXTEND" :for="obj.ID">
                        <div class="class_row d-flex justify-content-start">
                            <a href="javascript:;" v-b-toggle="`collapse-${i}`" class="btn-collapse parent flex-row align-items-center pb-2 mb-0 pt-2" v-on:click="loadContent(obj.ID)" :style="'color: ' + obj.Color">
                                <i class="ic ic-headphone-o mr-1 align-middle" :style="'background-image:url(' + cacheStatic(obj.Image,48) + ')'"></i>{{obj.Title + ' (' + obj.CourseName + ' - GV: ' + obj.Teacher + ')'}}
                                <i class="far fa-arrow-alt-circle-down ml-1 align-middle"></i>
                            </a>
                            <a href="javascript:;" class="font-weight-bolder pb-2 mb-0 pt-2 text-dark" v-on:click="showScoreboard(obj)">
                                <i class="fas fa-poll-h ml-3"></i>
                                Bảng điểm
                            </a>
                            <a href="javascript:;" class="font-weight-bolder pb-2 mb-0 pt-2 text-dark" v-if="obj.TeacherID == '@currentuser'" v-on:click="showEditor(obj)">
                                <i class="far fa-edit ml-3"></i>
                                Soạn thảo
                            </a>
                        </div>
                        <b-collapse :id="`collapse-${i}`" accordion="my-accordion-0" role="tabpanel">
                            <ul class="list">
                                <chap-content v-for="(item,k) in list_chapters" v-if="item.ClassSubject + '-' + item.Parent == obj.ID + '-'"
                                              v-bind:data="item"
                                              v-bind:classbj="obj.ID"
                                              v-bind:pos="k"
                                              v-bind:owner="obj.TeacherID"
                                              v-bind:listchaps="list_chapters"
                                              v-bind:group="group_data"></chap-content>
                                <lesson-item v-for="lesson in filterLesson({ID:'0', ClassSubject: obj.ID})"
                                             v-bind:data="lesson"
                                             v-bind:owner="obj.TeacherID"
                                             v-bind:classSubject="obj.ID"
                                             v-bind:group="group_data"></lesson-item>
                            </ul>
                        </b-collapse>
                    </li>
                </ul>
            </div>
            <div class="form-group">
                @*<h3 style="font-size:15px;" class="font-weight-bold pt-3">Kiểm tra / đánh giá</h3>*@
                <ul class="list ls-practice">
                    <li v-for="(obj,i) in classSubjects" v-if="obj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM" :for="obj.ID">
                        <div class="class_row d-flex justify-content-start">
                            <a href="javascript:;" class="btn-collapse parent flex-row align-items-center pb-2 mb-0 pt-2 text-danger" v-on:click="loadContent(obj.ID)" v-on:load="alert(1)">
                                <h3 style="font-size:15px;" class="font-weight-bold"> Kiểm tra / đánh giá</h3>
                            </a>
                            <a href="javascript:;" class="font-weight-bolder pb-2 mb-0 pt-2 text-dark" v-on:click="showScoreboard(obj)">
                                <i class="fas fa-poll-h ml-3"></i>
                                Bảng điểm
                            </a>
                            <a href="javascript:;" class="font-weight-bolder pb-2 mb-0 pt-2 text-dark" v-if="@(currentClass.Members.Any(t=> t.TeacherID == currentuser) ? "1==1":"1==0")" v-on:click="showEditor(obj)">
                                <i class="far fa-edit ml-3"></i>
                                Soạn thảo
                            </a>
                            <a href="javascript:;" class="font-weight-bolder pb-2 mb-0 pt-2 text-dark" v-if="@(currentClass.Members.Any(t=> t.TeacherID == currentuser) ? "1==1":"1==0")" v-on:click="showAutoCreateExam(obj)">
                                <i class="far fa-edit ml-3"></i>
                                Tạo đề tự động
                            </a>
                        </div>
                        @*<b-collapse :id="`collapse-${i}`" accordion="my-accordion-0" role="tabpanel">*@
                        <ul class="list">
                            <chap-content v-for="(item,k) in list_chapters" v-if="item.ClassSubject + '-' + item.Parent == obj.ID + '-'"
                                          v-bind:data="item"
                                          v-bind:classbj="obj.ID"
                                          v-bind:pos="k"
                                          v-bind:owner="obj.TeacherID"
                                          v-bind:listchaps="list_chapters"
                                          v-bind:type="'exam'"
                                          v-bind:group="group_data"></chap-content>
                            <lesson-item v-for="lesson in filterLesson({ID:'0', ClassSubject: obj.ID})"
                                         v-bind:data="lesson"
                                         v-bind:owner="obj.TeacherID"
                                         v-bind:classSubject="obj.ID"
                                         v-bind:type="'exam'"
                                         v-bind:group="group_data"></lesson-item>
                        </ul>
                        @*</b-collapse>*@
                    </li>
                </ul>
            </div>
        </div>
        <div class="box" v-if="tab[2]">
            <div class="container-fluid">
                <template v-if="table[0] && isLoading == false">
                    <table id="table_point" class="table">
                        <thead>
                            <tr>
                                <th>STT</th>
                                <th>Họ và tên</th>
                                <th>Điểm luyện tập</th>
                                <th>Điểm kiểm tra</th>
                                @*<th>Xếp hạng</th>*@
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(item,k) in scoreData">
                                <td>{{k+1}}</td>
                                <td><a href="javascript:void(0)" v-on:click="showDetailStudent(item.StudentID,item.FullName)">{{item.FullName}}</a></td>
                                <td>{{roundPoint(item.PracticeAvgPoint,1)}}</td>
                                <td class="action-cel" v-on:click="loadDetailExam(item)">{{roundPoint(item.AvgPoint,1)}}</td>
                                @*<td>1/32</td>*@
                            </tr>
                        </tbody>
                    </table>
                </template>
                <template v-else-if="table[1] && isLoading == false">
                    <div class="view" v-if="fieldsTime">
                        <div class="wrapper">
                            <table class="table scoretable" id="table_point">
                                <thead>
                                    <tr>
                                        <th class="sticky-col first-col" rowspan="2">STT</th>
                                        <th class="sticky-col second-col" rowspan="2">Họ tên</th>
                                        <th rowspan="2" class="sticky-col third-col">Điểm <br /> Trung bình / Mục tiêu</th>
                                        <th rowspan="2" class="sticky-col forth-col" v-if="group_data.length > 0">
                                            Nhóm
                                        </th>
                                        @*<th rowspan="2" class="sticky-col third-col" v-else>Điểm trung bình</th>*@
                                        @*<th rowspan="2" class="sticky-col fourth-col" v-if="searchCsbj.TypeClass != @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM">Điểm mục tiêu</th>*@
                                        <th :colspan="Object.keys(fieldsTime).map((key) => [Number(key),fieldsTime[key]]).length" style="text-align:center">Tuần</th>
                                    </tr>
                                    <tr style="font-size:80%">
                                        <th v-for="(item,k) in fieldsTime" class="td_hover" v-on:click="loadResultwTime(item)">{{formatDatenoYear(item.startTime)}} - {{formatDatenoYear(item.endTime)}}</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="(items,i) in studentSummarySbj">
                                        <td class="sticky-col first-col">{{i}}</td>
                                        <td class="sticky-col second-col">{{ list_students[i-1].FullName}}</td>
                                        <td class="sticky-col third-col">{{roundPoint(list_students[i-1].AvgPointPratice,1)}}/{{roundPoint(list_students[i-1].Target,1)}}</td>
                                        @*<td class="sticky-col third-col">{{roundPoint(list_students[i-1].AvgPointPratice,1)}}</td>*@
                                        @*<td class="sticky-col fourth-col" v-if="searchCsbj.TypeClass != @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM">{{roundPoint(list_students[i-1].Target,1)}}</td>*@
                                        <td class="sticky-col fourth-col p-1">
                                            <button class="btn btn-sm btn-secondary pr-1 pl-1 m-0 w-100" v-on:click="chooseGroupStudent(list_students[i-1])" v-if="list_students[i-1].GroupIDs != null && list_students[i-1].GroupIDs.length > 0">
                                                {{displayGroup(list_students[i-1].GroupIDs[0])}}
                                            </button>
                                            <button class="btn btn-sm btn-light-blue pr-1 pl-1 m-0 w-100" v-on:click="chooseGroupStudent(list_students[i-1])" v-else>
                                                ---
                                            </button>
                                        </td>
                                        @*<td>{{calcAvginWeek(items)}}</td>*@
                                        <template v-if="Object.keys(fieldsTime).map((key) => [Number(key),fieldsTime[key]]).length > 0">
                                            <template v-for="item in items">
                                                @*<template v-if="Object.keys(fieldsTime).map((key) => [Number(key),fieldsTime[key]]).length > 0">
                                                    <td v-for="item in items" style="width:50px;height:20px" :class="item.point >= 0 ? 'action-cel':''" v-on:click="loadDetailinWeek(item)">{{roundPoint(item.point,1)}}</td>*@
                                                <td style="width:50px;height:20px" v-if="roundPoint(item.point,1) >= 8" class="action-cel color-minpoint8" v-on:click="loadDetailinWeek(item)">{{roundPoint(item.point,1)}}</td>
                                                <td style="width:50px;height:20px" v-else-if="roundPoint(item.point,1) >= 5 && roundPoint(item.point,1) < 8" class="action-cel color-minpoint5" v-on:click="loadDetailinWeek(item)">{{roundPoint(item.point,1)}}</td>
                                                <td style="width:50px;height:20px" v-else-if="roundPoint(item.point,1) >= 2 && roundPoint(item.point,1) < 5" class="action-cel color-minpoint2" v-on:click="loadDetailinWeek(item)">{{roundPoint(item.point,1)}}</td>
                                                <td style="width:50px;height:20px" v-else-if="roundPoint(item.point,1) >= 0 && roundPoint(item.point,1) < 2" class="action-cel color-minpoint0" v-on:click="loadDetailinWeek(item)">{{roundPoint(item.point,1)}}</td>
                                                <td style="width:50px;height:20px" v-else class="color-dontwork">{{roundPoint(item.point,1)}}</td>
                                            </template>
                                        </template>
                                        <template v-else>
                                            <td>Chưa đặt lịch</td>
                                        </template>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="view" v-else style="text-align:center">Chưa có bài</div>
                </template>
            </div>
        </div>
        <div class="box" v-show="tab[3]">
            <template v-if="group_data.length == 0">
                Chưa có danh sách nhóm
            </template>
            <template v-else>
                <table id="ed_table" class="table">
                    <thead>
                        <tr>
                            <th style="width:50px;">#</th>
                            <th>Tên nhóm</th>
                            <th style="width:100px;">Số học viên</th>
                            <th style="width:120px;">Ngày tạo</th>
                            <th style="width:100px;">Trạng thái</th>
                            <th style="width:150px">Tác vụ</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item,k) in group_data">
                            <td>{{(k+1)}}</td>
                            <td>
                                <a :title="item.Name" v-on:click="showGroupStudent(item)" href="javascript:;">
                                    {{item.Name}}
                                </a>
                            </td>
                            <td>{{item.Members != null ? item.Members.length : 0}}</td>
                            <td>{{formatShortDate(item.Created)}}</td>
                            <td><b-form-checkbox switch v-model="item.IsActive" v-on:change="toggleGroupState(item)"></b-form-checkbox></td>
                            <td>
                                <div class="btn-group" style="display:block">
                                    <a class="btn-act btn-edit" title="Cập nhật" href="javascript:;" v-on:click="addGroup(item)"><i class="ti-pencil-alt"></i></a>
                                    <a href="javascript:;" title="Quản lý học viên" v-on:click="manageGroupStudent(item)" class="btn-act btn-edit"><i class="ti-user"></i></a>
                                    <button class="btn-act btn-trash" title="Xóa" v-on:click="removeGroup(item)"><i class="ti-trash"></i></button>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </template>
        </div>
        <div class="box" v-show="tab[5]">
            <template v-if="lessonToMark.data.length == 0">
                Không có bài tự luận cần chấm điểm.
            </template>
            <template v-else>
                <ul class="list ls-practice">
                    <li v-for="(item,k) in lessonToMark.data">
                        <div class="class_row d-flex justify-content-start">
                            <a href="javascript:;" v-b-toggle="`collapse-${k}`" class="btn-collapse parent flex-row align-items-center pb-2 mb-0 pt-2" v-on:click="loadContent(item.classSubjectID)">
                                <i class="ic ic-headphone-o mr-1 align-middle"></i>{{item.courseName}}
                                <i class="far fa-arrow-alt-circle-down ml-1 align-middle"></i>
                            </a>
                        </div>
                        <b-collapse :id="`collapse-${k}`" :accordion="'my-accordion-'+ k" role="tabpanel">
                            @*<chap-content v-for="(chapter,i) in lessonToMark.list_chapters" v-if="chapter.ClassSubject + '-' + chapter.Parent == item.ID + '-'"
                                v-bind:data="chapter"
                                v-bind:classbj="item.ID"
                                v-bind:pos="i"
                                v-bind:owner="item.TeacherID"
                                v-bind:listchaps="lessonToMark.list_chapters"></chap-content>*@
                            <ul class="list" v-if="item.listLesson.length > 0">
                                <li class="sub-practice pt-2 pb-1 pl-2 rounded" v-for="lesson in item.listLesson">
                                    <div class="d-flex w-100 flex-column flex-md-row align-items-start align-items-md-center">
                                        <a v-on:click="ShowDetailLessonToMark(item.listExam,item.courseName,lesson.Title,lesson.ID)" class="flex-grow-1 overflow-hidden text-dark" style="text-overflow: ellipsis" :title="lesson.Title">
                                            <template v-if="lesson.TemplateType === 2">
                                                <span class="text-danger">
                                                    <i class="ic far fa-edit mr-2"></i>
                                                    {{lesson.Title}} - {{filterChapter(lesson.ChapterID,item.listChapter)}}
                                                </span>
                                            </template>
                                            <template v-else>
                                                <span>
                                                    <i class="ic far fa-file-alt mr-2"></i>
                                                    {{lesson.Title}} - {{filterChapter(lesson.ChapterID,item.listChapter)}}
                                                </span>
                                            </template>
                                        </a>
                                    </div>
                                </li>
                            </ul>
                        </b-collapse>
                    </li>
                </ul>
            </template>
        </div>
    </div>

    <template v-if="isLoading">
        <div style="text-align:center">
            <span>Đang tải dữ liệu ...</span><br />
            <b-spinner label="Loading..."></b-spinner>
        </div>
    </template>
</section>
@section Scripts{
    <style>

        #main-route {
            overflow: auto;
        }

        .route_holder {
            text-align: left;
            white-space: nowrap;
            height: 2px;
            margin: 50px 0 60px;
            font-size:0;
        }

        .route_item {
            display: inline-block;
            width: 100px;
            height: 4px;
            overflow: visible;
            margin: 0;
            background: #969696;
            position: relative;
            font-weight: bold;
            opacity: 0.7;
            cursor:pointer;
            font-size:14px;
        }

            .route_item:hover {
                opacity: 1;
                background: #13a6fb;
            }

            .route_item:hover::after {
                border-color: #13a6fb;
            }

            .route_item.start {
                width: 50px;
                margin-left: 20px;
            }

                .route_item.passed,
                .route_item.start
                {
                    background: #13a6fb;
                }

                    .route_item.start::after,
                    .route_item.passed::after {
                        border-color: #13a6fb;
                        background-color: #13a6fb;
                    }

            .route_item.now {
                background-color: #D03239;
            }
                .route_item.now::after {
                    background-color: #D03239;
                    border-color: #D03239;
                }

                .route_item.start .route_period {
                    left: 10px;
                }

            .route_item.end {
                width: 50px;
                text-align: right;
                /*margin-right: 20px;*/
            }

                .route_item.end .route_title {
                    text-align: right;
                    left:auto;
                    right:0px;
                }

                .route_item.end .route_period {
                    right: 10px;
                }

                .route_item.end::after {
                    right: -10px;
                    left: auto;
                }

            .route_item::after {
                content: "";
                position: absolute;
                left: 50%;
                right: auto;
                -webkit-transform: translateX(-50%);
                -moz-transform: translateX(-50%);
                -ms-transform: translateX(-50%);
                -o-transform: translateX(-50%);
                transform: translateX(-50%);
                bottom: -12px;
                height: 20px;
                width: 20px;
                border-radius: 50%;
                border: 2px solid #969696;
                background: #969696 url(/images/calendar.png) no-repeat center center;
                -webkit-background-size: 14px auto;
                background-size: 14px auto;
                -webkit-transition: background-color .3s,border-color .3s;
                -moz-transition: background-color .3s,border-color .3s;
                -o-transition: background-color .3s,border-color .3s;
                transition: background-color .3s,border-color .3s;
                top: -8px;
                cursor: pointer;
            }

            .route_item.start::after {
                left: 10px;
            }

            .route_item .route_title {
                bottom: 20px;
                position: absolute;
                left: 50%;
                margin-left: -35px;
                width: 70px;
                text-align: center;
                overflow: hidden;
                max-height: 28px;
                white-space: break-spaces;
                line-height: 14px;
                font-size: 70%;
                font-weight: bold;
            }

            .route_item.start .route_title {
                margin-left: 0;
                left: -6px;
                text-align: left;
            }

            .route_item .route_period {
                top: 20px;
                position: absolute;
                left: 50%;
                margin-left: -25px;
                width: 50px;
                text-align: center;
            }

        .wkIdx {
            user-select: none;
            font-size: 110%;
            color: #007bff;
        }



        .class_row a:nth-child(n+2) {
            display: none;
        }

        .class_row:hover a:nth-child(n+2) {
            display: block;
        }

        .sbjScoreCol {
            /*max-width: 90px;*/
            text-overflow: ellipsis;
            white-space: nowrap;
            overflow: hidden;
            border-left: dashed 1px #dee2e6;
        }

        .item-body {
            padding: 10px;
            display: none;
        }

        .open > .item-body {
            display: block;
        }

        .item-body > div {
            display: inline-block;
        }

        .ls-practice .card-body {
            overflow: visible;
            padding-top: 0;
        }

        .ls-practice .list {
            max-height: none;
            overflow: visible;
        }

        /*.ls-practice .date {
            width: 160px;
            padding: 2px 12px;
        }*/

        .ls-practice .date::after {
            top: 7px;
        }

        .ls-practice .sub-practice .status {
            padding: 10px
        }

        .input-group.date input {
            border: solid 1px #DDD !important;
            padding: 0 5px !important;
            width: 125px;
            border: none;
            padding: 0;
        }

            .input-group.date input:read-only {
                background: #FFF;
            }

            .input-group.date input:focus {
                outline: none !important;
            }

        .sub-practice:hover {
            background: #DDD;
        }

        .chap-item {
            border-bottom: dashed 1px #CCC;
        }

        ul > .chap-item:last-child {
            border-bottom: none;
        }

        .basepoint::placeholder {
            color: #CCC;
        }

        .btn-collapse .fa-arrow-alt-circle-down {
            transform: rotate(90deg);
            font-size: 125%;
        }

        .btn-collapse.collapsed .fa-arrow-alt-circle-down {
            transform: none;
        }

        .chapSelect .lbl {
            white-space: nowrap;
        }

        .chap-item .chap-row {
            position: relative;
        }

            .chap-item .chap-row .row-action {
                position: absolute;
                top: 0;
                right: 0;
                padding: 3px 7px;
                background: #FFF;
            }

                .chap-item .chap-row .row-action .act_ic {
                    display: none;
                }

                .chap-item .chap-row .row-action .indicator {
                    display: block;
                    color: #CCC;
                    font-size: 12px;
                }

                .chap-item .chap-row:hover .row-action .indicator,
                .chap-item .chap-row .row-action.active .indicator {
                    display: none;
                }

                .chap-item .chap-row:hover .row-action .act_ic,
                .chap-item .chap-row .row-action.active .act_ic {
                    display: contents;
                }

        .ic-ac {
            color: #CCC;
            cursor: pointer;
        }

            .ic-ac.active, .ic-ac:hover {
                color: #333;
                cursor: pointer;
            }

        .chap-item .chap-row .chap-info i {
            font-size: 75%;
            font-weight: 500;
            color: #333;
            border-radius: 20px;
            padding: 2px 5px;
        }

            .chap-item .chap-row .chap-info i span {
                font-size: 100%;
                font-family: 'Be Vietnam',sans-serif;
            }

        .ui-tooltip, .arrow:after {
            background: black;
            border: 1px solid white;
        }

        .ui-tooltip {
            padding: 2px 7px 5px;
            color: white;
            border-radius: 10px;
            font: normal 12px 'Be Vietnam',sans-serif;
            box-shadow: none;
        }

        .arrow {
            width: 70px;
            height: 16px;
            overflow: hidden;
            position: absolute;
            left: 50%;
            margin-left: -35px;
            bottom: -16px;
        }

            .arrow.top {
                top: -16px;
                bottom: auto;
            }

            .arrow.left {
                left: 20%;
            }

            .arrow:after {
                content: "";
                position: absolute;
                left: 20px;
                top: -20px;
                width: 25px;
                height: 25px;
                box-shadow: 6px 5px 9px -9px black;
                -webkit-transform: rotate(45deg);
                -ms-transform: rotate(45deg);
                transform: rotate(45deg);
            }

            .arrow.top:after {
                bottom: -20px;
                top: auto;
            }

        .converText {
            mso-number-format: "\@@";
        }

        #table_point tbody td {
            padding: 0px;
        }

        #table_point td, #table_point th {
            padding: 0px
        }

        #table_point thead th {
            border: 0.5px solid gray;
            text-align: center;
            vertical-align: middle
        }

        #table_point tbody td {
            text-align: center;
            border: 0.5px solid gray;
            vertical-align: middle
        }

        /*-----------*/
        .view {
            margin: auto;
            /*width: 600px;*/
        }

        .wrapper {
            position: relative;
            overflow: auto;
            /*border: 1px solid black;*/
            white-space: nowrap;
        }

        .sticky-col {
            position: -webkit-sticky;
            position: sticky;
            background-color: white;
        }

        .first-col {
            width: 30px;
            /*min-width: 30px;
            max-width: 50px;*/
            left: 0px;
        }

        .second-col {
            width: 250px;
            /*min-width: 150px;
            max-width: 300px;*/
            left: 30px;
        }

        .third-col{
            width:50px;
            /*min-width:50px;
            max-width:90px;*/
            left:200px
        }

        .fourth-col {
            width: 50px;
            /*min-width: 50px;
            max-width: 90px;*/
            left: 280px
        }

        /*-----------*/
        .td_hover {
            cursor: pointer
        }

            .td_hover:hover {
                background-color: lightgray;
            }
            @*left: 36px;
        }*@

        .scoretable th, scoretable.td {
            padding: 0 5px;
        }

        .action-cel {
            cursor: pointer;
            background-color: transparent;
        }

            .action-cel:hover {
                background-color: lightgray;
            }

        .color-minpoint8 {
            background-color: #7dcbca
        }

        .color-minpoint5 {
            background-color: #cae9e0
        }

        .color-minpoint2 {
            background-color: #f3d2ac
        }

        .color-minpoint0 {
            background-color: #f3b8b1
        }
        .color-dontwork {
            background-color: #cecbd6
        }

        .noselect {
            -webkit-touch-callout: none; /* iOS Safari */
            -webkit-user-select: none; /* Safari */
            -khtml-user-select: none; /* Konqueror HTML */
            -moz-user-select: none; /* Old versions of Firefox */
            -ms-user-select: none; /* Internet Explorer/Edge */
            user-select: none; /* Non-prefixed version, currently
                                  supported by Chrome, Edge, Opera and Firefox */
        }

        #modal_student .modal-dialog {
            max-width: 1100px;
        }
    </style>

    <script type="text/x-template" id="chapContentTemp">
        <li class="pr-0 ml-3 chap-item">
            <div class="inner pt-2 pb-2">
                <div class="chap-row mt-1" onmouseover="$('.row-action.active').removeClass('active')">
                    <a href="javascript:;" v-b-toggle="`prc-${data.ID}-${pos}`" class="blue-color btn-collapse flex-grow-1 mb-0" v-on:click="loadContent(data.ClassSubject, data.ID)">
                        <div class="align-self-center mb-1" style="line-height:24px">
                            <i class=" ic far fa-folder mr-2"></i>{{data.Title + ' (' + data.TotalLessons +  ')'}}
                            <i class="ic ic-collapse"></i>
                        </div>
                    </a>
                    <div>
                        <div class="d-flex justify-content-between align-items-start align-items-md-center">
                            <div class="chap-info ml-3" style="color:#999; white-space: nowrap">
                                <i class="ti-link" style="background-color: #bee4ef;" v-for="(chap,j) in listchaps" v-if="(data.ConditionChapter != '') && (chap.ID == data.ConditionChapter)"><span class="pl-1">Điều kiện: {{chap.Title}}</span></i>
                                <i class="ti-target ml-2" v-if="data.BasePoint > 0" style="background-color: #ffe38d"><span class="pl-1">Mục tiêu: {{data.BasePoint}}</span></i>
                                <i class="ti-control-play ml-2" style="background-color: #c3e2c3" v-if="moment(data.StartDate) > moment(new Date(1900,1,1))"><span class="pl-1">bắt đầu {{formatTime(data.StartDate)}}</span></i>
                                <i class="ti-timer ml-2" style="background-color: #fbcbcb" v-if="moment(data.EndDate) > moment(new Date(1900,1,1))"><span class="pl-1">hết hạn {{formatTime(data.EndDate)}}</span></i>
                            </div>

                            <div class="row-action d-flex align-items-start align-items-md-center" v-if="@(currentClass.Members.Any(t=> t.TeacherID == currentuser && t.Type == BaseCustomerEntity.Database.ClassMemberType.TEACHER) ? "1==1":"1==0")">
                                <i class="fas fa-ellipsis-h indicator"></i>
                                <template v-if="type != 'exam'">
                                    <div class="act_ic">
                                        <i class="ic-ac fas fa-link ml-2" style="font-size:16px;" title="Chọn nội dung điều kiện" onclick='$(".row-action").removeClass("active");$(this).closest(".row-action").addClass("active");$(this).siblings().focus().click()'></i>
                                        <select v-model="data.ConditionChapter" style="max-width:200px; font-size:90%; height: 24px; margin:2px; display:none" v-on:change="updateChapCondition(data)" onblur="$(this).hide()" onfocus="$(this).show()">
                                            <option value="">-- Chọn nội dung điều kiện (nếu có) --</option>
                                            <template v-for="(chap,j) in listchaps" v-if="(chap.ID != data.ID && chap.Parent == data.Parent) || (chap.ID == data.ConditionChapter)">
                                                <option :value='chap.ID'>{{chap.Title}}</option>
                                            </template>
                                        </select>
                                    </div>
                                    <div class="act_ic">
                                        <i class="ic-ac far fa-play-circle ml-2" style="font-size:18px;" title="Chọn ngày bắt đầu" onclick='$(".row-action").removeClass("active");$(this).closest(".row-action").addClass("active");$(this).siblings().find("input").focus().click()'></i>
                                        <datepickerV2 :date="data.StartDate" :idx="0" :obj="data" class="st" v-on:input="updateChapSchedule(data, pos)"></datepickerV2>
                                    </div>
                                    <div class="act_ic">
                                        <i class="ic-ac far fa-stop-circle ml-2" style="font-size:18px;" title="Chọn ngày hết hạn" onclick='$(".row-action").removeClass("active");$(this).closest(".row-action").addClass("active");$(this).siblings().find("input").focus().click()'></i>
                                        <datepickerV2 :date="data.EndDate" :idx="1" :obj="data" v-on:input="updateChapSchedule(data, pos)"></datepickerV2>
                                    </div>
                                    <div class="act_ic">
                                        <i class="ic-ac fas fa-eye-slash ml-2" v-bind:class="{active: data.IsHideAnswer == true}" style="font-size:16px;" title="Bật / tắt ẩn đáp án" data-toggle="tooltip" v-on:click="toggleChapterHideAnswer(data)"></i>
                                    </div>
                                    <div class="act_ic">
                                        <i class="ic-ac far fa-dot-circle ml-2" style="font-size:18px;" title="Đặt mục tiêu" onclick='$(".row-action").removeClass("active");$(this).closest(".row-action").addClass("active");$(this).siblings().focus().click()'></i>
                                        <input type="text" class="form-control bg-light text-right basepoint" style="margin: 0 3px;padding: 2px; width: 52px; height:24px; display:none;" onblur="$(this).hide()" onfocus="$(this).show()" v-model="data.BasePoint" placeholder="0-100" v-on:blur="updateChapPoint(data)">
                                    </div>
                                </template>
                                <div class="act_ic">
                                    <i class="ic-ac fas fa-redo ml-2" style="font-size:16px;" title="Xóa lịch" v-on:click="resetChap(data, pos)"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                <b-collapse :id="`prc-${data.ID}-${pos}`" :accordion="`my-accordion-${data.Parent}`" role="tabpanel">
                    <b-card-body class="pr-0 pb-1 ">
                        <ul class="list">
                            <template v-if="data.IsLoading">
                                <li><i class=""></i> Đang nạp dữ liệu</li>
                            </template>
                            <template v-else>
                                <chap-content v-for="(subItem,j) in listchaps" v-if="subItem.ClassSubject + '-' + subItem.Parent == classbj + '-' + data.ID"
                                              v-bind:data="subItem"
                                              v-bind:classbj="classbj"
                                              v-bind:pos="j"
                                              v-bind:owner="owner"
                                              v-bind:listchaps="listchaps"
                                              v-bind:type="type"
                                              v-bind:group="group"></chap-content>
                                <lesson-item v-for="lesson in filterLesson(data)"
                                             v-bind:data="lesson"
                                             v-bind:owner="owner"
                                             v-bind:classSubject="data.ClassSubject"
                                             v-bind:type="type"
                                             v-bind:group="group"></lesson-item>
                            </template>
                        </ul>
                    </b-card-body>
                </b-collapse>
            </div>
        </li>
    </script>

    <script type="text/x-template" id="lessonItemTemp">
        <li class="sub-practice pt-2 pb-1 pl-2 rounded">
            <div class="d-flex w-100 flex-column flex-md-row align-items-start align-items-md-center">
                <a :href="'@processUrl("Detail", "Lesson")/' + data.ID + '/' + data.ClassSubject" class="flex-grow-1 overflow-hidden text-dark" style="text-overflow: ellipsis" :title="data.Title">
                    <template v-if="data.TemplateType === 2">
                        <span class="text-danger">
                            <i class="ic far fa-edit mr-2"></i>
                            {{data.Title}}
                        </span>
                    </template>
                    <template v-else>
                        <span>
                            <i class="ic far fa-file-alt mr-2"></i>
                            {{data.Title}}
                        </span>
                    </template>
                </a>
                @*<div class="picker-schedule d-flex align-items-center" v-if="owner == '@currentuser' || @(currentClass.Members.Any(t=> t.TeacherID == currentuser && t.Type == BaseCustomerEntity.Database.ClassMemberType.TEACHER) ? "1==1":"1==0")">*@
                <div class="picker-schedule d-flex align-items-center" v-if="@(currentClass.Members.Any(t=> t.TeacherID == currentuser && t.Type == BaseCustomerEntity.Database.ClassMemberType.TEACHER) ? "1==1":"1==0")">
                    <template v-if="group != null && group.length > 0">
                        <select v-on:change="chooseGroup(data)" v-model="data.GroupID" class="form-control mr-2" style="max-width:100px">
                            <option value="">Cả lớp</option>
                            <option v-for="grp in group" :value="grp.ID">
                                {{grp.Name}}
                            </option>
                        </select>
                    </template>

                    <datepicker :date="data.StartDate" :idx="0" :obj="data" class="date st mr-2" v-on:input="updateSchedule(data)"></datepicker>
                    <datepicker :date="data.EndDate" :idx="1" :obj="data" class="date ed mr-2 ml-0" v-on:input="updateSchedule(data)"></datepicker>
                    <i class="fas fa-redo ic-ac d-flex align-items-center mr-2" title="Xóa lịch học" v-on:click="clearSchedule(data)"></i>
                    <template v-if="type != 'exam'">
                        <i class="far fa-eye-slash ic-ac d-flex align-items-center mr-2" v-bind:class="{active: data.IsHideAnswer == true}" title="Bật/ tắt ẩn đáp án" data-toggle="tooltip" v-on:click="toggleHideAnswer(data)"></i>
                        <i class="fas fa-desktop ic-ac d-flex align-items-center mr-2" v-bind:class="{active: data.IsOnline == true}" title="Bật/ tắt học trực tuyến" data-toggle="tooltip" v-on:click="toggleOnlineClass(data)"></i>
                    </template>
                </div>
                <div class="d-flex picker-schedule" v-else>
                    <template v-if="group != null && group.length > 0">
                        <select v-model="data.GroupID" class="form-control mr-2" style="max-width:100px" disabled>
                            <option value="">Cả lớp</option>
                            <option v-for="grp in group" :value="grp.ID">
                                {{grp.Name}}
                            </option>
                        </select>
                    </template>
                    <div class="input-group date date st bg-light mr-2"><input type="text" class="form-control bg-light noselect" disabled="disabled" :value="formatTime(data.StartDate)"></div>
                    <div class="input-group date date ed bg-light mr-2"><input type="text" class="form-control bg-light noselect" disabled="disabled" :value="formatTime(data.EndDate)"></div>
                    <template v-if="type != 'exam'">
                        <i class="far fa-eye-slash ic-ac d-flex align-items-center ml-2 noselect" v-bind:class="{active: data.IsHideAnswer == true}"></i>
                        <i class="fas fa-desktop ic-ac d-flex align-items-center ml-2 noselect" v-bind:class="{active: data.IsOnline == true}"></i>
                    </template>
                </div>
                @*<div class="status" v-if="owner == '@currentuser'">
                        <b-form-checkbox switch v-model="data.IsActive" v-on:change="toggleLessonState(data)"></b-form-checkbox>
                    </div>*@
            </div>
        </li>
    </script>

    <script type="text/x-template" id="chapResultTemp">
        <li class="pr-0 ml-3 chap-item">
            <div class="inner pt-2 pb-2">
                <div class="d-flex flex-column flex-md-row align-items-start align-items-md-center">
                    <a href="javascript:;" v-b-toggle="`prc-result-${data.ID}-${pos}`" class="blue-color btn-collapse flex-grow-1 mb-0" v-on:click="loadResult(data.ClassSubject, data.ID)">
                        <span class="align-self-center" style="line-height:24px;"><i class=" ic far fa-folder mr-2"></i>{{data.Title + ' (' + data.TotalLessons +  ')'}}<i class="ic ic-collapse"></i></span>
                    </a>
                </div>
                <b-collapse :id="`prc-result-${data.ID}-${pos}`" :accordion="`my-accordion-result-${data.Parent}`" role="tabpanel">
                    <b-card-body class="pr-0">
                        <ul class="list">
                            <template v-if="data.IsLoading">
                                <li><i class=""></i> Đang nạp dữ liệu</li>
                            </template>
                            <template v-else>
                                <chap-result v-for="(subItem,j) in listchaps" v-if="subItem.ClassSubject + '-' + subItem.Parent == classbj + '-' + data.ID"
                                             v-bind:data="subItem"
                                             v-bind:classbj="classbj"
                                             v-bind:pos="j"
                                             v-bind:owner="owner"
                                             v-bind:listchaps="listchaps"></chap-result>

                                <li class="sub-practice pt-2 pb-2 pl-2 rounded" v-if="filterResult(data).length > 0">
                                    <div class="d-flex w-100 flex-column flex-md-row align-items-start align-items-md-center font-weight-bold">
                                        <span class="flex-grow-1 overflow-hidden text-dark" style="text-overflow: ellipsis">
                                            Tên bài
                                        </span>
                                        <div class="flex-column col-3">
                                            Tỉ lệ mở
                                        </div>
                                        <div class="flex-column col-3">
                                            Tỉ lệ làm bài
                                        </div>
                                    </div>
                                </li>
                                <lesson-result v-for="lesson in filterResult(data)" v-bind:data="lesson" v-bind:classSubject="data.ClassSubject"></lesson-result>
                            </template>
                        </ul>
                    </b-card-body>
                </b-collapse>
            </div>
        </li>
    </script>

    <script type="text/x-template" id="lessonResultTemp">
        <li class="sub-practice pt-2 pb-2 pl-2 rounded">
            <div class="d-flex w-100 flex-column flex-md-row align-items-start align-items-md-center" v-on:click="openLessonResult(data)">
                <a class="flex-grow-1 overflow-hidden text-dark" style="text-overflow: ellipsis" :title="data.Title">
                    <span>
                        <i v-if="data.TemplateType === 2" class="ic far fa-edit mr-2"></i>
                        <i v-else class="ic far fa-file-alt mr-2"></i>
                        {{data.Title}}
                    </span>
                </a>
                <div class="flex-column col-3">
                    <span>
                        Tỉ lệ mở
                    </span>
                    <div class="progress m-0 p-0" style="height:1.5rem; font-size:110%;">
                        @if (currentClass.TotalStudents > 0)
                        {
                            @:<div class="progress-bar bg-success progress-bar-striped" role="progressbar" :aria-valuenow="data.LearntCount"
                                    @: aria-valuemin="0" aria-valuemax="@currentClass.TotalStudents" :class="(data.LearntCount > 0) ? 'text-white':'text-dark'"
                                    @: :style="'width:' + (data.LearntCount*100/@currentClass.TotalStudents) + '%'">
                                @:    <span>{{data.LearntCount}}/@currentClass.TotalStudents</span>
                            @:</div>
                        }
                    </div>
                </div>
                <div class="flex-column col-3">
                    <span>
                        Tỉ lệ làm bài
                    </span>
                    <div class="progress m-0 p-0" style="height:1.5rem; font-size:110%;">
                        @if (currentClass.TotalStudents > 0)
                        {
                            @:<div class="progress-bar bg-info progress-bar-striped" role="progressbar" :aria-valuenow="data.ExamCount"
                                    @: aria-valuemin="0" aria-valuemax="@currentClass.TotalStudents" :class="(data.ExamCount > 0) ? 'text-white':'text-dark'"
                                    @: :style="'width:' + (data.ExamCount*100/@currentClass.TotalStudents) + '%'">
                                @:    <span>{{data.ExamCount}}/@currentClass.TotalStudents</span>
                            @:</div>
                        }
                    </div>
                </div>
            </div>
        </li>
    </script>

    <script>
        Vue.use(VueQuillEditor)

        Vue.component('chap-content', {
            template: '#chapContentTemp',
            props: {
                listchaps: Array,
				classbj: String,
                lessons: Array,
                data: Object,
                pos: String,
                owner: String,
                type: String,
                group: Object
            }
        })

        Vue.component('lesson-item', {
            template: '#lessonItemTemp',
            props: {
                data: Object,
                classSubject: String,
                owner: String,
                type: String,
                group: Object
            }
        })

        Vue.component('chap-result', {
            template: '#chapResultTemp',
            props: {
                listchaps: Array,
                classbj: String,
                lessons: Array,
                data: Object,
                pos: String,
                owner: String,
            }
        })

        Vue.component('lesson-result', {
            template: '#lessonResultTemp',
            props: {
                data: Object,
                classSubject: String,
                owner: String
            }
        })

        var datepickerComponent = Vue.extend({
          //v-el:select
          template: `<div class="input-group date" ref="inputgroup">` +
            `<input type="text" class="form-control" v-model="dateVal" readonly="readonly" style="font-size:95%">` +
            `</div>`,
            props: {
                obj: '',
                idx: '0',
                date: '2015-01-01'
            },
            data: function () {
                return {};
            },
            computed:
            {
                dateVal: {
                    get() {
                        //var _date = moment(this.date);

                        //if (!_date._isValid || _date <= moment(new Date(1900, 1, 1)))
                        //    return '';
                        //return _date.format("DD/MM/YYYY HH:mm");
                        return formatTime(this.date);
                    },
                    set(value) {
                        var _date = moment(value, "DD/MM/YYYY HH:mm");
                        if (_date._isValid)
                            this.date = _date.format();
                        else
                            this.date = '';
                    }
                }
            },
            mounted: function () {
                let _that = this
                Vue.nextTick(function () {
                    //console.log($(_that.$refs.inputgroup))
                    $($(_that.$refs.inputgroup).find('input')).datetimepicker({
                        formatTime: 'H:i',
                        formatDate: 'd/m/Y',
                        timepickerScrollbar: true,
                        scrollMonth: false,
                        defaultTime: '08:00',
                        step: 15,
                        onChangeDateTime: function (dp, $input) {
                            //console.log($input.val())
                            _that.dateVal = $input.val()
                            if (moment($input.val(),"DD/MM/YYYY HH:mm").format() == "Invalid date") {
                                //console.log('false');
                                return false;
                            }

                            if (_that.idx == '0') {
                                if (_that.obj.StartDate != _that.date) {
                                    _that.obj.StartDate = _that.date
                                    //console.log(_that.obj.StartDate + ' _ ' + _that.obj.EndDate)
                                    _that.$emit('input')
                                }
                            }
                            else {
                                if (_that.obj.EndDate != _that.date) {
                                    _that.obj.EndDate = _that.date
                                    //console.log(_that.obj.StartDate + ' _ ' + _that.obj.EndDate)
                                    _that.$emit('input')
                                }
                            }
                        }
                    })
                })
            }
        })

        var datepickerComponentV2 = Vue.extend({
            //v-el:select
            template: `<div class="date" ref="inputgroup">` +
                `<input type="text" v-model="dateVal" readonly="readonly" style="width:0px;height:0px; border:none !important; outline:none !important">` +
                `</div>`,
            props: {
                obj: '',
                idx: '0',
                date: '2015-01-01'
            },
            data: function () {
                return {};
            },
            computed:
            {
                dateVal: {
                    get() {
                        //var _date = moment(this.date);

                        //if (!_date._isValid || _date <= moment(new Date(1900, 1, 1)))
                        //    return '';
                        //return _date.format("DD/MM/YYYY HH:mm");
                        return formatTime(this.date);
                    },
                    set(value) {
                        var _date = moment(value, "DD/MM/YYYY HH:mm");
                        if (_date._isValid)
                            this.date = _date.format();
                        else
                            this.date = '';
                    }
                }
            },
            mounted: function () {
                let _that = this
                Vue.nextTick(function () {
                    //console.log($(_that.$refs.inputgroup))
                    $($(_that.$refs.inputgroup).find('input')).datetimepicker({
                        formatTime: 'H:i',
                        formatDate: 'd/m/Y',
                        timepickerScrollbar: true,
                        scrollMonth: false,
                        defaultTime: '08:00',
                        step: 15,
                        onChangeDateTime: function (dp, $input) {
                            //console.log($input.val())
                            _that.dateVal = $input.val()
                            if (moment($input.val(), "DD/MM/YYYY HH:mm").format() == "Invalid date") {
                                //console.log('false');
                                return false;
                            }

                            if (_that.idx == '0') {
                                if (_that.obj.StartDate != _that.date) {
                                    _that.obj.StartDate = _that.date
                                    //console.log(_that.obj.StartDate + ' _ ' + _that.obj.EndDate)
                                    _that.$emit('input')
                                }
                            }
                            else {
                                if (_that.obj.EndDate != _that.date) {
                                    _that.obj.EndDate = _that.date
                                    //console.log(_that.obj.StartDate + ' _ ' + _that.obj.EndDate)
                                    _that.$emit('input')
                                }
                            }
                        }
                    })
                })
            }
        })

        Vue.component('datepicker', datepickerComponent);
        Vue.component('datepickerV2', datepickerComponentV2);

        var mainInstance = new Vue({
            el: "#main_content",
            mounted() {
                this.list_subject = @Html.Raw(Json.Serialize(listsubjects));
                this.list_grades_full = @Html.Raw(Json.Serialize(listgrades));
                window.loadContent = this.loadContent
                window.loadResult = this.loadResult
                window.updateSchedule = this.updateSchedule
                window.chooseGroup = this.chooseGroup
                window.updateChapPoint = this.updateChapPoint
                window.updateChapSchedule = this.updateChapSchedule
                window.updateSubchapSchedule = this.updateSubchapSchedule
                window.updateChapCondition = this.updateChapCondition
                window.clearSchedule = this.clearSchedule
                window.resetChap = this.resetChap
                //window.toggleLessonState = this.toggleLessonState
                window.toggleOnlineClass = this.toggleOnlineClass
                window.toggleHideAnswer = this.toggleHideAnswer
                window.toggleChapterHideAnswer = this.toggleChapterHideAnswer
                window.filterChap = this.filterChap
                window.filterLesson = this.filterLesson
                window.filterResult = this.filterResult
                window.openLessonResult = this.openLessonResult
                window.formatTime = this.formatTime
                window.openHistory = this.openHistory

                window.getWeekLesson = this.getWeekLesson
                $('.main-route').scrollLeft($(".route_item").index($('.route_item.now')) * 100 - 400);
                console.log($(".route_item").index($('.route_item.now')) * 100);
                var hash = window.location.hash;
                if (hash.startsWith('#')) {
                    var hash = hash.split('#')[1];
                    switch (hash) {
                        case 'info':
                            this.tabChange(0);
                            break;
                        case 'module':
                            this.tabChange(1);
                            break;
                        case 'score':
                            this.tabChange(2);
                            break;
                        case 'group':
                            this.tabChange(3);
                            break;
                        case 'result':
                            this.tabChange(4);
                            break;
                        case 'mark':
                            this.tabChange(5);
                            break;
                    }
                }
                else {
                    this.tabChange(1);
                };
                //this.loadLessonToMark();
            },
            components: {
                LocalQuillEditor: VueQuillEditor.quillEditor
            },
            data: {
                isLoading: false,
                editorOption: {
                    theme: 'snow'
                },
                searchCsbj: '',
                classID: '@currentClass.ID',
                className: "@Html.Raw(currentClass.Name.Replace("'","\'"))",
                startDate: '@currentClass.StartDate.ToLocalTime().ToString("yyyy-MM-dd")',
                padRoute: @(currentClass.StartDate.ToLocalTime().DayOfWeek -  DayOfWeek.Monday),
                endDate: '@currentClass.EndDate.ToLocalTime().ToString("yyyy-MM-dd")',
                period: @((currentClass.EndDate - currentClass.StartDate).TotalDays),
                classDescription: '@currentClass.Description',
                classImg: '@currentClass.Image',
                subjectName: '@currentClass.SubjectName',
                skillName: '@currentClass.SkillName',
                classSubjects: [],
                list_data: [],
                list_subjects: [],
                list_chapters: [],
                list_chapters_result: [],
                list_lessons: [],
                list_students: [],
                list_lessons_result: [],
                loaded_chapter: [],
                loaded_chapter_result: [],
                loaded_subject: [],
                loaded_subject_result: [],
                result_data: [],
                lesson_week: [],
                weekTitle: '',
                init: true,
                fields: [
                    {
                        key: 'stt',
                        label: '#'
                    },
                    {
                        key: 'name',
                        label: 'Họ tên'
                    },
                    {
                        key: 'per',
                        label: 'Tiến độ'
                    },
                    {
                        key: 'last_update',
                        label: 'Lần học cuối'
                    },
                    {
                        key: 'practice',
                        label: 'Điểm luyện tập'
                    },
                    {
                        key: 'score',
                        label: 'Điểm kiểm tra'
                    },
                    {
                        key: 'rank',
                        label: 'Xếp hạng'
                    }
                ],
                scoreData: [],
                scoreSbjChap: [],
                scoreSbjStudent: [],
                //view: 10,
                //page: 1,
                tab: [true, false, false, false, false, false],
                ref: {
                    range: '@BaseCustomerEntity.Database.REF_RANGE.CLASS',
                    target: '@currentClass.ID',
                    searchTerm: '',
                    data: [],
                    view: 10,
                    page: 1,
                    gradeID: '',
                    subjectID: '',
                },
                addRef: {
                    ID: '',
                    Title: '',
                    Range: '',
                    Link: '',
                    Target: '',
                    Description: '',
                    FileName: '',
                    file: null,
                    coverName: '',
                    cover: null,
                    Image: '',
                    subjectID: '',
                    gradeID: '',
                    isDownload: false,
                    tags: '',
                    isCheckDownload: false
                },
                filterChap: {
                    TargetChaps: [],
                    SelectAll: false
                },
                checkpoint: {
                    ID: '',
                    Point: '',
                    Answer: ''
                },
                lesson_result: {
                    ID: '',
                    Title: ''
                },
                student_result: {
                    ID: '',
                    Name: '',
                    History: []
                },

                linkFile: '',
                typeFile: [
                    "application/msword",
                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "application/vnd.ms-excel",
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "application/pdf",
                    "application/vnd.ms-powerpoint",
                    "application/vnd.openxmlformats-officedocument.presentationml.presentation"
                ],
                allow_doc_ext: [".doc", ".docx", ".xlsx", ".xls", ".ptt", "pttx", ".pdf"],
                list_subject: [],
                list_grades_full: [],
                displaySelect: false,
                searchPoint: '',
                displaySelectTime: false,
                searchwidthTime: {
                    startTime: moment(String(new Date())).format('YYYY-MM-DD'),
                    endTime: moment(String(new Date())).format('YYYY-MM-DD'),
                },
                table: [true, false],
                fieldsTime: [],
                studentSummary: {
                    studentID: '',
                    studentName: '',
                    className: '',
                    avgPointPractice: '',
                    avgPointExam:'',
                    result: [],
                    dataPractice: [],
                    dataExam:[]
                },
                studentSummarySbj: [],
                progessSbj: {
                    title: '',
                    startTime: '',
                    endTime:'',
                    data:[]
                },
                detailProgessLesson: {
                    isShow: false,
                    title:'',
                    data: [],
                    dataLesson:[]
                },
                lessonToMark: {
                    data: [],
                    dataDetail: [],
                    courseName: '',
                    title: '',
                    list_chapters:[]
                },
                //group
                //groupList: [],
                group_student: [],
                group_data: [],
                group_info: {},
                student_data: [],
                student_init: false,
                group_view_mode: 0,
                //
                isExam: false,
                exam: {
                    name: '',
                    timer: 0,
                    limit: 0,
                    etype: 0,
                    startTime: '',
                    endTime: '',
                    listClassSubject: [],
                    listNameClassSubject: '',
                    totalpart:''
                }
            },
            watch: {
                "ref.subjectID": function () {
                        this.loadPreference()
                },
                "ref.gradeID": function () {
                    this.loadPreference()
                },
                searchCsbj: function () {
                    this.loadClassScore()
                    this.filterChap.TargetChaps = []
                    this.filterChap.SelectAll = false;
                    if (this.searchCsbj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM) {
                        this.isExam = true
                    }
                    else this.isExam = false
                },
                "searchPoint": function () {
                    if (this.searchPoint == 0) {
                        if (this.displaySelectTime) {
                            this.displaySelectTime = !this.displaySelectTime;
                        }
                        this.loadClassScore();
                    }
                    else if (this.searchPoint == 1) {
                        if (this.displaySelectTime) {
                            this.displaySelectTime = !this.displaySelectTime;
                        }
                        this.loadClassScore();
                    }
                    else if (this.searchPoint == 2) {
                        this.displaySelectTime = !this.displaySelectTime;
                    }
                },
                "exam.listClassSubject": function () {
                    var data = this.exam.listClassSubject
                    //debugger
                    if (data != null) {
                        this.exam.listNameClassSubject = ''
                        for (i = 0; i < this.exam.listClassSubject.length; i++) {
                            for (j = 0; j < data.length; j++) {
                                //if (this.classSubjects[j].ID == this.exam.listClassSubject[i]) {
                                //    this.exam.listNameClassSubject += this.classSubjects[j].CourseName + '; '
                                //}
                                var csbj = this.classSubjects.find(x => x.ID == this.exam.listClassSubject[i])
                                if (csbj != null) {
                                    this.exam.listNameClassSubject += csbj.CourseName + '; '
                                }
                            }
                        }
                    }
                }
            },
            methods: {
                tabChange(a = 0) {
                    // có thể load data theo từng tab để tối ưu hiệu năng
                    // this.getData()
                    let _that = this
                    _that.tab.forEach(function (item, k) {
                        _that.tab[k] = false;
                    })
                    this.tab = _that.tab
                    this.tab[a] = true
                    switch (a) {
                        case 0:
                            history.replaceState({ tab: a }, this.className + " - Tổng quan", "#info");
                            break;
                        case 1:
                            history.replaceState({ tab: a }, this.className + " - Môn học", "#module");
                            this.loadClassSubjects();
                            this.loadGroup();
                            break;
                        case 2:
                            history.replaceState({ tab: a }, this.className + " - Bảng điểm", "#score");
                            this.loadClassSubjects();
                            this.loadClassScore();
                            this.loadGroup();
                            break;
                        case 3:
                            history.replaceState({ tab: a }, this.className + " - Nhóm học sinh", "#group");
                            this.loadGroup();
                            break;
                        case 4:
                            history.replaceState({ tab: a }, this.className + " - Kết quả", "#result");
                            this.loadClassSubjects();
                        case 5:
                            history.replaceState({ tab: a }, this.className + " - Chấm bài tự luận", "#mark");
                            //debugger
                            this.loadLessonToMark();
                            break;
                    }
                    this.$forceUpdate()
                },
                tableChange(a = 0) {
                    let _that = this
                    _that.table.forEach(function (item, k) {
                        _that.table[k] = false;
                    })
                    this.table = _that.table
                    this.table[a] = true
                },
                loadClassSubjects() {
                    let _that = this
                    if (_that.classSubjects.length > 0)
                        return;
                    _that.init = false;
                    let _form = new FormData()
                    _form.append('ClassID', _that.classID)
                    let _url = '@processUrl("GetClassSubjects", "ClassSubject")'
                    axios.post(_url, _form)
                        .then(response => {
                            var _data = response.data.Data;
                            _that.classSubjects = [];
                            _data.forEach(function (item, k) {
                                //debugger
                                _that.classSubjects.push({
                                    ID: item.ID,
                                    Title: item.SkillName,
                                    Image: item.SkillImage,
                                    Teacher: item.TeacherName,
                                    TeacherID: item.TeacherID,
                                    CourseName: item.CourseName,
                                    Color: item.Color,
                                    Chapters: [],
                                    Lessons: [],
                                    TypeClass: item.TypeClass,
                                    HasLessonActive: item.HasLessonActive
                                });
                                if (item.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM)
                                    loadContent(item.ID);
                            })

                            _that.init = true;
                        }).catch(e => { });
                },
                loadContent(subject, chapter) {

                    let _that = this
                    let key = subject + "_" + chapter
                    if (_that.loaded_chapter.includes(key))
                        return;
                    let _form = new FormData()
                    _form.append('ID', subject)
                    if (chapter)
                        _form.append('Parent', chapter)
                    let _url = '@processUrl("GetContents", "ClassSubject")'
                    axios.post(_url, _form)
                        .then(response => {
                            var _data = response.data.Data;
                            var _lesson = response.data.Lesson;
                            //_that.classSubjects.forEach(function (item, k)
                            //{
                            //    if (item.ID == subject) {
                            _data.forEach(function (chapter, k) {
                                var parent = chapter.ParentID;
                                if (parent == "0") { parent = ""; }
                                //var pr = _that.list_chapters.filter(t => t.ID == parent)[0];
                                //var prline = [];
                                //if (pr != null)
                                //    prline = pr.ParentLine.slice();
                                //prline.push(chapter.ID);
                                //console.log(prline);
                                _that.list_chapters.push({
                                    ID: chapter.ID,
                                    Title: chapter.Name,
                                    ClassSubject: subject,
                                    Parent: parent,
                                    //ParentLine: prline,
                                    TotalLessons: chapter.TotalLessons,
                                    StartDate: chapter.StartDate,
                                    EndDate: chapter.EndDate,
                                    BasePoint: chapter.BasePoint,
                                    IsHideAnswer: chapter.IsHideAnswer,
                                    ConditionChapter: chapter.ConditionChapter == null ? '' : chapter.ConditionChapter
                                })
                            })
                            _lesson.forEach(function (lesson, k) {
                                this.list_lessons = []
                                var parent = '';
                                if (lesson.ChapterID) {
                                    parent = lesson.ChapterID;
                                }

                                _that.list_lessons.push({
                                    ID: lesson.ID,
                                    ScheduleID: lesson.ID,
                                    Title: lesson.Title,
                                    TemplateType: lesson.TemplateType,
                                    ClassSubject: subject,
                                    Parent: parent,
                                    StartDate: moment(lesson.StartDate) > moment(new Date(1900, 1, 1)) ? lesson.StartDate : "",
                                    EndDate: moment(lesson.EndDate) > moment(new Date(1900, 1, 1)) ? lesson.EndDate : "",
                                    IsActive: lesson.IsActive,
                                    IsUpdating: false,
                                    IsOnline: lesson.IsOnline,
                                    IsHideAnswer: lesson.IsHideAnswer,
                                    GroupID: lesson.GroupIDs != null && lesson.GroupIDs.length > 0? lesson.GroupIDs[0] : ""
                                })

                            })
                            this.loaded_chapter.push(key);
                            this.list_chapters = _that.list_chapters
                            this.list_lessons = _that.list_lessons
                            //_that.$forceUpdate()
                            Vue.nextTick(function () {
                                //console.log($('.ls-practice [for=' + subject + ']'));
                                this.toggleTooltips($('.ls-practice [for=' + subject + ']'));
                            })
                        }).catch(e => { })
                },
                loadResult(subject, chapter) {
                    let _that = this
                    let key = subject + "_" + chapter
                    if (_that.loaded_chapter_result.includes(key))
                        return;
                    let _form = new FormData()
                    _form.append('ID', subject)
                    if (chapter)
                        _form.append('Parent', chapter)
                    let _url = '@processUrl("GetResults", "ClassSubject")'
                    axios.post(_url, _form)
                        .then(response => {
                            var _data = response.data.Data;
                            var _lesson = response.data.Lesson;
                            _data.forEach(function (chapter, k) {
                                var parent = chapter.ParentID;
                                if (parent == "0") { parent = ""; }
                                //var pr = _that.list_chapters.filter(t => t.ID == parent)[0];
                                //var prline = [];
                                //if (pr != null)
                                //    prline = pr.ParentLine.slice();
                                //prline.push(chapter.ID);
                                //console.log(prline);
                                _that.list_chapters_result.push({
                                    ID: chapter.ID,
                                    Title: chapter.Name,
                                    ClassSubject: subject,
                                    Parent: parent,
                                    //ParentLine: prline,
                                    TotalLessons: chapter.TotalLessons,
                                    StartDate: chapter.StartDate,
                                    EndDate: chapter.EndDate,
                                    BasePoint: chapter.BasePoint,
                                    ConditionChapter: chapter.ConditionChapter == null ? '' : chapter.ConditionChapter
                                })
                            })
                            _lesson.forEach(function (lesson, k) {
                                var parent = '';
                                if (lesson.ChapterID) {
                                    parent = lesson.ChapterID;
                                }

                                _that.list_lessons_result.push({
                                    ID: lesson.ID,
                                    ScheduleID: lesson.ID,
                                    Title: lesson.Title,
                                    TemplateType: lesson.TemplateType,
                                    ClassSubject: subject,
                                    Parent: parent,
                                    StartDate: moment(lesson.StartDate) > moment(new Date(1900, 1, 1)) ? lesson.StartDate : "",
                                    EndDate: moment(lesson.EndDate) > moment(new Date(1900, 1, 1)) ? lesson.EndDate : "",
                                    IsActive: lesson.IsActive,
                                    IsUpdating: false,
                                    IsOnline: lesson.IsOnline,
                                    LearntCount: lesson.LearntCount,
                                    ExamCount: lesson.ExamCount
                                })

                            })
                            this.loaded_chapter_result.push(key);
                            this.list_chapters_result = _that.list_chapters_result
                            this.list_lessons_result = _that.list_lessons_result
                            //_that.$forceUpdate()
                        }).catch(e => { })
                    //console.log(this.list_lessons_result);
                },
                loadClassScore(isFillter = 0) {
                    let _that = this
                    let _form = new FormData()

                    if (this.searchCsbj == '' || this.searchCsbj == 1) {
                        this.tableChange(0);
                        _form.append('ClassID', _that.classID)
                        _form.append('PageSize', 1000)
                        _form.append('PageIndex', 1)
                        let _url = '@processUrl("GetClassResult", "Class")'
                        axios.post(_url, _form)
                            .then(response => {
                                _that.scoreData = response.data.Data;
                                this.scoreData = _that.scoreData
                                this.totalRec = response.data.Model.totalRecord
                            }).catch(e => { })
                    @*}
                    else if (this.searchCsbj == 1) {
                        this.tableChange(0);
                        _form.append('ClassID', _that.classID)
                        _form.append('PageSize', 1000)
                        _form.append('PageIndex', 1)
                        let _url = '@processUrl("GetClassResult", "Class")'
                        axios.post(_url, _form)
                            .then(response => {
                                _that.scoreData = response.data.Data;
                                this.scoreData = _that.scoreData
                                this.totalRec = response.data.Model.totalRecord
                            }).catch(e => { })*@
                    }
                    else {
                        this.tableChange(1);
                        _form.append('ClassSubjectID', this.searchCsbj.ID)
                        _form.append('PageSize', 1000)
                        _form.append('PageIndex', 1)
                        let _url = '@processUrl("GetClassSubjectResult", "Class")'
                        this.isLoading = true
                        axios.post(_url, _form)
                            .then(response => {
                                this.isLoading = false
                                this.fieldsTime = response.data.DataTime
                                this.list_students = response.data.ListStudent;
                                //debugger
                                this.studentSummarySbj = response.data.DataStudent
                                //debugger
                                //if (response.data.Error) {
                                    this.isLoading = false
                                    //alert(response.data.Error)
                                //}
                                //debugger
                                //_that.scoreSbjChap = response.data.Chapter;
                                //_that.scoreSbjStudent = response.data.Student;
                                //var result = response.data.Result;
                                //if (_that.scoreSbjChap.length > 0) {
                                //    for (i = 0; i < _that.scoreSbjChap.length; i++) {
                                //        if(i < 2) this.filterChap.TargetChaps.push(_that.scoreSbjChap[i].ID);
                                //        if (result != null)
                                //            _that.scoreSbjChap[i].Result = result[i];
                                //    }
                                //    if(_that.scoreSbjChap.length <= 2)
                                //        this.filterChap.SelectAll = true;
                                //}
                                //this.scoreSbjChap = _that.scoreSbjChap
                                //this.scoreSbjStudent = _that.scoreSbjStudent
                                //this.totalRec = response.data.Model.totalRecord
                                //var tt = response.data.Model.totalRecord;
                                //this.max_page = Math.floor(tt / this.view) + (tt % this.view > 0 ? 1 : 0);
                            }).catch(e => { this.isLoading = false })
                    }
                },
                loadPreference() {
                    //console.log(4)
                    let _that = this
                    let _form = new FormData()
                    _form.append('SearchText', "")
                    _form.append('Target', _that.ref.target)
                    _form.append('PageSize', _that.ref.view)
                    _form.append('PageIndex', _that.ref.page)
                    _form.append('SubjectID', _that.ref.subjectID)
                    _form.append('GradeID', _that.ref.gradeID)
                    let _url = '@processUrl("GetClassList", "Reference")'

                    axios.post(_url, _form)
                        .then(response => {
                            _that.ref.data = response.data.Data;
                            this.ref.data = _that.ref.data
                            this.ref.totalRec = response.data.Model.totalRecord
                            //console.log(totalRec)
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = tt / this.view + (tt % this.view > 0 ? 1 : 0);
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },
                loadExamStudent() {
                    let _that = this
                    let _form = new FormData()
                    //_form.append('SearchText', "")
                    _form.append('ClassID', _that.ref.target)
                    _form.append('PageSize', _that.ref.view)
                    _form.append('PageIndex', _that.ref.page)

                    let _url = '@processUrl("GetListStudents", "Exam")'

                    axios.post(_url, _form)
                        .then(response => {
                            _that.ref.data = response.data.Data;
                            this.ref.data = _that.ref.data
                            this.ref.totalRec = response.data.Model.totalRecord
                            //console.log(totalRec)
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = tt / this.view + (tt % this.view > 0 ? 1 : 0);
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },
                loadComment() {
                    @*document.location = '@processUrl("Index","Discuss", new { id = currentClass.ID })'*@
                    //console.log(5)
                    $('.fn-box-chat-eduso').focus().click()
                },
                loadResultwTime(objTime, classsbj) {

                    this.detailProgessLesson.isShow = false
                    this.detailProgessLesson.title = ''
                    this.detailProgessLesson.data = []

                    let _that = this
                    let _form = new FormData();
                    _form.append("StartTime", objTime.startTime)
                    _form.append("EndTime", objTime.endTime)
                    if (classsbj) {
                        _form.append("ClassSubjectID", classsbj)
                    }
                    else {
                        _form.append("ClassSubjectID", this.searchCsbj.ID)
                    }
                    this.progessSbj.startTime = objTime.startTime
                    this.progessSbj.endTime = objTime.endTime
                    if (this.searchCsbj.TypeClass == '@BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM') {
                        this.progessSbj.title = 'Kiểm tra & Đánh giá'
                    }
                    else {
                        this.progessSbj.title = this.searchCsbj.CourseName
                    }
                    let _url = '@processUrl("GetResultsWithTime", "ClassSubject")'
                    console.log(_url);
                    axios.post(_url, _form)
                        .then(response => {
                            this.progessSbj.data = response.data.Data
                            //debugger
                        }).catch(e => { })
                    this.$bvModal.show("progessmodal-xl")
                },

                //MODULE
                updateSchedule(obj) {
                    obj.IsUpdating = true

                    var startdate = moment(obj.StartDate).format("YYYY-MM-DD HH:mm:ss");
                    var enddate = moment(obj.EndDate).format("YYYY-MM-DD HH:mm:ss");

                    let _form = new FormData()
                    _form.append('ID', obj.ID)
                    _form.append('StartDate', startdate)
                    _form.append('EndDate', enddate)
                    let _url = '@processUrl("UpdateSchedule", "Lesson")'
                    axios.post(_url, _form)
                        .then(response => {
                            obj.IsUpdating = false
                            if (response.Data.Error != null) {
                                 Swal.fire({
                                        title: "Có lỗi",
                                        text: "Vui lòng nạp lại trang và thao tác lại",
                                        icon: 'warning',
                                    });
                            }
                        }).catch(e => {
                        })
                },
                updateChapPoint(obj) {
                    if (!(obj.BasePoint >= 0 && obj.BasePoint <= 100)) {
                        obj.BasePoint = 0;
                        return false;
                    }
                    obj.IsUpdating = true;
                    let _form = new FormData()
                    _form.append('ID', obj.ID)
                    _form.append('BasePoint', obj.BasePoint)
                    let _url = '@processUrl("UpdateChapterPoint", "Lesson")'

                    axios.post(_url, _form)
                        .then(response => {
                            //console.log(obj);
                            obj.IsUpdating = false;
                            mainInstance.$forceUpdate();
                            var chapter = response.data.Data;
                            if (chapter == null) {
                                alert("có lỗi, vui lòng tải lại trang & thực hiện lại thao tác");
                                return false;
                            }
                        }).catch(e => { })
                },
                updateChapCondition(obj) {
                    if (obj.PreventEvent) return false;
                    obj.IsUpdating = true;
                    let _form = new FormData()
                    _form.append('ID', obj.ID)
                    _form.append('ConditionChapter', obj.ConditionChapter)
                    let _url = '@processUrl("UpdateConditionChapter", "Lesson")'

                    axios.post(_url, _form)
                        .then(response => {
                            obj.IsUpdating = false;
                            mainInstance.$forceUpdate();
                            var chapter = response.data.Data;
                            if (chapter == null) {
                                alert("có lỗi, vui lòng tải lại trang & thực hiện lại thao tác");
                                return false;
                            }
                            else {
                                this.updateSubchapCondition(chapter);
                            }
                        }).catch(e => { })
                },
                updateSubchapCondition(parent) {
                    if (parent != null) {
                        var subchaps = this.list_chapters.filter(t => t.Parent == parent.ID);

                        if (subchaps.length > 0) {
                            subchaps.forEach(function (item, pos) {
                                //console.log(item);
                                item.PreventEvent = true;
                                //console.log(parent);
                                if (parent.ConditionChapter != null)
                                    item.ConditionChapter = parent.ConditionChapter;
                                else
                                    item.ConditionChapter = "";

                                Vue.nextTick(function () {
                                    this.updateSubchapCondition(item);
                                    item.PreventEvent = false
                                })
                            });
                        }
                    }
                },
                chooseGroup(obj) {
                    obj.IsUpdating = true
                    console.log(obj);
                    var selectedGroup = obj.GroupID;

                    let _form = new FormData()
                    _form.append('ID', obj.ID)
                    _form.append('GroupID', selectedGroup)
                    let _url = '@processUrl("UpdateGroup", "Lesson")'
                    axios.post(_url, _form)
                        .then(rsp => {
                            obj.IsUpdating = false
                            if (rsp.error != null) {
                                Swal.fire({
                                    title: "Có lỗi",
                                    text: rsp.error,
                                    icon: 'warning',
                                });
                            }
                            else {
                                Swal.fire({
                                    title: "Thông báo",
                                    text: "Đã giao bài cho nhóm",
                                    icon: 'success',
                                });
                            }

                        }).catch(e => {
                        })
                },
                updateChapSchedule(obj, pos) {
                    obj.IsUpdating = true
                    var startdate = moment(obj.StartDate).format("MM-DD-YYYY HH:mm:ss");
                    var enddate = moment(obj.EndDate).format("MM-DD-YYYY HH:mm:ss");

                    let _form = new FormData()
                    _form.append('ID', obj.ID)
                    _form.append('StartDate', startdate)
                    _form.append('EndDate', enddate)
                    let _that = this;
                    let _url = '@processUrl("UpdateChapterSchedule", "Lesson")'

                    axios.post(_url, _form)
                        .then(response => {
                            //console.log(obj);
                            obj.IsUpdating = false;
                            mainInstance.$forceUpdate();
                            var chapter = response.data.Data;
                            if (chapter == null) {
                                alert("có lỗi, vui lòng tải lại trang & thực hiện lại thao tác");
                                return false;
                            }
                            else {
                                //var _container = '#prc-' + chapter.ID + '-' + pos;
                                //var startdate = formatTime(chapter.StartDate);
                                //var enddate = formatTime(chapter.EndDate);

                                //$(_container).find('.input-group.date.st > input').val(startdate);
                                //$(_container).find('.input-group.date.ed > input').val(enddate);
                                this.updateSubchapSchedule(obj);
                            }
                        }).catch(e => { })
                },
                updateSubchapSchedule(obj) {
                    var subchaps = this.list_chapters.filter(t => t.Parent == obj.ID);
                    if (subchaps.length > 0) {
                        subchaps.forEach(function (item, pos) {
                            item.PreventEvent = true;
                            item.StartDate = obj.StartDate
                            item.EndDate = obj.EndDate
                            Vue.nextTick(function () {
                                this.updateSubchapSchedule(item);
                                item.PreventEvent = false
                            })
                        });
                    }
                    var sublessons = this.list_lessons.filter(t => t.Parent == obj.ID);
                    if (sublessons.length > 0) {
                        sublessons.forEach(function (item, pos) {
                            item.StartDate = obj.StartDate
                            item.EndDate = obj.EndDate
                        });
                    }
                },
                clearSchedule(obj) {
                    obj.IsUpdating = true
                    obj.StartDate = ''
                    obj.EndDate = ''
                    let _form = new FormData()
                    _form.append('ID', obj.ScheduleID)
                    let _url = '@processUrl("UpdateSchedule", "Lesson")'
                    axios.post(_url, _form)
                        .then(response => {
                            obj.IsUpdating = false
                        }).catch(e => { })
                },
                resetChap(obj, pos) {
                    obj.IsUpdating = true
                    obj.StartDate = ''
                    obj.EndDate = ''
                    obj.BasePoint = 0
                    obj.ConditionChapter = ''
                    obj.IsHideAnswer = false

                    let _form = new FormData()
                    _form.append('ID', obj.ID)
                    _form.append('reset', true)

                    let _url = '@processUrl("UpdateChapterSchedule", "Lesson")'
                    axios.post(_url, _form)
                        .then(response => {
                            //console.log(obj);
                            obj.IsUpdating = false;
                            mainInstance.$forceUpdate();
                            var chapter = response.data.Data;
                            if (chapter == null) {
                                alert("có lỗi, vui lòng tải lại trang & thực hiện lại thao tác");
                                return false;
                            }
                            else {
                                var _container = '#prc-' + chapter.ID + '-' + pos;
                                var startdate = formatTime(chapter.StartDate);
                                var enddate = formatTime(chapter.EndDate);
                                $(_container).find('.input-group.date.st > input').val(startdate);
                                $(_container).find('.input-group.date.ed > input').val(enddate);
                                $('[id^=prc-' + obj.ID + '] .fa-eye-slash').removeClass('active');

                                this.resetSubContent(chapter);
                            }
                        }).catch(e => { })
                },
                resetSubContent(parent) {
                    if (parent != null) {
                        var subchaps = this.list_chapters.filter(t => t.Parent == parent.ID);

                        if (subchaps.length > 0) {
                            subchaps.forEach(function (obj, pos) {
                                //console.log(item);
                                obj.PreventEvent = true;
                                obj.StartDate = ''
                                obj.EndDate = ''
                                obj.BasePoint = 0
                                obj.ConditionChapter = ''
                                obj.IsHideAnswer = false

                                Vue.nextTick(function () {
                                    this.updateSubchapCondition(obj);
                                    obj.PreventEvent = false
                                })
                            });
                        }
                        var sublessons = this.list_lessons.filter(t => t.Parent == parent.ID);
                        if (sublessons.length > 0) {
                            sublessons.forEach(function (obj, pos) {
                                //console.log(item);
                                //obj.PreventEvent = true;
                                obj.StartDate = ''
                                obj.EndDate = ''
                                obj.IsHideAnswer = false

                            });
                        }
                    }
                },
                matchedChap(obj, key) {
                    return (obj.ClassSubject + '-' + obj.Parent) == key
                },
                matchedLesson(obj, key) {
                    return (obj.ClassSubject + '-' + obj.Parent) == key
                },
                filterChap(obj, list) {
                    return list.filter((p) => {
                        return p.Parent == obj.ID && p.ClassSubject == obj.ClassSubject
                    })
                },
                filterLesson(obj) {
                    //debugger
                    //console.log(obj);
                    //console.log(obj.ClassSubject);
                    var filter = this.list_lessons.filter((p) => {
                        return p.Parent == obj.ID && p.ClassSubject == obj.ClassSubject
                    })
                    if (filter.length > 0)
                    //debugger
                    return filter;
                },
                filterResult(obj) {
                    //console.log(obj);
                    var filter = this.list_lessons_result.filter((p) => {
                        return p.Parent == obj.ID && p.ClassSubject == obj.ClassSubject
                    })
                    return filter;
                },
                //Lesson Action
                @*toggleLessonState(obj) {
                    let _that = this;
                    //console.log(obj)
                    //_that.tableData.forEach(function (item, k) {
                    //if (item.ID === obj.ID) {
                    let _url = obj.IsActive ? '@processUrl("Unpublish", "LessonSchedule")' : '@processUrl("Publish", "LessonSchedule")'
                    let _form = new FormData()
                    _form.append('ArrID', obj.ScheduleID);
                    axios.post(_url, _form)
                        .then(response => {
                            console.log('update ok');
                            //item.IsActive = !item.IsActive;
                            //_that.list_data[k].IsActive = !_that.list_data[k].IsActive;
                        }).catch(e => { })
                    //}
                    //})
                },*@
                toggleOnlineClass(obj) {
                    let _url = '@processUrl("ToggleOnline", "Lesson")'
                    let _form = new FormData()
                    _form.append('ID', obj.ScheduleID);
                    axios.post(_url, _form)
                        .then(response => {
                            if (response.data.error == null) {
                                obj.IsOnline = response.data.isOnline;
                                if (response.data.isOnline == true) {
                                    Swal.fire({
                                        title: "Mở lớp thành công",
                                        text: "Đã mở lớp trực tuyến cho bài học",
                                        icon: 'success',
                                    });
                                }
                                else {
                                    Swal.fire({
                                        title: "Thông báo",
                                        text: "Đã hủy lớp trực tuyến",
                                        icon: 'warning',
                                    });
                                }
                            }
                            else {
                                Swal.fire({
                                    title: "Có lỗi",
                                    text: response.error,
                                    icon: 'warning',
                                });
                            }

                            //item.IsActive = !item.IsActive;
                            //_that.list_data[k].IsActive = !_that.list_data[k].IsActive;
                        }).catch(e => { })
                },
                toggleHideAnswer(obj) {
                    let _url = '@processUrl("ToggleHideAnswer", "Lesson")'
                    let _form = new FormData()
                    _form.append('ID', obj.ScheduleID);
                    axios.post(_url, _form)
                        .then(response => {
                            if (response.data.error == null) {
                                console.log(response.data);
                                obj.IsHideAnswer = response.data.isHideAnswer;
                                if (response.data.isHideAnswer == true) {
                                    Swal.fire({
                                        title: "Thông báo",
                                        text: "Đã bật chế độ ẩn đáp án",
                                        icon: 'info',
                                    });
                                }
                                else {
                                    Swal.fire({
                                        title: "Thông báo",
                                        text: "Đã tắt chế độ ẩn đáp án",
                                        icon: 'info',
                                    });
                                }
                                //this.$forceUpdate();
                            }
                            else {
                                Swal.fire({
                                    title: "Có lỗi",
                                    text: response.error,
                                    icon: 'warning',
                                });
                            }

                            //item.IsActive = !item.IsActive;
                            //_that.list_data[k].IsActive = !_that.list_data[k].IsActive;
                        }).catch(e => { })
                },
                toggleChapterHideAnswer(obj) {
                    let _url = '@processUrl("ToggleHideAnswer", "Lesson")'
                    let _form = new FormData()
                    _form.append('ChapterID', obj.ID);
                    _form.append('', obj.ID);
                    axios.post(_url, _form)
                        .then(response => {
                            if (response.data.error == null) {
                                console.log(response.data);
                                obj.IsHideAnswer = response.data.isHideAnswer;
                                if (response.data.isHideAnswer == true) {
                                    Swal.fire({
                                        title: "Thông báo",
                                        text: "Đã bật chế độ ẩn đáp án",
                                        icon: 'info',
                                    });
                                    //$('[id^=prc-' + obj.ID + '] .fa-eye-slash').addClass('active');
                                }
                                else {
                                    Swal.fire({
                                        title: "Thông báo",
                                        text: "Đã tắt chế độ ẩn đáp án",
                                        icon: 'info',
                                    });
                                    //$('[id^=prc-' + obj.ID + '] .fa-eye-slash').removeClass('active');
                                }
                                this.toggleSubHideAnswer(obj);

                            }
                            else {
                                Swal.fire({
                                    title: "Có lỗi",
                                    text: response.error,
                                    icon: 'warning',
                                });
                            }



                            //item.IsActive = !item.IsActive;
                            //_that.list_data[k].IsActive = !_that.list_data[k].IsActive;
                        }).catch(e => { })
                },
                toggleSubHideAnswer(parent) {
                    if (parent != null) {
                        var subchaps = this.list_chapters.filter(t => t.Parent == parent.ID);

                        if (subchaps.length > 0) {
                            subchaps.forEach(function (obj, pos) {
                                obj.IsHideAnswer = parent.IsHideAnswer

                                Vue.nextTick(function () {
                                    this.toggleSubHideAnswer(obj);
                                    obj.PreventEvent = false
                                })
                            });
                        }
                        var sublessons = this.list_lessons.filter(t => t.Parent == parent.ID);
                        if (sublessons.length > 0) {
                            sublessons.forEach(function (obj, pos) {
                                obj.IsHideAnswer = parent.IsHideAnswer
                            });
                        }
                    }
                },
                //REF
                //GROUP
                displayGroup(groupID) {
                    var gp = this.group_data.filter(t => t.ID == groupID);
                    if (gp.length > 0)
                        return gp[0].Name;
                    return "";
                },
                addGroup(obj) {
                    var classID = '@currentClass.ID'
                    Swal.fire({
                        title: obj != null  ? 'Cập nhật nhóm':'Tạo nhóm mới',
                        text: obj != null ? 'Nhập tên nhóm' : 'Nhập tên nhóm cần tạo',
                        icon: 'info',
                        input: 'text',
                        showCancelButton: true,
                        cancelButtonText: 'Hủy',
                        confirmButtonText: obj != null ? 'Cập nhật':'Tạo',
                        inputLabel: 'Tên nhóm',
                        inputValidator: (value) => {
                            return (value.length == 0) && 'Tên nhóm không được để trống'
                        },
                        inputValue: obj != null ? obj.Name : '',
                        showLoaderOnConfirm: true,
                        preConfirm: (name) => {
                            let _form = new FormData()
                            if(obj != null)
                                _form.append('ID', obj.ID);
                            _form.append('Name', name);
                            _form.append('ClassID', classID);
                            let _url = '@processUrl("SaveGroup", "Class")'
                            axios.post(_url, _form)
                                .then(rsp => {
                                    if (rsp.data.error != null) {
                                        throw new Error(rsp.data.error);
                                    }
                                    else {
                                        var item = rsp.data;
                                        console.log(item);
                                        var filter = this.group_data.filter(t => t.ID == item.ID);
                                        if (filter.length > 0) {
                                            obj.Name = item.Name;
                                            console.log(obj);
                                        }
                                        else
                                            this.group_data.push({
                                                ID: item.ID,
                                                Name: item.Name,
                                                StudentCount: 0,
                                                IsActive: item.IsActive,
                                                Created: item.Created
                                            });
                                    }
                                }).catch(e => {
                                    //console.log(e)
                                    Swal.showValidationMessage(
                                        `Có lỗi: ${e}`
                                    )
                                })
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        console.log(result);
                        if (result.isConfirmed) {

                        }
                    })
                },
                toggleGroupState(item) {
                    let _that = this;
                    var item = _that.group_data.filter(t => t.ID == item.ID);
                    console.log(item);
                    if (item.length > 0) {
                        let _url = '@processUrl("PublishGroup", "Class")';
                        let _form = new FormData()
                        _form.append('ID', item[0].ID);
                        _form.append('IsActive', !item[0].IsActive);
                        axios.post(_url, _form)
                            .then(rsp => {
                                if (rsp.data.error != null) {
                                    Swal.fire({
                                        title: 'Có lỗi',
                                        text: rsp.data.error,
                                        icon: 'danger'
                                    })
                                }
                                else {
                                    var newitem = rsp.data;
                                    item[0].IsActive = newitem.IsActive;
                                    Swal.fire({
                                        title: 'Thông báo',
                                        text: newitem.IsActive ? 'Đã kích hoạt nhóm' : 'Đã vô hiệu nhóm',
                                        icon: 'success'
                                    })
                                }
                            }).catch(e => { })
                    }

                },
                loadGroup() {
                    let _that = this
                    let _form = new FormData()
                    _that.group_data = [];
                    _form.append('ID', '@currentClass.ID');
                    let _url = '@processUrl("GetGroupList", "Class")';
                    axios.post(_url, _form)
                        .then(rsp => {
                            if (rsp.data.error != null) {
                                Swal.fire({
                                    title: 'Có lỗi',
                                    text: rsp.data.error,
                                    icon: 'warning'
                                })
                            }
                            else {
                                data = rsp.data;
                                if (data.length > 0) {
                                    data.forEach(function (item, idx) {
                                        _that.group_data.push({
                                            ID: item.ID,
                                            Name: item.Name,
                                            StudentCount: item.StudentCount,
                                            IsActive: item.IsActive,
                                            Created: item.Created,
                                            Members: item.Members
                                        });
                                    })
                                    this.group_data = _that.group_data
                                }
                            }
                        }).catch(e => { })
                },
                removeGroup(obj) {
                    var classID = '@currentClass.ID'
                    Swal.fire({
                        title: 'Xác nhận xóa',
                        text: 'Các bài đã phân công cho học sinh trong nhóm cũng sẽ bị hủy',
                        icon: 'question',
                        showCancelButton: true,
                        cancelButtonText: 'Bỏ qua',
                        confirmButtonText: 'Xóa',
                        showLoaderOnConfirm: true,
                        preConfirm: (name) => {
                            let _form = new FormData()
                            if(obj != null)
                                _form.append('ID', obj.ID);
                            let _url = '@processUrl("RemoveGroup", "Class")'
                            axios.post(_url, _form)
                                .then(rsp => {
                                    console.log(rsp);
                                    if (rsp.data.error != null) {
                                        throw new Error(rsp.data.error);
                                    }
                                    else {
                                        this.group_data.splice(this.group_data.indexOf(obj), 1);
                                    }
                                }).catch(e => {
                                    //console.log(e)
                                    Swal.showValidationMessage(
                                        `Có lỗi: ${e}`
                                    )
                                })
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        console.log(result);
                        if (result.isConfirmed) {

                        }
                    })
                },
                async chooseGroupStudent(student) {
                    console.log(student);
                    let _that = this
                    var options = {};
                    options['all-class'] = 'Không xếp nhóm';
                    _that.group_data.forEach(function (obj, idx) {
                        //grp.push({ID : item.ID, Name : item.Name})
                        options[obj.ID] = obj.Name;
                    });

                    var defValue = student.GroupIDs != null && student.GroupIDs.length > 0 ? student.GroupIDs[0] : '';

                    const { value: grpID} = await Swal.fire({
                        title: 'Chọn nhóm',
                        input: 'select',
                        icon: 'question',
                        inputOptions: options,
                        inputPlaceholder: 'Xếp nhóm cho học sinh',
                        inputValue: defValue,
                        showCancelButton: true,
                        inputValidator: (value) => {
                            return new Promise((resolve) => {
                                resolve()
                            })
                        }
                    })

                    console.log(grpID);

                    var newGrp = grpID;
                    if (grpID == 'all-class') newGrp = '';
                    console.log(newGrp);

                    if (newGrp != defValue) {
                        let _url = '@processUrl("SetGroupStudent", "Class")';
                        let _form = new FormData()
                        _form.append('StudentID', student.StudentID);
                        _form.append('GroupID', newGrp);
                        _form.append('ClassID', '@currentClass.ID');
                        axios.post(_url, _form)
                            .then(rsp => {
                                if (rsp.data.error != null) {
                                    Swal.fire({
                                        title: 'Có lỗi',
                                        text: rsp.data.error,
                                        icon: 'danger'
                                    })
                                }
                                else {
                                    var result = rsp.data;

                                    Swal.fire({
                                        title: 'Thông báo',
                                        text: newGrp == '' ? 'Đã cập nhật nhóm của học viên' : 'Đã thêm học viên vào nhóm' ,
                                        icon: 'success'
                                    })
                                    if (newGrp != '')
                                        student.GroupIDs = [newGrp];
                                    else
                                        student.GroupIDs = null;
                                }
                            }).catch(e => { })
                    }
                },
                //GROUP_STUDENT
                showGroupStudent(data) {
                    let _that = this;
                    this.group_view_mode = 1;
                    this.hideModal();
                    if (data != null) {
                        _that.group_info.ID = data.ID
                        _that.group_info.Name = data.Name
                    }

                    if (this.student_init) {
                        this.group_student = [];
                        this.loadGroupStudent(data);
                    }
                    else {
                        _that.student_data = [];
                        this.initStudentList(data, this.loadGroupStudent);
                    }

                    _that.$bvModal.show('modal_student')
                },
                manageGroupStudent(data) {
                    let _that = this;
                    this.group_view_mode = 0;
                    this.hideModal();
                    if (data != null) {
                        _that.group_info.ID = data.ID
                        _that.group_info.Name = data.Name
                    }

                    if (this.student_init) {
                        this.group_student = [];
                        this.loadGroupStudent(data);
                    }
                    else {
                        _that.student_data = [];
                        this.initStudentList(data, this.loadGroupStudent);
                    }

                    _that.$bvModal.show('modal_student')
                },
                loadGroupStudent(data) {
                    var _that = this;

                    if (_that.student_data != null && _that.student_data.length > 0) {
                        _that.student_data.forEach(function (item, idx) {
                            item.IsActive = false
                        });
                    }

                    _that.group_student = [];
                    if (data != null && data.Members != null && data.Members.length > 0) {
                        data.Members.forEach(function (item, idx) {
                            _that.group_student.push(item);
                            var item = _that.student_data.filter(t => t.ID == item);
                            if (item != null && item.length > 0)
                                item[0].IsActive = true;
                        });
                        //console.log(_that.group_student);
                    }

                    @*let _that = this
                    let _form = new FormData()
                    _that.group_student = [];
                    _form.append('ID', '@currentClass.ID');
                    let _url = '@processUrl("GetGroupStudentID", "Class")';
                    axios.post(_url, _form)
                        .then(rsp => {
                            if (rsp.data.error != null) {
                                Swal.fire({
                                    title: 'Có lỗi',
                                    text: rsp.data.error,
                                    icon: 'warning'
                                })
                            }
                            else {
                                data = rsp.data;
                                if (data.length > 0) {
                                    data.forEach(function (item, idx) {
                                        _that.group_data.push({
                                            ID: item
                                        });
                                    })
                                    this.group_student = _that.group_student
                                }
                                this.student_init = true;
                            }
                        }).catch(e => { })*@
                },
                initStudentList(obj, callback) {
                    let _that = this
                    let _form = new FormData()
                    _that.student_data = [];
                    _form.append('ClassID', '@currentClass.ID');
                    let _url = '@processUrl("GetList", "StudentManage")';
                    axios.post(_url, _form)
                        .then(rsp => {
                            if (rsp.data.error != null) {
                                Swal.fire({
                                    title: 'Có lỗi',
                                    text: rsp.data.error,
                                    icon: 'warning'
                                })
                            }
                            else {
                                data = rsp.data.Data;
                                if (data.length > 0) {
                                    data.forEach(function (item, idx) {
                                        _that.student_data.push({
                                            ID: item.ID,
                                            FullName: item.FullName,
                                            Email: item.Email,
                                            Phone: item.Phone
                                        });
                                    })
                                    this.student_data = _that.student_data
                                }
                                this.student_init = true;
                                if (callback != null)
                                    callback(obj);
                            }
                        }).catch(e => { })
                },
                toggleGroupStudent(item, groupID) {
                    let _that = this;
                    let _url = '@processUrl("ToggleGroupStudent", "Class")';
                    let _form = new FormData()
                    _form.append('StudentID', item.ID);
                    _form.append('GroupID', groupID);
                    axios.post(_url, _form)
                        .then(rsp => {
                            if (rsp.data.error != null) {
                                Swal.fire({
                                    title: 'Có lỗi',
                                    text: rsp.data.error,
                                    icon: 'danger'
                                })
                            }
                            else {
                                var result = rsp.data;


                                var idx = this.group_student.indexOf(item.ID);
                                var student = this.student_data.filter(t=> t.ID == item.ID);

                                if (idx >= 0)//remove from group
                                    this.group_student.splice(idx, 1);

                                if (result.isActive) {
                                    Swal.fire({
                                        title: 'Thông báo',
                                        text:'Đã thêm học viên vào nhóm' ,
                                        icon: 'success'
                                    })
                                    this.group_student.push(item.ID);
                                    student.IsActive = true;
                                }
                                else
                                {
                                    student.IsActive = false;
                                    Swal.fire({
                                        title: 'Thông báo',
                                        text: 'Đã đưa học sinh ra khỏi nhóm',
                                        icon: 'success'
                                    })
                                }
                                var grp = this.group_data.filter(g => g.ID == groupID);
                                if (grp != null && grp.length > 0)
                                    grp[0].Members = this.group_student;

                            }
                        }).catch(e => { })
                },
                //
                showPointModal(obj) {
                    let _that = this;
                    let _url = '@processUrl("GetDetail", "Exam")'
                    let _form = new FormData()
                    //_form.append('ID', obj);
                    _form.append('CheckPoint', true);
                    axios.post(_url, _form)
                        .then(response => {
                            var data = response.data.Data;
                            _that.checkpoint = data;
                            if (data != null) {
                                var questionEssay = [];
                                for (var i = 0; i < data.Parts.length; i++) {
                                    var part = data.Parts[i];
                                    if (part.Type == "ESSAY") {
                                        questionEssay = questionEssay.length == 0 ? [...part.ExamDetails] : [...questionEssay,...part.ExamDetails];
                                    }
                                }
                                //loadCheckPointData(data, questionEssay);
                            }

                        }).catch(e => { })

                    _that.$bvModal.show('modal_essay');
                },
                updateCheckPoint() {
                    let _that = this
                    for (var i = 0; i < _that.checkpoint.Parts.length; i++) {
                        var part = _that.checkpoint.Parts[i];
                        if (part.Type == "ESSAY") {
                            for (var j = 0; j < part.ExamDetails.length; j++) {
                                var question = part.ExamDetails[j];
                                let _form = new FormData();
                                _form.append("ID", question.ID);
                                _form.append("Point", question.Point);
                                _form.append("RealAnswerValue", question.RealAnswerValue);
                                _form.append("isLast", j == (part.ExamDetails.length - 1));

                                var files = document.querySelector('input[data-target="' + question.ID + '"]');
                                if (files != null) {
                                    for (var x = 0; x < files.files.length; x++) {
                                        _form.append("files", files.files[x]);
                                    }
                                }

                                let _url = '@processUrl("UpdatePoint", "Exam")'
                                axios.post(_url, _form)
                                    .then(response => {
                                        console.log(response.data);
                                        var data = response.data.Data;
                                        if (data != null && data != void 0) {
                                            if (j == (part.ExamDetails.length - 1)) {
                                                Swal.fire({
                                                    title: "Đã chấm xong",
                                                    text: "Success",
                                                    icon: 'Success',
                                                });
                                                _that.checkpoint.Marked = true;
                                            }
                                        } else {
                                            Swal.fire({
                                                title: "Có lỗi",
                                                text: "Vui lòng nhập đủ thông tin",
                                                icon: 'warning',
                                            });
                                        }
                                }).catch(e => { })

                            }
                        }
                    }
                    if (_that.checkpoint.RealAnswer == '') {
                        Swal.fire({
                            title: "Có lỗi",
                            text: "Vui lòng nhập đủ thông tin",
                            icon: 'warning',
                        });
                        //this.$refs["addName"].focus();
                        return false;
                    }
                    _that.hideModal();
                },
                changeAddSubject(obj) {
                    let _that = this;
                    //debugger
                    if (_that.list_grades_full.findIndex(item => obj == item.ID) == -1) {
                        _that.list_grades_full.forEach(function (sbj) {
                            //console.log(obj.UID)
                            if (sbj.ID == obj.UI) {
                                sbj.GradeID = ''
                                sbj.CourseID = ''
                                sbj.TeacherID = ''
                                sbj.SkillID = ''
                                return
                            }
                        });
                    }
                },
                openLessonResult(obj) {
                    let _that = this;
                    this.hideModal();
                    if (obj != null) {
                        _that.lesson_result.ID = obj.ID
                        _that.lesson_result.Title = obj.Title
                    }
                    this.loadLessonResult(obj.ID);
                    _that.$bvModal.show('modal_lesson_detail')
                },
                loadLessonResult(ID) {
                    let _that = this
                    let _form = new FormData()
                    _form.append('ID', ID)
                    let _url = '@processUrl("GetLessonProgressList", "Exam")'
                    axios.post(_url, _form)
                        .then(response => {
                            var _data = response.data.Data;
                            _that.result_data = [];
                            _data.forEach(function (student, k) {
                                _that.result_data.push(student);
                            });
                            this.result_data = that.result_data;
                            _that.$forceUpdate()
                        }).catch(e => { })
                },
                openHistory(obj) {
                    let _that = this;
                    if (obj != null) {
                        _that.student_result.ID = obj.StudentID
                        _that.student_result.Name = obj.StudentName
                        _that.student_result.History = obj.ListExam
                    }
                    _that.$bvModal.show('modal_history');
                },

                //SUPPORT
                formatShortDate(date) {
                    var _date = moment(date);
                    if (!_date._isValid || _date < moment(new Date(2000, 1, 1))) return "";
                    return _date.format("DD/MM/YYYY")
                },
                formatYYYYMMDShortDate(date) {
                    var _date = moment(date);
                    if (!_date._isValid || _date < moment(new Date(2000, 1, 1))) return "";
                    return _date.format("YYYY-MM-DD")
                },
                formatTime(time) {
                    var _time = moment(time);
                    if (!_time._isValid || _time < moment(new Date(2000, 1, 1))) return "";
                    return _time.format("DD/MM/YYYY HH:mm")
                },
                formatDatenoYear(date) {
                    var _date = moment(date);
                    if (!_date._isValid || _date < moment(new Date(2000, 1, 1))) return "";
                    return _date.format("DD/MM")
                },
                getPeriod(obj) {
                    var startms = moment(obj.Created);
                    var endms = moment(obj.EndTime);
                    //console.log(startms);
                    //console.log(endms);
                    //debugger
                    //var ret = "";
                    //if (endms.days() - startms.days() > 0)
                    //    ret += (endms.days() - startms.days()) + "d ";
                    //if (endms.hours() - startms.hours() > 0)
                    //    ret += (endms.hours() - startms.hours()) + "h ";
                    //if (endms.minutes() - startms.minutes() > 0)
                    //    ret += (endms.minutes() - startms.minutes()) + "m ";
                    //if (endms.second() - startms.second() > 0)
                    //    ret += (endms.second() - startms.second()) + "s ";
                    //if (ret.length == 0)
                    //    ret = "0s";
                    //return ret;
                    //debugger
                    var ret = "";
                    var totalSeconds = (endms - startms) / 1000;
                    var totalMinutes = totalSeconds / 60;
                    var totalHouse = totalSeconds / 3600;

                    var h = parseInt(totalHouse);
                    var m = parseInt(totalMinutes) - 60 * h;
                    var s = parseInt(totalSeconds) - m * 60 - h * 3600;
                    if (h > 0) {
                        ret += h + "h ";
                    }
                    if (m > 0) {
                        ret += m + "m ";
                    }
                    if (s >= 0) {
                        ret += s + "s ";
                    }

                    return ret;
                },
                domDecoder(str) {
                    if (str == null)
                        return "";
                    let parser = new DOMParser();
                    let dom = parser.parseFromString('<!doctype html><body>' + str, 'text/html');
                    return dom.body.textContent;
                },
                replaceBrkLine(str) {
                    if (str == null)
                        return "";
                    return str.replace(/\n/gi, "<br/>")
                },
                getAvgTotal(pos, studentID) {
                    var rs = this.scoreSbjChap[pos].Result;
                    if (rs == null) return -1;
                    var result = rs.filter(t => t.StudentID == studentID);
                    if (result.length == 0)
                        return -1;
                    var exDone = result[0].PracticeDone + result[0].ExamDone;
                    if (exDone == 0)
                        return 0;
                    return ((result[0].PracticePoint + result[0].TotalPoint) / exDone);
                },
                getSbjScoreText(pos, studentID) {
                    var avg = this.getAvgTotal(pos, studentID);
                    if (avg < 0) return "";
                    return avg.toFixed(1);
                },
                shortenString(str, max = 15) {
                    if (str == null || str.length <= max)
                        return "";
                    return str.substring(0, max) + "..."
                },
                hideModal(id) {
                    if (id == null)
                        $('.close').click();
                    else
                        $('#' + id + ' .close').click();
                },
                getPercent(a, b) {
                    var result = 0;
                    if (a > 0)
                        result = a * 100 / b;
                    return result;
                },
                isDocType(path) {
                    if (path == null || path == "") return false;
                    var idx = path.toString().lastIndexOf('.');
                    if (idx <= 0) {
                        var ext = path.substring(idx, path.length - idx);
                        return this.allow_doc_ext.findIndex(t => t === ext) >= 0;
                    }
                },
                showEditor(obj) {
                    window.location.href = '@processUrl("Editor","Class")/' + obj.ID + '/@currentClass.ID';
                },
                showScoreboard(obj) {
                    this.searchCsbj.ID = obj.ID;
                    this.tabChange(2);
                },
                toggleSelect() {
                    this.displaySelect = !this.displaySelect
                },
                checkToggle() {
                    this.filterChap.SelectAll = (this.filterChap.TargetChaps.length == this.scoreSbjChap.length)
                },
                checkToggleAll() {
                    var _that = this
                    _that.filterChap.TargetChaps = []
                    if (_that.filterChap.SelectAll) {
                        _that.scoreSbjChap.forEach(function (item, pos) {
                            _that.filterChap.TargetChaps.push(item.ID)
                        })
                    }
                    _that.checkToggle()
                },
                export2Excel() {
                    this.isLoading = true;
                    var table = $('#ed_table');
                    if (table && table.length) {
                        $(table).table2excel({
                            exclude: ".noExl",
                            name: "Excel Document Name",
                            filename: "Bản điểm " + this.className + ".xls",
                            fileext: ".xls",
                            exclude_img: true,
                            exclude_links: true,
                            exclude_inputs: true,
                            preserveColors: true
                        });
                        this.isLoading = false;
                    }
                    else {
                        this.isLoading = false;
                    }
                },
                format_Date(value) {
                    if (value) {
                        return moment(String(value)).format('YYYY-MM-DD')
                    }
                },
                addDays(value, inc) {
                    if (value) {
                        return moment(String(value)).add(inc, 'days');
                    }
                    return moment();
                },
                exportExcel(tableid) {
                    var _filename = "";
                    if (this.searchCsbj == "") {
                        _filename = "Bảng điểm tổng hợp lớp " + this.className;
                    }
                    else {
                        _filename = "Bảng điểm môn " + this.searchCsbj.CourseName + " lớp " + this.className;
                    }
                    var uri = 'data:application/vnd.ms-excel;base64,'
                        , template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=utf-8"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>.text-style{mso-number-format:"#?/?"}</style></head><body><table>{table}</table></body></html>'
                        , base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }
                        , format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) }
                    //var table = document.getElementById("ed_table");
                    var table = document.getElementById(tableid);
                    //console.log(tableid);
                    //var table = $('#' + tableid);
                    var ctx = { worksheet: 'Worksheet', table: table.innerHTML }
                    //window.location.href = uri + base64(format(template, ctx));
                    var link = document.createElement('a');
                    if (typeof link.download === 'string') {
                        link.href = uri + base64(format(template, ctx));
                        link.download = _filename;
                        //Firefox requires the link to be in the body
                        document.body.appendChild(link);
                        //simulate click
                        link.click();
                        //remove the link when done
                        document.body.removeChild(link);
                    } else {
                        window.open(uri + base64(format(template, ctx)));
                    }
                },
                export2ExcelV2() { //code server
                    var classID = this.classID;
                    var url = '@processUrl("ExportTablePoint", "Class")/?ClassID=' + classID + '&&basic=@center';
                    window.open(url);
                },

                //------------
                convertPoint(value) {
                    if (value >= 0) {
                        value = value / 10;
                        var phannguyen = parseInt(value);
                        var phanthapphan = value - phannguyen;
                        if (phanthapphan < 0.5 && phanthapphan > 0) {
                            var a = phanthapphan;
                            if (a < 0.25) {
                                phanthapphan = 0;
                            }
                            else {
                                phanthapphan = 0.5;
                            }
                        }
                        else if (phanthapphan >= 0.5 && phanthapphan < 1.0) {
                            var a = phanthapphan;
                            if (a < 0.75) {
                                phanthapphan = 0.5;
                            }
                            else {
                                phanthapphan = 1;
                            }
                        }
                        var point = phannguyen + phanthapphan;
                        return point
                    }
                    else return value
                },
                showDetailStudent(studentID,StudentName) {

                    this.studentSummary.studentID = ''
                    this.studentSummary.studentName = ''
                    this.studentSummary.className = ''
                    this.studentSummary.avgPointPractice = ''
                    this.studentSummary.avgPointExam = ''
                    this.studentSummary.result = []
                    this.studentSummary.dataPractice = []
                    this.studentSummary.dataExam = []

                    //debugger
                    let _that = this
                    let _form = new FormData()
                    _form.append("StudentID", studentID)
                    _form.append("ClassID", _that.classID)
                    let _url = '@processUrl("GetStudentSummary", "Class")'
                    this.isLoading = true
                    axios.post(_url, _form)
                        .then(response => {
                            //debugger
                            var dataPractice = response.data.Practice
                            var dataExam = response.data.Exam
                            this.studentSummary.studentName = StudentName
                            this.studentSummary.className = this.className
                            this.studentSummary.dataPractice = dataPractice
                            this.studentSummary.dataExam = dataExam
                            this.studentSummary.avgPointPractice = this.calcAveragePractice(dataPractice)
                            this.studentSummary.avgPointExam = this.calcAverageExam(dataExam)
                            this.isLoading = false
                            //debugger
                        }).catch(e => { this.isLoading = false })
                    this.$bvModal.show("detailStudentSummary_modal")
                },
                calcAveragePractice(obj) {
                    //debugger
                    if (obj.length > 0) {
                        var totalPointPractice = 0;
                        var totalLesson = 0;
                        for (var i = 0; i < obj.length; i++) {
                            var item = obj[i];
                            //debugger
                            totalPointPractice += item.PracticeAvgPoint * item.TotalLessons;
                            //if (item.TotalLessons) {
                                totalLesson += item.TotalLessons
                            //}
                        }
                        return (totalPointPractice / totalLesson)
                    }
                    else return "---"
                },
                calcAverageExam(obj) {
                    if (obj.length > 0) {
                        var totalPointExam = 0;
                        for (var i = 0; i < obj.length; i++) {
                            var item = obj[i];
                            totalPointExam += item.point;
                        }
                        return (totalPointExam / obj.length)
                    }
                    else return "---"
                },
                calcAvginWeek(obj) {
                    //debugger
                    if (obj.length > 0) {
                        var total = 0;
                        var totalLesson = 0;
                        for (var i = 0; i < obj.length; i++) {
                            var item = obj[i];
                            var count = item.totalPractice;
                            var point = parseFloat(item.point);
                            total += (isNaN(point) ? 0 : point) * count;
                            //totalLesson += (isNaN(count) ? 0 : count);
                            totalLesson = item.totalLessons;
                        }
                        return this.roundPoint((total / totalLesson), 1);
                    } else
                        return "---";
                },
                loadDetailinWeek(obj) {
                    if (obj.point >= 0) {
                        let _that = this
                        let _form = new FormData()
                        _form.append("StartWeek", obj.startTime)
                        _form.append("EndWeek", obj.endTime)
                        _form.append("StudentID", obj.studentID)
                        _form.append("ClassSubjectID", _that.searchCsbj.ID)
                        let _url = '@processUrl("GetLessonProgressListInWeek", "Exam")'
                        this.isLoading = true
                        this.result_data = []
                        axios.post(_url, _form)
                            .then(response => {
                                this.isLoading = false
                                var data = response.data
                                //debugger
                                this.result_data = data
                                //debugger
                            }).catch(e => { this.isLoading = false })
                        this.isLoading = false
                        this.$bvModal.show("detailLessonInWeek-modal")
                    }
                    else return
                },
                roundPoint(value, precision) {
                    if (value > 0) {
                        value = value / 10
                        var multiplier = Math.pow(10, precision || 0);
                        return (Math.round(value * multiplier) / multiplier).toFixed(1);
                    }
                    else return value
                },
                loadDetailExam(obj) {
                    let _that = this
                    let _form = new FormData()
                    _form.append("StudentID", obj.StudentID)
                    _form.append("ClassID", '@currentClass.ID')
                    let _url = '@processUrl("GetLessonProgressExam", "Exam")'
                    this.isLoading = true
                    this.result_data = []
                    axios.post(_url, _form)
                        .then(response => {
                            this.isLoading = false
                            var data = response.data
                            this.result_data = data
                            //debugger
                        }).catch(e => { this.isLoading = false })
                    this.isLoading = false
                    this.$bvModal.show("detailLessonInWeek-modal")
                },
                DetailProgessLesson(LessonScheduleID, Title, obj) {
                    debugger
                    let _that = this
                    let _form = new FormData()
                    _form.append("LessonID", LessonScheduleID)
                    let _url = '@processUrl("GetDetailProgessExam", "Exam")'
                    this.isLoading = true
                    axios.post(_url, _form)
                        .then(response => {
                            this.isLoading = false
                            var status = response.data.Status
                            if (status) {
                                var data = response.data.Data
                                this.detailProgessLesson.isShow = true
                                this.detailProgessLesson.data = data //here
                                this.detailProgessLesson.title = Title
                                this.detailProgessLesson.dataLesson = response.data.DetailLesson
                                if (data.length == 0) this.detailProgessLesson.isShow = false
                                //debugger
                            }
                            else {
                                alert(response.data.Message)
                                this.detailProgessLesson.isShow = false
                                this.detailProgessLesson.data = []
                                this.detailProgessLesson.title = ''
                                this.detailProgessLesson.dataLesson = []
                            }
                        }).catch(e => { this.isLoading = false })
                    this.$bvModal.show("detailLessonInClass-modal")
                },
                loadLessonToMark() {
                    let _that = this
                    let _form = new FormData()
                    _form.append("ClassID", this.classID)
                    let _url = '@processUrl("GetLessonToMark", "Class")'
                    this.isLoading = true
                    axios.post(_url, _form)
                        .then(response => {
                            //this.list_lessons = [] //đoạn này không hiểu sao lúc code lại viết ntn
                            //this.lessonToMark.list_chapters = this.list_chapters
                            if (response.data.Status) {
                                this.lessonToMark.data = response.data.Data
                                //debugger
                                //for (var i = 0; i < this.lessonToMark.data.length; i++) {
                                //    var item = this.lessonToMark.data[i]
                                //    //debugger
                                //    for (var j = 0; j < item.listLesson.length; j++) {
                                //        var lesson = item.listLesson[j]
                                //        this.list_lessons.push(lesson) //xong rồi push vào để làm gì
                                //    }
                                //}
                                //debugger
                            }
                            else {
                                //alert(response.data.Error)
                                console.log(response.data.Error)
                            }
                            this.isLoading = false
                        }).catch(e => { this.isLoading = false })
                },
                ShowDetailLessonToMark(listExam, courseName, Title,ID) {
                    //debugger
                    this.lessonToMark.courseName = courseName
                    this.lessonToMark.title = Title
                    this.lessonToMark.dataDetail = []
                    if (listExam.length > 0) {
                        for (var i = 0; i < listExam.length; i++) {
                            var exam = listExam[i]
                            if (exam.LessonID == ID) {
                                this.lessonToMark.dataDetail.push(exam)
                            }
                        }
                    }
                    //this.lessonToMark.dataDetail = listExam
                    this.$bvModal.show("LessonToMark-modal")
                },
                filterChapter(ChapterID,obj) {
                    var listChapters = this.list_chapters
                    if (obj) {
                        for (var i = 0; i < obj.length; i++) {
                            var item = obj[i]
                            var parentItem = []
                            if (item.ID == ChapterID) {
                                if (item.ParentID != "0") {
                                    parentItem = listChapters.find(x => x.ID == item.ParentID)
                                    return item.Name + " - " + (parentItem == null ? "" : parentItem.Title)
                                }
                                else {
                                    return item.Name
                                }
                            }
                        }
                    }
                },
                showWeekLesson(start) {
                    let _that = this
                    let _form = new FormData()
                    var _date = moment(start);
                    if (!_date._isValid || _date < moment(new Date(2000, 1, 1)))
                        _date = moment();
                    date = _date.format("YYYY-MM-DD")
                    _form.append('today', date)
                    _form.append('ClassID', '@currentClass.ID')
                    _form.append('seekStart', false)
                    let _url = '@processUrl("GetThisWeekLesson", "Class")'

                    axios.post(_url, _form)
                        .then(response => {
                            //console.log("Week")
                        _that.lesson_week = response.data.data;
                        }).catch(e => { })

                    this.weekTitle = "Danh sách bài - Tuần " + this.formatShortDate(_date) + " - " + this.formatShortDate(_date.add(6, 'days'));
                    this.$bvModal.show("model_week_lesson")
                },
                ResetExam(obj) {
                    if (window.confirm("Cảnh báo: Thao tác này sẽ xoá tất cả lịch sử kiểm tra của học sinh trong bài kiểm tra này.")) {
                        let _that = this
                        let _form = new FormData()
                        let _url = '@processUrl("ResetExam","Exam")'
                        _form.append("LessonID", obj.LessonID)
                        if (obj.ListExam.length > 0)
                            _form.append("ExamID", obj.ListExam[0].ExamID)
                        axios.post(_url, _form)
                            .then(response => {
                                if (response.data.code == 405) {
                                    alert("Bạn không có quyền thao tác chức năng này.")
                                }
                                else {
                                    alert(response.data.Msg)
                                }
                            })
                            .catch(e => { alert(e) })
                    }
                },
                autoCreateExam() {
                    let _that = this
                    let _form = new FormData()
                    let _url = '@processUrl("AutoCreateExam","CloneLessonPart")'
                    var multiple = document.getElementById('Multiple').value
                    _form.append("Title", _that.exam.name)
                    _form.append("Timer", _that.exam.timer)
                    _form.append("Limit", _that.exam.limit)
                    _form.append("Multiple", multiple)
                    _form.append("Etype", _that.exam.etype)
                    _form.append("StartTime", _that.exam.startTime)
                    _form.append("EndTime", _that.exam.endTime)
                    _form.append("TotalPart", _that.exam.totalpart)
                    _form.append("ClassID", '@currentClass.ID')
                    for (var i = 0; i < this.exam.listClassSubject.length; i++) {
                        _form.append("classSubjectIDs", this.exam.listClassSubject[i])
                    }
                    this.isLoading = true
                    axios.post(_url, _form)
                        .then(response => {
                            //debugger
                            var stt = response.data.Status
                            if (stt) {
                                alert(response.data.Message)
                                //var data = response.data.Data
                                //this.hideModal('autocreateexam-modal-xl');

                                //var listliexam = $("[classsubject=" + data.ClassSubjectID + "]").parent()
                                //var html = '<li class="sub-practice pt-2 pb-1 pl-2 rounded" classsubject="' + data.ClassSubjectID + '"><div class="d-flex w-100 flex-column flex-md-row align-items-start align-items-md-center"><a ' +
                                //    'href="/eduso/teacher/Lesson/Detail/' + data.ID + '/' + data.ClassSubjectID + '" title="' + data.Title + '" class="flex-grow-1 overflow-hidden text-dark" style="text-overflow: ellipsis;"><span ' +
                                //    'class="text-danger"><i class="ic far fa-edit mr-2"></i>' +
                                //    data.Title +
                                //    ' </span></a> <div class="picker-schedule d-flex align-items-center"><div class="input-group date date st mr-2"><input type="text" readonly="readonly" class="form-control" style="font-size: ' +
                                //    '95%;"></div> <div class="input-group date date ed mr-2 ml-0"><input type="text" readonly="readonly" class="form-control" style="font-size: 95%;"></div> <i title="Xóa lịch học" class="fas fa-redo ic-ac d-flex align-' +
                                //    'items-center mr-2"></i></div></div></li>';

                                //listliexam.append(html)
                                location.reload()
                            }
                            else {
                                alert(response.data.Message)
                            }
                            this.isLoading = false
                        })
                        .catch(e => {
                            alert(e)
                            this.isLoading = false
                        })
                },
                selectAllClassSubject(classsubjects) {
                    var status = $("#selectAllClassSubject").prop('checked')
                    if (status) {
                        this.exam.listNameClassSubject = ""
                        for (var i = 0; i < classsubjects.length; i++) {
                            if (classsubjects[i].TypeClass != '@BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM')
                            {
                                this.exam.listNameClassSubject += classsubjects[i].Title + "; "
                                this.exam.listClassSubject.push(classsubjects[i].ID)
                            }
                        }
                    }
                    else {
                        this.exam.listNameClassSubject = ""
                        this.exam.listClassSubject = []
                    }
                },
                showAutoCreateExam(obj) {
                    this.exam.name = ''
                    this.exam.timer = 0
                    this.exam.limit = 0
                    this.exam.listClassSubject = []
                    this.exam.listNameClassSubject = ''
                    this.exam.totalpart = ''
                    this.exam.startTime = ''
                    this.exam.endTime = ''
                    this.$bvModal.show("autocreateexam-modal-xl")
                },
                selectedTime() {
                    var value = $("#selectedTime option:selected").val();
                    if (value.includes('weekAgo')) {
                        var now = new Date();
                        var pre_week_start = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (8 - now.getDay()));
                        var pre_week_end = new Date(pre_week_start.getFullYear(), pre_week_start.getMonth(), pre_week_start.getDate() + 6);

                        this.exam.startTime = this.formatYYYYMMDShortDate(pre_week_start)
                        this.exam.endTime = this.formatYYYYMMDShortDate(pre_week_end)
                    }
                    else if (value.includes('monthAgo')) {
                        var now = new Date();
                        var pre_month_start = new Date(now.getFullYear(), now.getMonth() - 1, 1);
                        var pre_month_end = new Date(now.getFullYear(), now.getMonth() - 1 + 1, 0);

                        this.exam.startTime = this.formatYYYYMMDShortDate(pre_month_start)
                        this.exam.endTime = this.formatYYYYMMDShortDate(pre_month_end)
                    }
                    else {
                        this.exam.startTime = ''
                        this.exam.endTime = ''
                    }
                }
            }
        });

        var loadCheckPointData = function (data, questions) {
            var className = data.ClassName;
            var lessonName = data.LessonName;
            var studentName = data.StudentName;
            var teacherName = data.TeacherName;
            var point = data.Point;
            var questionsDone = data.QuestionsDone;
            var questionsPass = data.QuestionsPass;
            var questionsTotal = data.QuestionsTotal;
            var number = data.Number;
            var modalBody = $('#modal_essay')[0].querySelector('.modal-body');
            modalBody.innerHTML = '<div class="form-group"><label> Bài tự luận của ' + studentName + '</label></div>';
            for (var i = 0; i < data.Parts.length; i++) {
                var part = data.Parts[i];
                if (part.Type == "ESSAY") {
                    var title = part.Title;
                    var des = part.Description;
                    modalBody.innerHTML += '<div class="form-group"><label>Tiêu đề : </label><div>' + title + '</div></div>';
                    modalBody.innerHTML += '<div class="form-group"><label>Nội dung : </label><div>' + des + '</div></div>';
                    var htmlQuestion = '';
                    for (var j = 0; j < part.ExamDetails.length; j++) {
                        var question = part.ExamDetails[j];
                        htmlQuestion += '<div class="item-question">';
                        htmlQuestion += '<div class="form-group"><label>Đáp án : </label><div>' + question.AnswerValue + '</div></div>';
                        htmlQuestion += '<div class="form-group"><label>Điểm : </label><div><input type="number" value="0"/></div></div>';
                        htmlQuestion += '<div class="form-group"><label>Lời giải : </label><quill-editor  ref="quillEditorC" :options="editorOption"></quill-editor></div>';
                        htmlQuestion += '</div>';
                    }
                    modalBody.innerHTML += '<div class="list-question">' + htmlQuestion+'</div>';
                }
            }

        }

        var createInfoParts = function () {

        }

        var toggleTooltips = function(obj)
        {
            $(obj).find('i').tooltip({
                position: {
                    my: "center bottom-10",
                    at: "center top",
                    using: function (position, feedback) {
                        $(this).css(position);
                        $("<div>")
                            .addClass("arrow")
                            .addClass(feedback.vertical)
                            .addClass(feedback.horizontal)
                            .appendTo(this);
                    }
                },
                show: {
                    delay: 25
                }
            });
        }

        var showCoefficient = function (obj) {
        //alert(obj.value)
            var typeExam = obj.value;
            if (typeExam == '@BaseCustomerEntity.Database.LESSON_ETYPE.PRACTICE') {
                document.getElementById('Multiple').value = '1';
            }
            else if (typeExam == '@BaseCustomerEntity.Database.LESSON_ETYPE.WEEKLY') {
                document.getElementById('Multiple').value = '2';
            }
            else if (typeExam == '@BaseCustomerEntity.Database.LESSON_ETYPE.CHECKPOINT') {
                document.getElementById('Multiple').value = '3';
            }
            else {
                return false;
            }
        }

        var check = false;
        function showSelect() {

            if (check == false) {
                $('#selectClassSubject').attr('style', 'display:block');
                check = true;
            }
            else {
                $('#selectClassSubject').attr('style', 'display:none');
                check = false;
            }
        }

    </script>
}
@section Modals{

    <b-modal :no-close-on-backdrop="true" id="modal_event" centered title="Cập nhật tài liệu tham khảo" size="xl">
        <b-col class="form-group">
            <label for="">Tên tài liệu</label>
            <input type="text" name="" value="" class="form-control" placeholder="Tên tài liệu" v-model="addRef.Title">
        </b-col>

        <b-col class="form-group">
            <label for="">Chuyên mục: </label>
            <select class="col-sm-4" v-model="addRef.subjectID">
                <option value="">Chọn chương trình</option>
                <option v-for="(item,k) in list_subject" :value="item.ID" v-if="addRef.subjectID==item.ID">{{item.Name}}</option>
                <option v-for="(item,k) in list_subject" :value="item.ID" v-else>{{item.Name}}</option>
            </select>
            <select class="col-sm-4" v-model="addRef.gradeID">
                <option value="">Cấp độ</option>
                <option v-for="(item,k) in list_grades_full" :value="item.ID" v-if="item.SubjectID==addRef.subjectID">{{item.Name}}</option>
            </select>
        </b-col>

        <b-col class="form-group row">
            <div class="col-sm-4">
                <label for="">Ảnh bìa</label>
                <input type="file" name="CoverImage" id="CoverImage" v-on:change="changeFile()">
            </div>
            <div class="col-sm-8">
                <img :src="addRef.Image" style="max-width:200px;max-height:150px" />
            </div>
        </b-col>
        <b-col class="form-group">
            <label for="">Mô tả</label>
            <quill-editor v-model="addRef.Description"
                          ref="quillEditorA"
                          :options="editorOption">
            </quill-editor>
        </b-col>
        <b-col class="form-group">
            <label for="">Link liên kết</label>
            <input type="text" name="" value="" class="form-control" placeholder="Link liên kết" v-model="addRef.Link">
        </b-col>

        <b-col class="form-group">
            <label class="col-form-label">File đính kèm:</label>
            <i class="ic ic-paper-clip"></i><label class="p-1" ref="filedsp" v-on:click="$refs.file.click()">{{shortenString(addRef.FileName)}} - (Click để chọn)</label>
            <input type="file" ref="file" class="d-none" v-on:change="changeFile()">
        </b-col>
        <b-col class="form-group" v-if="addRef.isCheckDownload">
            <label class="col-form-label">Download:</label>
            <input type="checkbox" name="isDownload" id="isDownload" v-model="addRef.isDownload">
        </b-col>

        <b-col class="form-group">
            <label class="col-form-label">Phạm vi chia sẻ:</label>
            <select name="range" onchange="ChooseRange()" id="refRange" class="form-control d-inline w-25" v-model="addRef.Range">
                <option value="@BaseCustomerEntity.Database.REF_RANGE.ALL">Chung</option>
                <option value="@BaseCustomerEntity.Database.REF_RANGE.TEACHER">Tất cả lớp phụ trách</option>
                <option value="@BaseCustomerEntity.Database.REF_RANGE.CLASS">Riêng trong lớp</option>
            </select>
            <select name="target" id="refTarget" v-model="addRef.Target" class="form-control d-inline w-25" v-if="addRef.Range == '@BaseCustomerEntity.Database.REF_RANGE.CLASS'">
                <option value="@currentClass.ID">@currentClass.Name</option>
            </select>
        </b-col>

        <b-col class="form-group">
            <label for="">Tag</label>
            <input type="text" name="" value="" class="form-control" placeholder="Tag" v-model="addRef.tags">
        </b-col>

        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="updateRef()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>

    <b-modal :no-close-on-backdrop="true" id="modal_essay" centered title="Check point">
        <b-col class="form-group">
            <label>Bài tự luận của {{checkpoint.StudentName}}</label>
        </b-col>
        <b-col class="list-item" v-for="part in checkpoint.Parts">
            <b-col class="item" v-if="part.Type=='ESSAY'">
                <b-col class="form-group">
                    <label>Tiêu đề : </label>
                    <b-col v-html="part.Title"></b-col>
                    <label>Nội dung :</label>
                    <b-col v-html="part.Description"></b-col>
                </b-col>
                <b-col class="list-question" v-for="question in part.ExamDetails">
                    <b-col class="question">
                        <label>Câu trả lời : </label>
                        <b-col v-html="question.AnswerValue"></b-col>
                    </b-col>
                    <b-col class="answer" :data-id="question.ID">
                        <label>Điểm : <input type="number" v-model="question.Point" /></label>
                        <br />
                        <label>Đáp án :</label>
                        <label>File : </label><input type="file" name="files" :data-target="question.ID" value="" multiple />
                        <quill-editor v-model="question.RealAnswerValue"
                                      ref="quillEditorA"
                                      :options="editorOption">
                        </quill-editor>
                    </b-col>
                </b-col>
            </b-col>
        </b-col>
        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" onclick="updateCheckPoint()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>

    <b-modal :no-close-on-backdrop="true" id="modal_lesson_detail" size="xl" centered title="Kết quả bài học" style="width:800px">
        <div class="row">
            <div class="col-md-12">
                <div class="flex border-b pb-3 justify-content-between">
                    <div class="flex width-100">
                        <label class="label"><b style="font-size:120%"> {{lesson_result.Title}} </b></label>
                        <input type="hidden" value="{{lesson_result.ID}}" />
                    </div>
                </div>
                <table id="st_table" class="table">
                    <thead>
                        <tr class="text-center">
                            <th rowspan="2" class="align-middle">STT</th>
                            <th rowspan="2" class="align-middle">Tên học viên</th>
                            <th rowspan="2" class="align-middle">Số lượt làm bài</th>
                            <th colspan="3">Điểm </th>
                            <th colspan="3">Lượt làm cuối</th>
                        </tr>
                        <tr class="text-center">
                            <th>Thấp nhất</th>
                            <th>Cao nhất</th>
                            <th>Trung bình</th>
                            <th>Thời gian</th>
                            <th>Trạng thái</th>
                            <th>Điểm</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item,k) in result_data" v-on:click="openHistory(item)">
                            <td class="text-center">{{k+1}}</td>
                            <td>{{item.StudentName}}</td>
                            <td class="text-center">{{item.TriedCount}}</td>
                            <td class="text-center">{{roundPoint(item.MinPoint,2)}}</td>
                            <td class="text-center">{{roundPoint(item.MaxPoint,2)}}</td>
                            <td class="text-center">{{roundPoint(item.AvgPoint,2)}}</td>
                            <td class="text-center">{{formatTime(item.LastTried)}}</td>
                            <td class="text-center">{{item.IsCompleted ? "Hoàn thành": (item.TriedCount > 0 ? "Chưa hoàn thành": "Chưa làm")}}</td>
                            <td class="text-center">{{roundPoint(item.LastPoint,2)}}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <template v-slot:modal-footer>
            <b-button variant="danger" v-on:click="hideModal()">Đóng</b-button>
        </template>
    </b-modal>

    <b-modal :no-close-on-backdrop="true" id="modal_history" size="xl" centered title="Lịch sử làm bài">
        <div class="row">
            <div class="col-md-12">
                <template v-if="student_result.History.length > 0">
                    <table id="table_point" class="table">
                        <thead>
                            <tr class="text-center">
                                <th scope="col" class="text-center">#</th>
                                <th scope="col" class="text-center">Giờ bắt đầu</th>
                                <th scope="col" class="text-center">Giờ kết thúc</th>
                                <th scope="col" class="text-center">Thời gian làm</th>
                                <th scope="col" class="text-center">Trạng thái</th>
                                <th scope="col" class="text-center">Điểm</th>
                                <th scope="col" class="text-center"></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(item,k) in student_result.History">
                                <td class="text-center">{{k+1}}</td>
                                <td class="text-center">{{formatTime(item.Created)}}</td>
                                <td class="text-center">{{item.Status ? formatTime(item.EndTime): "---"}}</td>
                                <td class="text-center">{{getPeriod(item)}}</td>
                                <td class="text-center">{{item.Status ? "Hoàn thành": "Chưa hoàn thành"}}</td>
                                <td class="text-center">{{item.MaxPoint > 0 ? roundPoint((item.Point * 100 / item.MaxPoint),1) : 0}}</td>
                                <td class="text-center"><a v-if="item.Status" :href="'@processUrl("CheckPoint","Class")?ID=' + item.ExamID" target="_blank">Xem chi tiết</a></td>
                            </tr>
                        </tbody>
                    </table>
                </template>
                <template v-else>
                    Chưa có lịch sử học tập
                </template>
            </div>
        </div>

        <template v-slot:modal-footer>
            <b-button variant="danger" v-on:click="hideModal('modal_history')">Đóng</b-button>
        </template>
    </b-modal>

    <b-modal :no-close-on-backdrop="true" id="modal_preview" centered title="Xem tài liệu tham khảo" size="xl">
        <b-col class="form-group">
            <embed class="embed-frame col-sm-12" frameborder="0" :src="linkFile + '#toolbar=0&navpanes=0&scrollbar=0&view=FitH'" v-if="linkFile.toLowerCase().endsWith('.pdf')" style="min-height:500px;"></embed>
            <iframe class="embed-frame col-sm-12" frameborder="0" :src="'https://view.officeapps.live.com/op/embed.aspx?src='+ linkFile" v-else style="min-height:500px;"></iframe>
        </b-col>

        <template v-slot:modal-footer="{ ok, cancel}">
            @*<template v-if="isLoading">
                    <b-button>Đang thực hiện...</b-button>
                </template>*@
            <template>
                <b-button variant="danger" v-on:click="hideModal()">Đóng</b-button>
            </template>
        </template>
    </b-modal>

    <b-modal id="detailStudentSummary_modal" size="xl" :title="studentSummary.studentName + ' - ' + studentSummary.className">
        <div class="modal-body">
            <template v-if="isLoading">
                <div style="text-align:center">
                    <span>Đang tải dữ liệu ...</span><br />
                    <b-spinner label="Loading..."></b-spinner>
                </div>
            </template>
            <template v-else>
                <div style="padding-bottom:5px;font-size:80%;color:red;font-style:italic">Điểm trung bình được tính trên tổng các bài đã giao của các môn</div>
                <table id="table_point" class="table">
                    <thead>
                        <tr>
                            <th rowspan="2" style="width:50px">STT</th>
                            <th rowspan="2">Môn học</th>
                            <th rowspan="2" style="width:130px">Điểm luyện tập</th>
                            <th :colspan="studentSummary.dataExam.length > 0 ? studentSummary.dataExam.length : 1" style="width:390px">Điểm kiểm tra</th>
                        </tr>
                        <tr>
                            @*<th style="width:130px">Bài kiểm tra 1</th>
                                <th style="width:130px">Bài kiểm tra 2</th>
                                <th style="width:130px">Bài kiểm tra 3</th>*@
                            <th v-for="(item,k) in studentSummary.dataExam" v-if="studentSummary.dataExam.length > 0">Bài số {{k+1}}</th>
                            <th v-if="studentSummary.dataExam.length == 0">Chưa có dữ liệu kiểm tra</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template>
                            <tr v-for="(itemSummary,i) in studentSummary.dataPractice">
                                <td>{{itemSummary.Order}}</td>
                                <td v-on:click="test(itemSummary)">{{itemSummary.CourseName}} (Đã giao: {{itemSummary.TotalLessons}})</td>
                                <td>{{roundPoint(itemSummary.PracticeAvgPoint,1)}}</td>
                                <template v-if="studentSummary.dataExam.length == 0 && itemSummary.Order == 1">
                                    <td>---</td>
                                </template>
                                <template v-else-if="itemSummary.Order == 1">
                                    <td v-for="(item,k) in studentSummary.dataExam">{{roundPoint(item.point,1)}}</td>
                                    @*<td>{{roundPoint(studentSummary.dataExam[0].multiple1,1)}}</td>
                                        <td>{{roundPoint(studentSummary.dataExam[0].multiple2,1)}}</td>
                                        <td>{{roundPoint(studentSummary.dataExam[0].multiple3,1)}}</td>*@
                                </template>
                                <template v-else>
                                    <td v-for="(item,k) in studentSummary.dataExam" v-if="studentSummary.dataExam.length > 0"></td>
                                    <td v-if="studentSummary.dataExam.length == 0"></td>
                                </template>
                            </tr>
                            <tr style="font-weight:bold">
                                <td colspan="2">Điểm trung bình</td>
                                <td>{{roundPoint(studentSummary.avgPointPractice,1)}}</td>
                                <td :colspan="studentSummary.dataExam.length > 0 ? studentSummary.dataExam.length : 1">{{roundPoint(studentSummary.avgPointExam,1)}}</td>
                            </tr>

                        </template>
                    </tbody>
                </table>
            </template>
        </div>
        <template v-slot:modal-footer="{ ok, cancel}">
            <b-button variant="danger" v-on:click="hideModal()">Đóng</b-button>
        </template>
    </b-modal>

    <b-modal id="model_week_lesson" size="xl" :title="this.weekTitle">
        <div class="modal-body">
            <template v-if="lesson_week.length > 0">
                <table id="table_point" class="table">
                    <thead>
                        <tr>
                            <th style="width:50px">STT</th>
                            <th>Bài</th>
                            <th>Chương</th>
                            <th>Học liệu</th>
                            <th>Thời gian mở</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item,k) in lesson_week">
                            <td>{{k+1}}</td>
                            <td class="td_hover"><a :href="'@processUrl("Detail","Lesson")'+'/'+ item.lessonID +'/'+ item.classsubjectID" target="_blank">{{item.title}}</a></td>
                            <td>{{item.chapterName}}</td>
                            <td>{{item.bookName}}</td>
                            <td>{{formatTime(item.startDate)}} - {{formatTime(item.endDate)}}</td>
                        </tr>
                    </tbody>
                </table>
            </template>
            <template v-else>
                Không có bài
            </template>
        </div>
        <template v-slot:modal-footer="{ ok, cancel}">
            <b-button variant="danger" v-on:click="hideModal()">Đóng</b-button>
        </template>
    </b-modal>

    <b-modal id="detailLessonInWeek-modal" size="xl" :title=" result_data.length > 0 ? result_data[0].StudentName : ''">
        <div class="modal-body">
            <template v-if="result_data.length > 0">
                <table id="table_point" class="table">
                    <thead>
                        <tr>
                            <th style="width:50px">STT</th>
                            <th>Bài</th>
                            <th style="width:100px">Số lượt làm</th>
                            <th style="width:150px">Thời gian</th>
                            <th style="width:150px">Trạng thái</th>
                            <th style="width:50px">Điểm</th>
                            <th style="width:100px"></th>
                            <th style="width:50px" v-if="isExam && '@currentuser' == '5d8389c2d5d1bf27e4410c04'"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item,k) in result_data">
                            <td>{{k+1}}</td>
                            <td class="td_hover" v-on:click="openHistory(item)">{{item.LessonName}}</td>
                            <td>{{item.TriedCount}}</td>
                            @*<td>{{convertPoint(item.MinPoint)}}</td>
                                <td>{{convertPoint(item.MaxPoint)}}</td>
                                <td>{{convertPoint(item.AvgPoint)}}</td>*@
                            <td>{{formatTime(item.LastTried)}}</td>
                            <td>{{item.IsCompleted ? "Hoàn thành": (item.TriedCount > 0 ? "Chưa hoàn thành": "Chưa làm")}}</td>
                            <td>{{roundPoint(item.LastPoint,1)}}</td>
                            <td><a :href="'@processUrl("Detail","Lesson")'+'/'+item.LessonID +'/'+ item.ClassSubjectID" target="_blank">Mở bài học</a></td>
                            <td v-if="isExam && '@currentuser' == '5d8389c2d5d1bf27e4410c04'"><i class="fas fa-redo" v-on:click="ResetExam(item)"></i></td>
                        </tr>
                    </tbody>
                </table>
            </template>
            <template v-else>
                Không có dữ liệu
            </template>
        </div>
        <template v-slot:modal-footer="{ ok, cancel}">
            <b-button variant="danger" v-on:click="hideModal()">Đóng</b-button>
        </template>
    </b-modal>

    <b-modal id="progessmodal-xl" size="xl" :title="progessSbj.title +' (' + formatShortDate(progessSbj.startTime) + ' - ' + formatShortDate(progessSbj.endTime) +')'">
        <div class="modal-body">
            <table class="table" id="table_point">
                <thead>
                    <tr>
                        <th rowspan="2">STT</th>
                        <th rowspan="2">Chương</th>
                        <th rowspan="2">Bài</th>
                        <th colspan="4">Điểm</th>
                        <th rowspan="2">Chưa làm</th>
                    </tr>
                    <tr>
                        <th>8.0 - 10</th>
                        <th>5.0 - 7.9</th>
                        <th>2.0 - 4.9</th>
                        <th>0.0 - 1.9</th>
                        @* <th>Tổng</th>*@
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(item,k) in progessSbj.data">
                        <td>{{k+1}}</td>
                        <td class="td_hover" v-on:click="DetailProgessLesson(item.scheduleID,item.title,item)">{{item.chapterName}}</td>
                        <td class="td_hover" v-on:click="DetailProgessLesson(item.scheduleID,item.title,item)">{{item.title}}</td>
                        <td class="color-minpoint8">{{item.minPoint8}}</td>
                        <td class="color-minpoint5">{{item.minPoint5}}</td>
                        <td class="color-minpoint2">{{item.minPoint2}}</td>
                        <td class="color-minpoint0">{{item.minPoint0}}</td>
                        <td class="color-dontwork">{{parseInt(@currentClass.TotalStudents) - item.minPoint8 - item.minPoint5 - item.minPoint2 - item.minPoint0}}/@currentClass.TotalStudents</td>
                        @*<td>{{item.examCount}}/@currentClass.TotalStudents</td>*@
                    </tr>
                </tbody>
            </table>
        </div>

        <template v-slot:modal-footer="{ ok, cancel}">
            <b-button variant="danger" v-on:click="hideModal('progessmodal-xl')">Đóng</b-button>
        </template>
    </b-modal>

    <b-modal id="detailLessonInClass-modal" size="xl" :title="detailProgessLesson.title">
        <div class="modal-body">
            <template v-if="detailProgessLesson.dataLesson.length > 0">
                <table id="table_point" class="table">
                    <thead>
                        <tr>
                            <th style="width:50px">STT</th>
                            <th>Họ tên</th>
                            <th style="width:100px">Số lượt làm</th>
                            <th style="width:150px">Thời gian</th>
                            <th style="width:150px">Trạng thái</th>
                            <th style="width:50px">Điểm</th>
                            <th style="width:100px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item,k) in detailProgessLesson.dataLesson">
                            <td>{{k+1}}</td>
                            <td class="td_hover">{{item.studentName}}</td>
                            <td>{{item.totalLearn}}</td>
                            <td>{{formatTime(item.Created)}}</td>
                            <td>{{item.Status ? "Hoàn thành": (item.totalLearn > 0 ? "Chưa hoàn thành": "Chưa làm")}}</td>
                            <td>{{roundPoint(item.LastPoint,1)}}</td>
                            <td class="text-center"><a v-if="item.Status" :href="'@processUrl("CheckPoint","Class")?ID=' + item.ID" target="_blank">Xem chi tiết</a></td>
                        </tr>
                    </tbody>
                </table>
            </template>
            <template v-else>
                Không có dữ liệu
            </template>
        </div>

        <div class="modal-body" v-if="detailProgessLesson.isShow">
            <table class="table" id="table_point">
                <thead>
                    <tr>
                        <td colspan="4" style="text-align:center;border:0.5px solid gray">{{detailProgessLesson.title}}</td>
                    </tr>
                    <tr>
                        <td style="width:30px;text-align:center;border:0.5px solid gray">#</td>
                        <td></td>
                        <td style="width:100px;text-align:center;border:0.5px solid gray">Tỉ lệ làm đúng</td>
                        <td style="width:100px;text-align:center;border:0.5px solid gray">Tỉ lệ làm sai</td>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(item,k) in detailProgessLesson.data">
                        <td>{{k+1}}</td>
                        <td style="text-align:left;padding-left:10px">{{item.titleLessonPart}}</td>
                        <td :style="[getPercent(item.countTrue,item.totalAns)>50 ? {'background-color':'lightgreen'}:{'background-color':''}]">{{getPercent(item.countTrue,item.totalAns).toFixed(2)}}%</td>
                        <td :style="[getPercent(item.countFalse,item.totalAns)>50 ? {'background-color':'#ff454d'}:{'background-color':''}]">{{getPercent(item.countFalse,item.totalAns).toFixed(2)}}%</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <template v-slot:modal-footer="{ ok, cancel}">
            <b-button variant="danger" v-on:click="hideModal()">Đóng</b-button>
        </template>
    </b-modal>

    <b-modal id="LessonToMark-modal" size="xl" :title="lessonToMark.title + ' - ' + lessonToMark.courseName">
        <div class="modal-body">
            <template v-if="lessonToMark.dataDetail.length > 0">
                <table id="table_point" class="table">
                    <thead>
                        <tr>
                            <th style="width:50px">STT</th>
                            <th>Họ tên</th>
                            <th>Bài</th>
                            <th style="width:100px">Điểm</th>
                            <th style="width:100px">Trạng thái</th>
                            <th style="width:100px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item,k) in lessonToMark.dataDetail">
                            <td>{{k+1}}</td>
                            <td class="td_hover">{{item.StudentName}}</td>
                            <td>{{lessonToMark.title}}</td>
                            <td>{{roundPoint(item.Point,1)}}</td>
                            <td>{{item.Marked == false? "Chưa chấm" : "Đã chấm"}}</td>
                            <td><a :href="'@processUrl("CheckPoint","Class")?ID=' + item.ID" target="_blank">Chấm bài</a></td>
                        </tr>
                    </tbody>
                </table>
            </template>
            <template v-else>
                Không có dữ liệu
            </template>
        </div>
        <template v-slot:modal-footer="{ ok, cancel}">
            <b-button variant="danger" v-on:click="hideModal()">Đóng</b-button>
        </template>
    </b-modal>

    <b-modal :no-close-on-backdrop="true" id="autocreateexam-modal-xl" centered title="Tự động tạo bài kiểm tra" :no-close-on-backdrop="true" size="xl">
        <div class="row form-group">
            <div class="col-md-12">
                <label class="label" for="nameexam">Tiêu đề</label>
                <input type="text" v-model="exam.name" id="nameexam" class="form-control" required />
            </div>
        </div>
        <div class="row form-group">
            <div class="col-md-6">
                <label class="label" for="">Thời gian (phút):</label>
                <input type="number" min="1" v-model="exam.timer" class="form-control" required />
            </div>
            <div class="col-md-6">
                <label class="label" for="">Giới hạn số lượt làm bài: </label>
                <input type="number" min="1" v-model="exam.limit" class="form-control" required />
            </div>
        </div>

        <div class="row form-group">
            <div class="col-md-6">
                <label class="label">Học liệu</label>
                <div class="col-sm-10 row p-0" style="position:relative">
                    <div class="col-sm-2">
                        <button type="button" tabindex="-1" data-toggle="dropdown" class="btn btn-default dropdown-toggle" onclick="showSelect()">
                            Chọn <span class="caret"></span>
                        </button>
                    </div>
                    <div class="col-sm-10">
                        <input type="text" class="form-control " v-model="exam.listNameClassSubject" disabled required />
                    </div>
                    <div class="col-sm-10 p-0" style="position:absolute;left:75px;top:40px;z-index:9999;background-color:white">
                        <div id="selectClassSubject" style="display:none;position:absolute;right:0px" class="col-sm-12">
                            <ul class="classSelect" role="menu" style="overflow-y:auto;height:150px;list-style:none">
                                <li>
                                    <a>
                                        <input type="checkbox" id="selectAllClassSubject" v-on:click="selectAllClassSubject(classSubjects)" /><span class="lbl"> Chọn tất cả </span>
                                    </a>
                                </li>
                                <li v-for="(item,k) in classSubjects">
                                    <a v-if="item.TypeClass != @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM">
                                        <input type="checkbox" :value="item.ID" v-model="exam.listClassSubject" />
                                        <span class="lbl" v-if="item.HasLessonActive"> {{item.CourseName}} <span style="font-size:80%">___ [ĐÃ GIAO]</span></span>
                                        <span class="lbl" v-else> {{item.CourseName}} </span>
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <label class="label" for="totalpart">Số câu</label>
                <input type="number" v-model="exam.totalpart" id="totalpart" class="form-control" min="1" required />
            </div>
        </div>

        <div class="row form-group">
            <div class="col-md-6">
                <label class="label">Chọn mốc thời gian</label>
                <select class="form-control" id="selectedTime" v-on:change="selectedTime()">
                    <option value="selectTime">Theo khoảng thời gian</option>
                    <option value="weekAgo">Tuần trước</option>
                    <option value="monthAgo">Tháng trước</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="label">Từ ngày</label>
                <input class="form-control" v-model="exam.startTime" type="date" required />
            </div>
            <div class="col-md-3">
                <label class="label">Đến ngày</label>
                <input class="form-control" v-model="exam.endTime" type="date" required />
            </div>
        </div>

        <div class="row form-group">
            <div class="form-group col-md-6" for="examOnly">
                <label class="col-form-label">Kiểu bài kiểm tra:</label>
                <select name="Etype" class="form-control" onchange="showCoefficient(this)" v-model="exam.etype" required>
                    <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.PRACTICE">Hệ số 1</option>
                    <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.WEEKLY">Giữa kì</option>
                    <option value="@BaseCustomerEntity.Database.LESSON_ETYPE.CHECKPOINT">Cuối kì</option>
                </select>
            </div>

            <div class="form-group col-md-6" for="examOnly">
                <label class="col-form-label">Hệ số:</label>
                <input type="text" class="form-control" name="Multiple" id="Multiple" placeholder="> 0" value="1" required readonly="readonly">
            </div>
        </div>

        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="autoCreateExam()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>

    <b-modal :no-close-on-backdrop="true" id="modal_student" centered title="Danh sách học viên trong nhóm" style="width:800px">
        <div class="row">
            <div class="col-md-12">
                <div class="flex border-b padding-b25 justify-content-between">
                    <div class="flex width-100">
                        <label class="label font-weight-bold">{{group_info.Name}} ({{group_student.length}} học viên)</label>
                        <input type="hidden" value="{{group_info.ID}}" />
                    </div>
                    @*<div class="flex">
                            <b-button class="btn-addevent btn-student btn-sm" v-on:click="showStudentAddModal()"><i class="ti-plus"></i></b-button>
                        </div>*@
                </div>
                <template v-if="student_data.length > 0">
                    <table id="st_table" class="table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Họ tên</th>
                                <th>Email</th>
                                <th>SĐT</th>
                                <th class="text-center" v-if="group_view_mode == 0">Trạng thái</th>
                            </tr>
                        </thead>
                        <tbody>
                            <template v-if="group_view_mode == 1">
                                <tr v-for="(item,k) in student_data.filter(t=> t.IsActive)" class="font-weight-bold">
                                    <td>{{k + 1}}</td>
                                    <td>{{item.FullName}}</td>
                                    <td>{{item.Email}}</td>
                                    <td>{{item.Phone}}</td>
                                </tr>
                            </template>
                            <template v-else>
                                <tr v-for="(item,k) in student_data" :class="item.IsActive ? 'font-weight-bold':''">
                                    <td>{{k + 1}}</td>
                                    <td>{{item.FullName}}</td>
                                    <td>{{item.Email}}</td>
                                    <td>{{item.Phone}}</td>
                                    <td class="text-center">
                                        <b-form-checkbox switch v-model="item.IsActive" v-on:change="toggleGroupStudent(item, group_info.ID)" class="mt-2">
                                        </b-form-checkbox>
                                    </td>
                                </tr>
                            </template>
                        </tbody>
                    </table>
                </template>
                <template v-else>
                    Chưa có học viên
                </template>
            </div>
        </div>

        <template v-slot:modal-footer>
            <b-button variant="danger" v-on:click="hideModal()">Đóng</b-button>
        </template>
    </b-modal>

}

@section TopStar{
    <div id="top_star" class="box p-3">
        <div class="heading flex pb-2">
            @{
                var current = DateTime.Now.Date;
                var startWeek = current.AddDays(DayOfWeek.Monday - current.DayOfWeek - 7);
                var endWeek = startWeek.AddDays(6);
            }
            <h4 class="box-head text-center" style="font-size:110%;">Top tuần @startWeek.ToString("dd/MM") - @endWeek.ToString("dd/MM")</h4>
        </div>
        <ul style="border: solid 1px #CCC; border-radius:10px;" class="p-2" v-if="list_star.length > 0">
            <template v-for="(item,k) in list_star">
                <li v-if="k < 10" class="p-2 list-unstyled">
                    <i class="fas fa-crown" style="color:gold" v-if="k==0"></i>
                    <i class="fas fa-crown" style="color:silver" v-else-if="k==1"></i>
                    <i class="fas fa-crown" style="color:saddlebrown" v-else-if="k==2"></i>
                    <i class="fas fa-star red-color" v-else></i>
                    <a :href="'@processUrl("Detail", "StudentManage")/' + item.StudentID"> <span class='pl-2' style="font-weight:500;font-size:13px;color: #222;"> {{item.StudentName}}<span> ({{ (item.AvgPoint / 10).toFixed(1)}})</span></a>
            </template>
        </ul>
    </div>
    <style>
        #top_star li:hover {
            background-color: #EEE;
            cursor: pointer;
        }
    </style>
    <script>
        new Vue({
        el: "#top_star",
            mounted() {
                this.getBestClassesLastWeek();
            },
            data: {
                list_star: []
            },
            methods: {
                getBestClassesLastWeek() {
                    let _form = new FormData()
                    _form.append('ClassID', '@currentClass.ID')
                    _form.append('limit', 5)
                    let _url = '@processUrl("GetBestStudents", "StudentManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            this.list_star = response.data.Data;
                        }).catch(e => { })
                },
            }
        });
    </script>

}