@{

    Layout = "~/Views/Shared/_LayoutTeacher_NewUI.cshtml";
    var currentClass = ViewBag.Class as BaseCustomerMVC.Models.ClassViewModel;
    ViewData["Title"] = currentClass.Name;
    var currentuser = User.Claims.Single(t => t.Type == "UserID").Value;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    string processUrl(string act, string ctrl, Object param = null)
    {
        string url = Url.Action(act, ctrl, param);

        return $"/{center}{url}";
    }
}
@*<script src="/libs/vuejs-datepicker.min.js"></script>*@
<link href="~/js/lib/datetimepicker/jq.datetimepicker.css" rel="stylesheet" />
<script src="~/js/lib/datetimepicker/php-date-formatter.min.js"></script>
<script src="~/js/lib/datetimepicker/jquery.mousewheel.js"></script>
<script src="~/js/lib/datetimepicker/jquery.datetimepicker.js"></script>

<script src="/libs/quill-editor/quill.min.js"></script>
<script src="/libs/quill-editor/quill-vue.min.js"></script>
<link href="/libs/quill-editor/quill.core.css" rel="stylesheet">
<link href="/libs/quill-editor/quill.snow.css" rel="stylesheet">
<link href="/libs/quill-editor/quill.bubble.css" rel="stylesheet">

<script>
    setActiveMenu("course");
</script>

<section class="module" id="dashboard_content">

    <div class="card-header" v-cloak>
        <div class="flex mb-2">
            <h2 class="title"><a href="@processUrl("Detail", "Class")" title="Quản lý môn học"><i class="ti-arrow-left d-none"></i></a>{{domDecoder(className)}}</h2>
            @*<div class="search-box mr-2" v-if="tab[2]">
                    <button><i class="ic ic-find"></i></button>
                    <input type="text" name="" placeholder="Search">
                </div>
                <div class="flex" v-if="tab[2]">
                    <b-button class="btn-addevent btn-student" v-on:click="showStudentModal()"><i class="ti-plus"></i></b-button>
                    <b-button class="btn-addevent btn-student" style="margin-left:5px" v-on:click="showStudentUploadModal()"><i class="ti-zip"></i></b-button>
                </div>*@
        </div>
        <div class="flex j-between border-b">
            <div class="tab bg-none">
                <ul class="flex">
                    <li v-bind:class="{active : tab[0]}"><a href="javascript:;" title="Tổng quan" v-on:click="tabChange()">Tổng quan</a></li>
                    <li v-bind:class="{active : tab[1]}"><a href="javascript:;" title="Môn học" v-on:click="tabChange(1)">Môn học</a></li>
                    <li v-bind:class="{active : tab[2]}"><a href="javascript:;" title="Học viên" v-on:click="tabChange(2)">Học viên</a></li>
                    <li v-bind:class="{active : tab[3]}"><a href="javascript:;" title="Tài liệu tham khảo" v-on:click="tabChange(3)">Tài liệu tham khảo</a></li>
                    @*<li v-bind:class="{active : tab[4]}"><a href="javascript:;" title="Trao đổi / thảo luận" v-on:click="tabChange(4)">Thảo luận</a></li>*@
                </ul>
            </div>
            <div class="c-right">
                <b-button class="btn-addevent" v-on:click="showRefModal()" v-if="tab[3]"><i class="ti-plus"></i></b-button>
            </div>
        </div>
    </div>
    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-body" v-cloak>
        <div class="box" v-if="tab[0]">
            <ul class="box list ls-overview mb-3">
                <li class="flex margin-b20">
                    <a href="#" class="thumb"><img :src="classImg" alt="" /></a>
                    <div class="c-right">
                        <p><span class="label">Tên lớp: </span>{{domDecoder(className)}}</p>
                        @*<p><span class="label">Mã lớp : </span>IELTS_PL5_1</p>*@
                        @*<p><span class="label">Cấp độ : </span>{{gradeName}}</p>*@
                        <p><span class="label">Chương trình: </span>{{domDecoder(subjectName)}}</p>
                        <p><span class="label">Môn học: </span>{{skillName}}</p>
                        <ul class="time-line flex">
                            <li><i class="ti-time"></i>Bắt đầu: {{formatShortDate(startDate)}} </li>
                            <li><i class="ti-time"></i>Kết thúc: {{formatShortDate(endDate)}} </li>
                        </ul>
                    </div>
                </li>
            </ul>
            <div class="box info-practice">
                <h4>Chi tiết lớp học</h4>
                <p v-html="replaceBrkLine(domDecoder(classDescription))"></p>
            </div>
        </div>
        <div class="box" v-if="tab[1]">
            <ul class="list ls-pratice">
                <li v-for="(obj,i) in classSubjects">
                    <div class="inner">
                        <a href="javascript:;" v-b-toggle="`collapse-${i}`" class="btn-collapse parent" v-on:click="loadContent(obj.ID)" :style="'color: ' + obj.Color"><i class="ic ic-headphone-o mr-1" :style="'background-image:url(' + obj.Image + ')'"></i>{{obj.Title +' (GV: ' + obj.Teacher + ')'}}</a>
                        <b-collapse :id="`collapse-${i}`" accordion="my-accordion-0" role="tabpanel">
                            <ul class="list">
                                <chap-content v-for="(item,k) in list_chapters" v-if="item.ClassSubject + '-' + item.Parent == obj.ID + '-'"
                                              v-bind:data="item"
                                              v-bind:classbj="obj.ID"
                                              v-bind:pos="k"
                                              v-bind:owner="obj.TeacherID"
                                              v-bind:subchaps="list_chapters"></chap-content>
                                <lesson-item v-for="lesson in filterLesson({ID:'0', ClassSubject: obj.ID})" v-bind:data="lesson" v-bind:owner="obj.TeacherID" v-bind:classSubject="obj.ID"></lesson-item>
                            </ul>
                        </b-collapse>

                    </div>
                </li>
            </ul>
        </div>
        <div class="box" v-if="tab[2]">
            <table id="ed_table" class="table">
                <thead>
                    <tr>
                        <th v-for="(field,k) in fields">{{field.label}}</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(item,k) in studentData">
                        <td>{{(k+1)}}</td>
                        <td><a :href="'@processUrl("StudentDetail", "Class")/' + item.StudentID + '/' + item.ClassID" :title="item.FullName">{{item.FullName}}</a></td>
                        <td class="text-danger" v-bind:class="{good : (getPercent(item.Completed, item.TotalLessons) > 50)}"> {{getPercent(item.Completed, item.TotalLessons).toFixed(2)}}%  ({{item.Completed}}/{{item.TotalLessons}})</td>
                        <td>{{formatTime(item.LastDate)}}</td>
                        <td class="text-danger" v-bind:class="{good : (item.AvgPoint > 50)}">{{item.AvgPoint.toFixed(2)}}%</td>
                        <td>{{item.Rank > 0 ? (item.Rank + '/' + item.TotalStudents)  : '---'}}</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="box" v-if="tab[3]">
            <div class="row ls-doc" v-if="ref.data.length > 0">
                <div class="col-md-12" v-for="data in ref.data">
                    <div class="inner flex">
                        <a href="#" title="" class="thumb">
                            <img src="/pictures/doc1.png" alt="">
                        </a>
                        <div class="entry">
                            <div>
                                <div>
                                    <a href="#" title="" class="title">{{data.Title}}</a>
                                </div>
                                <div>
                                    <div class="rating"><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i></div>
                                    <div class="author pt-2"><i class="icofont icofont-teacher"></i> {{data.OwnerName}}</div>
                                </div>
                            </div>
                            <div class="pt-2 pb-2">
                                <p>{{domDecoder(replaceBrkLine(data.Description))}}</p>
                            </div>
                            <div>
                                <a href="#" title="Xem" class="btn-view btn-success" v-on:click="openLink(data)" v-if="data.Link != null && data.Link.length > 0">Xem ({{data.Viewed}})</a>
                                <a href="#" v-if="data.Media != null" v-on:click="download(data)" :title="data.Media.Name" class="btn-download btn-info">Tải về ({{data.Downloaded}})</a>
                                <a href="#" title="Xóa" class="btn-view btn-danger" v-on:click="deleteRef(data)" v-if="data.OwnerID == '@currentuser'">Xóa</a>
                                <a href="#" title="Sửa" class="btn-view btn-secondary" v-on:click="showRefModal(data)" v-if="data.OwnerID == '@currentuser'">Sửa</a>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="row ls-doc text-center d-block" v-else>
                Không có tài liệu
            </div>
        </div>
        <div class="box margin-t20 flex" v-if="tab[3] && ref.data.length > 0">
            <div class="paging-view">
                Hiển thị:
                <select v-model="ref.view" v-on:change="loadPreference()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                <div class="right">
                    <b-pagination v-model="ref.page"
                                  :total-rows="ref.totalRec"
                                  :per-page="ref.view"
                                  v-on:input="loadPreference()"></b-pagination>
                </div>
            </div>
        </div>
        <div class="box" v-if="tab[4]">
            Thảo luận
        </div>
    </div>

</section>
@section Scripts{

    <style>
        .ls-pratice .card-body {
            overflow: visible;
        }

        .ls-pratice .list {
            max-height: none;
            overflow: visible;
        }

        .ls-pratice .date {
            width: 160px;
            padding: 2px 12px;
        }

            .ls-pratice .date::after {
                top: 7px;
            }

        .ls-pratice .sub-practice .status {
            padding: 10px
        }

        .input-group.date input {
            border: solid 1px #DDD !important;
            padding: 0 5px !important;
            width: 125px;
            border: none;
            padding: 0;
        }

            .input-group.date input:read-only {
                background: #FFF;
            }

            .input-group.date input:focus {
                outline: none !important;
            }

        .sub-practice:hover {
            background: #DDD;
        }

        .chap-item {
            border-bottom: dashed 1px #CCC;
        }

        ul > .chap-item:last-child {
            border-bottom: none;
        }
    </style>

    <script type="text/x-template" id="chapContentTemp">
        <li class="pr-0 ml-3 chap-item">
            <div class="inner pt-3 pb-3">
                <div class="d-flex align-items-center">
                    <a href="javascript:;" v-b-toggle="`prc-${data.ID}-${pos}`" class="blue-color btn-collapse flex-grow-1 mb-0" v-on:click="loadContent(data.ClassSubject, data.ID)">
                        <span class="align-self-center"><i class=" ic far fa-folder mr-2"></i>{{data.Title + ' (' + data.TotalLessons +  ')'}}<i class="ic ic-collapse"></i></span>
                    </a>
                    <div class="picker-schedule d-flex" v-if="owner == '@currentuser'">
                        <datepicker :date="data.StartDate" :idx="0" :obj="data" class="date st mr-2" v-on:input="updateChapSchedule(data, pos)"></datepicker>
                        <datepicker :date="data.EndDate" :idx="1" :obj="data" class="date ed mr-2 ml-0" v-on:input="updateChapSchedule(data, pos)"></datepicker>
                        <i class="ic fas fa-redo ic-clear-schedule d-flex align-items-center" title="Xóa lịch" v-on:click="clearChapSchedule(data, pos)"></i>
                    </div>
                </div>
                <b-collapse :id="`prc-${data.ID}-${pos}`" :accordion="`my-accordion-${data.Parent}`" role="tabpanel">
                    <b-card-body class="pr-0">
                        <ul class="list">
                            <chap-content v-for="(subItem,j) in subchaps" v-if="subItem.ClassSubject + '-' + subItem.Parent == classbj + '-' + data.ID"
                                          v-bind:data="subItem"
                                          v-bind:classbj="classbj"
                                          v-bind:pos="j"
                                          v-bind:owner="owner"
                                          v-bind:subchaps="subchaps"></chap-content>
                            <lesson-item v-for="lesson in filterLesson(data)" v-bind:data="lesson" v-bind:owner="owner" v-bind:classSubject="data.ClassSubject"></lesson-item>
                        </ul>
                    </b-card-body>
                </b-collapse>
            </div>
        </li>
    </script>

    <script type="text/x-template" id="lessonItemTemp">
        <li class="sub-practice pt-2 pb-1 pl-2 rounded">
            <div class="d-flex w-100 align-items-start">
                <a :href="'@processUrl("Detail", "Lesson")/' + data.ID + '/' + classSubject" class="flex-grow-1 overflow-hidden text-dark" style="text-overflow: ellipsis" :title="data.Title"> <span><i class="ic far fa-file-alt mr-2"></i>{{data.Title}}</span></a>
                <div class="picker-schedule d-flex align-items-center" v-if="owner == '@currentuser'">
                    <datepicker :date="data.StartDate" :idx="0" :obj="data" class="date st mr-2" v-on:input="updateSchedule(data)"></datepicker>
                    <datepicker :date="data.EndDate" :idx="1" :obj="data" class="date ed mr-2 ml-0" v-on:input="updateSchedule(data)"></datepicker>
                    <i class="ic fas fa-redo ic-clear-schedule d-flex align-items-center" v-bind:class="{active: data.IsOnline == true}" title="Xóa lịch học" v-on:click="clearSchedule(data)"></i>
                    <i class="ic ic-online-class" v-bind:class="{active: data.IsOnline == true}" title="Bật/ tắt học trực tuyến" v-on:click="toggleOnlineClass(data)"></i>
                </div>
                <div class="d-flex picker-schedule" v-else>
                    <div class="input-group date date st bg-light"><input type="text" class="form-control bg-light" disabled="disabled" :value="formatTime(data.StartDate)"></div>
                    <div class="input-group date date ed bg-light"><input type="text" class="form-control bg-light" disabled="disabled" :value="formatTime(data.EndDate)"></div>
                    <i class="ic ic-online-class" v-bind:class="{active: data.IsOnline == true}" title="Bật/ tắt học trực tuyến"></i>
                </div>
                <div class="status" v-if="owner == '@currentuser'">
                    <b-form-checkbox switch v-model="data.IsActive" v-on:change="toggleLessonState(data)"></b-form-checkbox>
                </div>
            </div>
        </li>
    </script>

    <script>
        Vue.use(VueQuillEditor)

        Vue.component('chap-content', {
            template: '#chapContentTemp',
            props: {
                subchaps: Array,
				classbj: String,
                lessons: Array,
                data: Object,
                pos: String,
                owner: String,
            }
        })

        Vue.component('lesson-item', {
            template: '#lessonItemTemp',
            props: {
                data: Object,
                classSubject: String,
                owner: String
            }
        })

        var datepickerComponent = Vue.extend({
          //v-el:select
          template: `<div class="input-group date" ref="inputgroup">` +
            `<input type="text" class="form-control" v-model="dateVal" readonly="readonly">` +
            `</div>`,
            props: {
                obj: '',
                idx: '0',
                date: '2015-01-01'
            },
            data: function () {
                return {};
            },
            computed:
            {
                dateVal: {
                    get() {
                        //var _date = moment(this.date);

                        //if (!_date._isValid || _date <= moment(new Date(1900, 1, 1)))
                        //    return '';
                        //return _date.format("DD/MM/YYYY HH:mm");
                        return formatTime(this.date);
                    },
                    set(value) {
                        var _date = moment(value, "DD/MM/YYYY HH:mm");
                        if (_date._isValid)
                            this.date = _date.format();
                        else
                            this.date = '';
                    }
                },
            },
            mounted: function () {
                let _that = this
                Vue.nextTick(function () {
                    //console.log($(_that.$refs.inputgroup))
                    $($(_that.$refs.inputgroup).find('input')).datetimepicker({
                        formatTime: 'H:i',
                        formatDate: 'd/m/Y',
                        timepickerScrollbar: true,
                        scrollMonth: false,
                        defaultTime: '08:00',
                        step: 15,
                        onChangeDateTime: function (dp, $input) {
                            //console.log($input.val())
                            _that.dateVal = $input.val()
                            if (moment($input.val(),"DD/MM/YYYY HH:mm").format() == "Invalid date") {
                                //console.log('false');
                                return false;
                            }

                            if (_that.idx == '0') {
                                if (_that.obj.StartDate != _that.date) {
                                    _that.obj.StartDate = _that.date
                                    //console.log(_that.obj.StartDate + ' _ ' + _that.obj.EndDate)
                                    _that.$emit('input')
                                }
                            }
                            else {
                                if (_that.obj.EndDate != _that.date) {
                                    _that.obj.EndDate = _that.date
                                    //console.log(_that.obj.StartDate + ' _ ' + _that.obj.EndDate)
                                    _that.$emit('input')
                                }
                            }
                        }
                    })
                })
            }
        })

        Vue.component('datepicker', datepickerComponent);

       var mainInstance = new Vue({
            el: "#main",
            mounted() {
                this.loadClassDetail()
                window.loadContent = this.loadContent
                window.updateSchedule = this.updateSchedule
                window.updateChapSchedule = this.updateChapSchedule
                window.clearSchedule = this.clearSchedule
                window.clearChapSchedule = this.clearChapSchedule
                window.toggleLessonState = this.toggleLessonState
                window.toggleOnlineClass = this.toggleOnlineClass
                window.filterChap = this.filterChap
                window.filterLesson = this.filterLesson
                window.formatTime = this.formatTime
                var hash = window.location.hash;
                if (hash.startsWith('#')) {
                    hash = hash.split('#')[1]
                    //console.log(hash)
                    switch (hash) {
                        case 'info':
                            this.tabChange(0);
                            break;
                        case 'module':
                            this.tabChange(1);
                            break;
                        case 'student':
                            this.tabChange(2);
                            break;
                        case 'reference':
                            this.tabChange(3);
                            break;
                        case 'discuss':
                            this.tabChange(4);
                            break;
                    }
                }
                else {
                    this.tabChange(1);
                }
            },
            components: {
          	    LocalQuillEditor: VueQuillEditor.quillEditor
            },
            data: {
                isLoading: false,
                editorOption: {
                    theme: 'snow'
                },
                classID: '@currentClass.ID',
                className: '@currentClass.Name',
                startDate: '@currentClass.StartDate',
                endDate: '@currentClass.EndDate',
                classDescription: '@currentClass.Description',
                classImg: '@currentClass.Image',
                subjectName: '@currentClass.SubjectName',
                skillName: '@currentClass.SkillName',
                classSubjects: [],
                list_data: [],
                list_subjects: [],
                list_chapters: [],
                list_lessons:[],
                loaded_chapter: [],
                loaded_subject: [],
                init: true,
                fields: [
                    {
                        key: 'stt',
                        label: '#'
                    },
                    {
                        key: 'name',
                        label: 'Họ tên'
                    },
                    //{
                    //    key: 'email',
                    //    label: 'Email'
                    //},
                    //{
                    //    key: 'phone',
                    //    label: 'SĐT'
                    //},
                    {
                        key: 'per',
                        label: 'Tiến độ'
                    },
                    {
                        key: 'last_update',
                        label: 'Lần học cuối'
                    },
                    {
                        key: 'score',
                        label: 'Điểm trung bình'
                    },
                    {
                        key: 'rank',
                        label: 'Xếp hạng'
                    }
                ],
                studentData: [
                ],
                //view: 10,
                //page: 1,
                tab: [true, false, false, false, false],
                ref: {
                    range: '@BaseCustomerEntity.Database.REF_RANGE.CLASS',
                    target: '@currentClass.ID',
                    searchTerm: '',
                    data: [],
                    view: 10,
                    page: 1
                },
                addRef: {
                    ID: '',
                    Title: '',
                    Range: '',
                    Link: '',
                    Target: '',
                    Description: '',
                    FileName: '',
                    file: null,
                }
            },
            watch: {
            },
            methods: {
                tabChange(a = 0) {
                    // có thể load data theo từng tab để tối ưu hiệu năng
                    // this.getData()
                    let _that = this
                    _that.tab.forEach(function (item, k) {
                        _that.tab[k] = false;
                    })
                    this.tab = _that.tab
                    this.tab[a] = true
                    switch (a) {
                        case 0:
                            history.replaceState({ tab: a }, this.className + " - Tổng quan", "#info");
                            this.loadClassDetail();
                            break;
                        case 1:
                            history.replaceState({ tab: a }, this.className + " - Môn học", "#module");
                            this.loadClassSubjects();
                            break;
                        case 2:
                            history.replaceState({ tab: a }, this.className + " - Danh sách học viên", "#student");
                            this.loadClassStudent();
                            break;
                        case 3:
                            history.replaceState({ tab: a }, this.className + " - Tài liệu tham khảo", "#reference");
                            this.loadPreference();
                            break;
                        case 4:
                            this.loadComment();
                            break;
                    }
                    this.$forceUpdate()
                },
                loadClassDetail() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('ID', _that.classID)
                    let _url = '@processUrl("GetDetail", "Class")'

                    axios.post(_url, _form)
                        .then(response => {
                            var _data = response.data.Data;
                            _data.forEach(function (item, k) {
                                _that.teacherSource.push({
                                    ID: item.id,
                                    FullName: item.fullname,
                                    SubjectID: obj.SubjectID
                                })
                            })
                            _that.loaded_teacher.push(obj.SubjectID);
                        }).catch(e => { })

                },
                loadClassSubjects() {
                    let _that = this
                    if (_that.classSubjects.length > 0)
                        return;
                    _that.init = false;
                    let _form = new FormData()
                    _form.append('ClassID', _that.classID)
                    let _url = '@processUrl("GetClassSubjects", "ClassSubject")'
                    axios.post(_url, _form)
                        .then(response => {
                            var _data = response.data.Data;
                            _that.classSubjects = [];
                            _data.forEach(function (item, k) {
                                _that.classSubjects.push({
                                    ID: item.ID,
                                    Title: item.SkillName,
                                    Image: item.SkillImage,
                                    Teacher: item.TeacherName,
                                    TeacherID: item.TeacherID,
                                    Color: item.Color,
                                    Chapters: [],
                                    Lessons: []
                                });
                                //loadContent(item.ID);
                                //_that.changeAddSubject(item)
                                //_that.changeAddGrade(item)
                            })
                            _that.init = true;
                        }).catch(e => { });

                    //this.$forceUpdate();
                    //this.$nextTick(function () {
                    //    console.log($(".list.ls-pratice > li > .inner > .parent"));
                    //    $(".list.ls-pratice > li > .inner > .parent").click();
                    //});
                },
                loadContent(subject, chapter) {

                    let _that = this
                    let key = subject + "_" + chapter
                    if (_that.loaded_chapter.includes(key))
                        return;
                    let _form = new FormData()
                    _form.append('ID', subject)
                    if (chapter)
                        _form.append('Parent', chapter)
                    let _url = '@processUrl("GetContents", "ClassSubject")'
                    axios.post(_url, _form)
                        .then(response => {
                            var _data = response.data.Data;
                            var _lesson = response.data.Lesson;
                            //_that.classSubjects.forEach(function (item, k)
                            //{
                            //    if (item.ID == subject) {

                            _data.forEach(function (chapter, k) {
                                var parent = chapter.ParentID;
                                if (parent == "0") { parent = ""; }
                                _that.list_chapters.push({
                                    ID: chapter.ID,
                                    Title: chapter.Name,
                                    ClassSubject: subject,
                                    Parent: parent,
                                    TotalLessons: chapter.TotalLessons,
                                    StartDate: chapter.StartDate,
                                    EndDate: chapter.EndDate
                                })
                            })
                            _lesson.forEach(function (lesson, k) {
                                var parent = '';
                                if (lesson.ChapterID) {
                                    parent = lesson.ChapterID;
                                }

                                _that.list_lessons.push({
                                    ID: lesson.ID,
                                    ScheduleID: lesson.ScheduleID,
                                    Title: lesson.Title,
                                    ClassSubject: subject,
                                    Parent: parent,
                                    StartDate: moment(lesson.StartDate) > moment(new Date(1900, 1, 1)) ? lesson.StartDate : "",
                                    EndDate: moment(lesson.EndDate) > moment(new Date(1900, 1, 1)) ? lesson.EndDate : "",
                                    IsActive: lesson.IsActive,
                                    IsUpdating: false,
                                    IsOnline: lesson.IsOnline
                                })

                            })
                            this.loaded_chapter.push(key);
                            this.list_chapters = _that.list_chapters
                            this.list_lessons = _that.list_lessons
                            //_that.$forceUpdate()
                        }).catch(e => { })
                },
                loadClassStudent() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('ClassID', _that.classID)
                    _form.append('PageSize', 1000)
                    _form.append('PageIndex', 1)
                    let _url = '@processUrl("GetClassResult", "Class")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.studentData = response.data.Data;
                            this.studentData = _that.studentData
                            this.totalRec = response.data.Model.totalRecord
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = Math.floor(tt / this.view) + (tt % this.view > 0 ? 1 : 0);
                        }).catch(e => { })
                },
                loadPreference() {
                    //console.log(4)
                    let _that = this
                    let _form = new FormData()
                    _form.append('SearchText', "")
                    _form.append('Target', _that.ref.target)
                    _form.append('PageSize', _that.ref.view)
                    _form.append('PageIndex', _that.ref.page)

                    let _url = '@processUrl("GetClassList", "Reference")'

                    axios.post(_url, _form)
                        .then(response => {
                            _that.ref.data = response.data.Data;
                            this.ref.data = _that.ref.data
                            this.ref.totalRec = response.data.Model.totalRecord
                            console.log(totalRec)
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = tt / this.view + (tt % this.view > 0 ? 1 : 0);
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },
                loadComment() {
                    @*document.location = '@processUrl("Index","Discuss", new { id = currentClass.ID })'*@
                    //console.log(5)
                    $('.fn-box-chat-eduso').focus().click()
                },

                //MODULE
                updateSchedule(obj) {
                    obj.IsUpdating = true

                    var startdate = moment(obj.StartDate).format("MM-DD-YYYY HH:mm:ss");
                    var enddate = moment(obj.EndDate).format("MM-DD-YYYY HH:mm:ss");

                    let _form = new FormData()
                    _form.append('ID', obj.ScheduleID)
                    _form.append('StartDate', startdate)
                    _form.append('EndDate', enddate)
                    let _url = '@processUrl("Update", "LessonSchedule")'
                    axios.post(_url, _form)
                        .then(response => {
                            obj.IsUpdating = false
                        }).catch(e => { })
                },
                updateChapSchedule(obj, pos) {
                    obj.IsUpdating = true
                    var startdate = moment(obj.StartDate).format("MM-DD-YYYY HH:mm:ss");
                    var enddate = moment(obj.EndDate).format("MM-DD-YYYY HH:mm:ss");

                    let _form = new FormData()
                    _form.append('ID', obj.ID)
                    _form.append('StartDate', startdate)
                    _form.append('EndDate', enddate)
                    let _that = this;
                    let _url = '@processUrl("UpdateChapter", "LessonSchedule")'

                    axios.post(_url, _form)
                        .then(response => {
                            console.log(obj);
                            obj.IsUpdating = false;
                            mainInstance.$forceUpdate();
                            var chapter = response.data.Data;
                            if (chapter == null) {
                                alert("có lỗi, vui lòng tải lại trang & thực hiện lại thao tác");
                                return false;
                            }
                            else {
                                var _container = '#prc-' + chapter.ID + '-' + pos;
                                var startdate = formatTime(chapter.StartDate);
                                var enddate = formatTime(chapter.EndDate);
                                $(_container).find('.input-group.date.st > input').val(startdate);
                                $(_container).find('.input-group.date.ed > input').val(enddate);
                            }
                        }).catch(e => { })
                },
                clearSchedule(obj) {
                    obj.IsUpdating = true
                    obj.StartDate = ''
                    obj.EndDate = ''

                    let _form = new FormData()
                    _form.append('ID', obj.ScheduleID)
                    let _url = '@processUrl("Update", "LessonSchedule")'
                    axios.post(_url, _form)
                        .then(response => {
                            obj.IsUpdating = false
                        }).catch(e => { })
                },
                clearChapSchedule(obj, pos) {
                    obj.IsUpdating = true
                    obj.StartDate = ''
                    obj.EndDate = ''

                    let _form = new FormData()
                    _form.append('ID', obj.ID)
                    let _url = '@processUrl("UpdateChapter", "LessonSchedule")'
                    axios.post(_url, _form)
                        .then(response => {
                            console.log(obj);
                            obj.IsUpdating = false;
                            mainInstance.$forceUpdate();
                            var chapter = response.data.Data;
                            if (chapter == null) {
                                alert("có lỗi, vui lòng tải lại trang & thực hiện lại thao tác");
                                return false;
                            }
                            else {
                                var _container = '#prc-' + chapter.ID + '-' + pos;
                                var startdate = formatTime(chapter.StartDate);
                                var enddate = formatTime(chapter.EndDate);
                                $(_container).find('.input-group.date.st > input').val(startdate);
                                $(_container).find('.input-group.date.ed > input').val(enddate);
                            }
                        }).catch(e => { })
                },

                matchedChap(obj, key) {
                    return (obj.ClassSubject + '-' + obj.Parent) == key
                },
                matchedLesson(obj, key) {
                    return (obj.ClassSubject + '-' + obj.Parent) == key
                },
                filterChap(obj, list) {
                    return list.filter((p) => {
                        return p.Parent == obj.ID && p.ClassSubject == obj.ClassSubject
                    })
                },
                filterLesson(obj) {
                    var filter = this.list_lessons.filter((p) => {
                        return p.Parent == obj.ID && p.ClassSubject == obj.ClassSubject
                    })
                    return filter;
                },

                //Lesson Action
                toggleLessonState(obj) {
                    let _that = this;
                    //console.log(obj)
                    //_that.tableData.forEach(function (item, k) {
                    //if (item.ID === obj.ID) {
                    let _url = obj.IsActive ? '@processUrl("Unpublish", "LessonSchedule")' : '@processUrl("Publish", "LessonSchedule")'
                    let _form = new FormData()
                    _form.append('ArrID', obj.ScheduleID);
                    axios.post(_url, _form)
                        .then(response => {
                            console.log('update ok');
                            //item.IsActive = !item.IsActive;
                            //_that.list_data[k].IsActive = !_that.list_data[k].IsActive;
                        }).catch(e => { })
                    //}
                    //})
                },
                toggleOnlineClass(obj) {
                    let _url = '@processUrl("ToggleOnline", "LessonSchedule")'
                    let _form = new FormData()
                    _form.append('ID', obj.ScheduleID);
                    axios.post(_url, _form)
                        .then(response => {
                            if (response.data.error == null) {
                                obj.IsOnline = response.data.isOnline;
                                if (response.data.isOnline == true) {
                                    Swal.fire({
                                        title: "Mở lớp thành công",
                                        text: "Đã mở lớp trực tuyến cho bài học",
                                        icon: 'success',
                                    });
                                }
                                else {
                                    Swal.fire({
                                        title: "Thông báo",
                                        text: "Đã hủy lớp trực tuyến",
                                        icon: 'warning',
                                    });
                                }
                            }
                            else {
                                Swal.fire({
                                    title: "Có lỗi",
                                    text: response.error,
                                    icon: 'warning',
                                });
                            }

                            //item.IsActive = !item.IsActive;
                            //_that.list_data[k].IsActive = !_that.list_data[k].IsActive;
                        }).catch(e => { })
                },
                //REF
                showRefModal(obj) {
                    let _that = this;
                    if (obj == null) {
                        _that.addRef.ID = '';
                        _that.addRef.Title = '';
                        _that.addRef.Range = '@BaseCustomerEntity.Database.REF_RANGE.ALL';
                        _that.addRef.Link = '';
                        _that.addRef.Target = '@currentClass.ID';
                        _that.addRef.Description = '';
                        _that.addRef.FileName = '';
                    }
                    else {
                        _that.addRef.ID = obj.ID;
                        _that.addRef.Title = obj.Title;
                        _that.addRef.Range = obj.Range;
                        _that.addRef.Link = obj.Link;
                        _that.addRef.Description = obj.Description;
                        _that.addRef.Target = obj.Target;
                        if (obj.Media != null)
                            _that.addRef.FileName = obj.Media.Name;
                        else
                            _that.addRef.FileName = '';
                    }
                    _that.addRef.file = {};
                    _that.$bvModal.show('modal_event')
                },
                openLink(obj) {
                    obj.Viewed = obj.Viewed + 1;
                    window.open('@processUrl("OpenLink", "Reference")/' + obj.ID);
                },
                download(obj) {
                    if (obj.Media == null)
                        return false;
                    obj.Downloaded = obj.Downloaded + 1;
                    window.open('@processUrl("Download", "Reference")/' + obj.ID);
                },
                updateRef() {
                    let _that = this
                    let _form = new FormData()


                    if (_that.addRef.Title == '') {
                        swal.fire({
                            title: "Có lỗi",
                            text: "Vui lòng nhập đủ thông tin",
                            icon: 'warning',
                        });
                        this.$refs["addName"].focus();
                        return false;
                    }
                    _form.append('ID', _that.addRef.ID)
                    _form.append('Title', _that.addRef.Title)
                    _form.append('Link', _that.addRef.Link)
                    _form.append('Target', _that.addRef.Target)
                    _form.append('Name', _that.addRef.Title)
                    _form.append('Description', _that.addRef.Description)
                    _form.append('Range', _that.addRef.Range)

                    if (_that.addRef.file) {
                        _form.append('fileUpload', this.addRef.file)
                    }


                    let _url = '@processUrl("Save", "Reference")'
                    axios.post(_url, _form)
                        .then(response => {
                            if (response.Error == null) {
                                Swal.fire(
                                    'Đã cập nhât!',
                                    'Tài liệu đã cập nhật thành công',
                                    'success'
                                )
                                this.loadPreference()
                                this.hideModal()
                            }
                            else {
                                Swal.fire(
                                    'Có lỗi!',
                                    response.Error,
                                    'error'
                                )
                            }

                        }).catch(e => { })
                },
                deleteRef(obj) {
                    Swal.fire({
                        title: 'Chắc chắn xóa?',
                        text: "Bạn sẽ không thể khôi phục lại dữ liệu này sau khi xóa",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        cancelButtonText: 'Hủy',
                        confirmButtonText: 'Đồng ý'
                    }).then((result) => {
                        if (result.value == true) {
                            let _form = new FormData()
                            _form.append('ID', obj.ID)
                            let _url = '@processUrl("Remove", "Reference")'
                            axios.post(_url, _form)
                                .then(response => {
                                    if (response.Error == null) {
                                        Swal.fire(
                                            'Đã xóa!',
                                            'Tài liệu của bạn đã được xóa',
                                            'success'
                                        )
                                        this.loadPreference()
                                    }
                                    else {
                                        Swal.fire(
                                            'Có lỗi!',
                                            response.Error,
                                            'error'
                                        )
                                    }

                                }).catch(e => { })
                        }
                    })
                },
                changeFile() {

                    this.addRef.FileName = event.target.files[0].name
                    this.addRef.file = event.target.files[0]
                },

                //SUPPORT
                formatShortDate(date) {
                    var _date = moment(date);
                    if (!_date._isValid || _date < moment(new Date(2000, 1, 1))) return "";
                    return _date.format("DD/MM/YYYY")
                },
                formatTime(time) {
                    var _time = moment(time);
                    if (!_time._isValid || _time < moment(new Date(2000, 1, 1))) return "";
                    return _time.format("DD/MM/YYYY HH:mm")
                },
                domDecoder(str) {
                    let parser = new DOMParser();
                    let dom = parser.parseFromString('<!doctype html><body>' + str, 'text/html');
                    return dom.body.textContent;
                },
                replaceBrkLine(str) {
                    return str.replace(/\n/gi, "<br/>")
                },
                shortenString(str, max = 15) {
                    if (str == null || str.length <= max)
                        return "";
                    return str.substring(0, max) + "..."
                },
                hideModal() {
                    $('.close').click();
                },
                getPercent(a, b) {
                    var result = 0;
                    if (a > 0)
                        result = a * 100 / b;
                    return result;
                }

            }
        });
    </script>
}

@section Modals{
    <b-modal :no-close-on-backdrop="true" id="modal_event" centered title="Cập nhật tài liệu tham khảo">
        <b-col class="form-group">
            <label for="">Tên tài liệu</label>
            <input type="text" name="" value="" class="form-control" placeholder="Tên tài liệu" v-model="addRef.Title">
        </b-col>
        <b-col class="form-group">
            <label for="">Mô tả</label>
            <quill-editor v-model="addRef.Description"
                          ref="quillEditorA"
                          :options="editorOption">
            </quill-editor>
        </b-col>
        <b-col class="form-group">
            <label for="">Link liên kết</label>
            <input type="text" name="" value="" class="form-control" placeholder="Link liên kết" v-model="addRef.Link">
        </b-col>
        <b-col class="form-group">
            <label class="col-form-label">File đính kèm:</label>
            <i class="ic ic-paper-clip"></i><label class="p-1" ref="filedsp" v-on:click="$refs.file.click()">{{shortenString(addRef.FileName)}} - (Click để chọn)</label>
            <input type="file" ref="file" class="d-none" v-on:change="changeFile()">
        </b-col>
        <b-col class="form-group">
            <label class="col-form-label">Phạm vi chia sẻ:</label>
            <select name="range" onchange="ChooseRange()" id="refRange" class="form-control d-inline w-25" v-model="addRef.Range">
                <option value="@BaseCustomerEntity.Database.REF_RANGE.ALL">Chung</option>
                <option value="@BaseCustomerEntity.Database.REF_RANGE.TEACHER">Tất cả lớp phụ trách</option>
                <option value="@BaseCustomerEntity.Database.REF_RANGE.CLASS">Riêng trong lớp</option>
            </select>
            <select name="target" id="refTarget" v-model="addRef.Target" class="form-control d-inline w-25" v-if="addRef.Range == '@BaseCustomerEntity.Database.REF_RANGE.CLASS'">
                <option value="@currentClass.ID">@currentClass.Name</option>
            </select>
        </b-col>

        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="updateRef()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>
}