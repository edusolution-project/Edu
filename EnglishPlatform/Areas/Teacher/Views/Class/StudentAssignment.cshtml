@{
    var currentClass = ViewBag.Class as BaseCustomerEntity.Database.ClassEntity;
    var currentStudent = ViewBag.Student as BaseCustomerEntity.Database.StudentEntity;
    var lessons = ViewBag.Lessons as List<BaseCustomerMVC.Models.StudentAssignmentViewModel>;
}
<div class="row m-0 mb-3 mt-3">
    <b>Assignments Completed <span id="completedLesson">0</span> / <span id="totalLesson">0</span> (Total)</b>
</div>
<div class="row m-0 mb-3 mt-3">
    <div class="col-md-6">
        <span class="col-md-4 text-right">
            Schedule
        </span>
        <select id="schedule_filter" onchange="filterLesson()" class="d-inline form-control col-md-8">
            <option value="">---</option>
            <option value="past">Past</option>
            <option value="ongoing">Ongoing</option>
            <option value="incoming">Incoming</option>
        </select>
    </div>
    <div class="col-md-6">
        <span class="col-md-4 text-right">
            Status
        </span>
        <select id="status_filter" onchange="filterLesson()" class="d-inline form-control col-md-8">
            <option value="">---</option>
            <option value="viewed">Completed</option>
            <option value="unviewed">Not done</option>
        </select>
    </div>
</div>
<table id="lessonTable" class="table" width="100%" cellspacing="0">
    <thead>
        <tr class="text-center align-middle row m-0">
            <th class="text-center align-middle col-md-6">Lesson</th>
            @*<th class="text-center align-middle col-md-1">Type</th>*@
            @*<th class="text-center align-middle col-md-1">Point</th>*@
            @*<th class="text-center align-middle col-md-1">Multiple</th>*@
            <th class="text-center align-middle col-md-2">Schedule</th>
            <th class="text-center align-middle col-md-2">Last Done</th>
            <th class="text-center align-middle col-md-1">Result</th>
            <th class="text-center align-middle col-md-1">Attempts</th>
        </tr>
    </thead>
    <tbody>
        @*Render Week*@
        @{
            var startdate = currentClass.StartDate.AddDays(DayOfWeek.Sunday - currentClass.StartDate.DayOfWeek);
            var enddate = currentClass.EndDate.AddDays(DayOfWeek.Saturday - currentClass.EndDate.DayOfWeek);
            for (DateTime date = startdate; date < enddate; date = date.AddDays(7))
            {
                <tr class="week_row bg-secondary text-white" style="font-size:80%" start="@date.ToString("MM/dd/yyyy")" end="">
                    <td colspan="5">
                        <b>Week @date.ToString("dd/MM/yyyy") - @date.AddDays(6).ToString("dd/MM/yyyy")</b>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<script>
    //render rows
    var startSchedule = moment('@startdate.ToString("yyyyMMdd")');
    var endSchedule = moment('@enddate.ToString("yyyyMMdd")');
    var maxWeek = $('.week_row').length;
    var lessons = null;
        @if (lessons.Count > 0)
        {
            @: lessons = @Html.Raw(Json.Serialize(lessons));
        }


    if (lessons != null && lessons.length > 0) {
        $('#totalLesson').text(lessons.length);
        var viewed = 0;
        for (var i = 0; i < lessons.length; i++) {
            var lesson = lessons[i];

            //console.log(lesson);
            var row = $('<tr>', { class: "row m-0 lesson_row" });
            row.append($('<td>', { class: "col-md-6" })
                .append($("<span>", { "class": "modules-icon mr-1 assignment atype" + lesson.Etype}))
                .append($('<a>', { text: lesson.Title })));
            //Doesn't have type ATM
            //row.append($('<td>', { class: "col-md-1" })
            //    .append($("<span>", { "class": "modules-icon mr-1 assignment atype" + lesson.Etype}))
            //    .append($('<a>', { text: lesson.TypeName }))
            //);
            //row.append($('<td>', { class: "col-md-1 text-center", text: lesson.Point }));
            //row.append($('<td>', { class: "col-md-1 text-center", text: lesson.Multiple }));
            var schStart = moment(new Date(lesson.LessonStartDate));
            var schStart_text = '-';
            if (schStart > moment(new Date(1900, 1, 1)))
                schStart_text = schStart.format('DD/MM/YYYY');
            else
                schStart = startSchedule;
            var schEnd = moment(new Date(lesson.LessonEndDate));
            var schEnd_text = '-';
            if (schEnd > moment(new Date(1900, 1, 1)))
                schEnd_text = schEnd.format('DD/MM/YYYY');
            else
                schEnd = endSchedule;
            row.append($('<td>', { class: "text-center col-md-2", text: schStart_text + ' - ' + schEnd_text }));
            row.attr("sd", schStart.format("YYYYMMDD")).attr("ed", schEnd.format("YYYYMMDD"));
            var lastLearnt = moment(lesson.LearningEndDate);
            var lastLearnt_text = '';
            if (lastLearnt > moment(new Date(1900, 1, 1)))
                lastLearnt_text = lastLearnt.format('DD/MM/YYYY');
            row.append($('<td>', { class: "text-center col-md-2", text: lastLearnt_text }));
            row.append($('<td>', { class: "text-center col-md-1 ", text: (lesson.Point > 0 ? (lesson.Result * 100 / lesson.Point) : 0) + '%'  }));
            row.append($('<td>', { class: "text-center col-md-1", text: lesson.LearningNumber }));
            if (lesson.LearningNumber > 0) {
                viewed++;
                row.addClass("completed", true);
            }
            wkStart = 0;
            wkEnd = $('.week_row').length;
            if (schStart > moment(new Date(1900, 1, 1))) {
                var dayStart = schStart.diff(startSchedule, 'days');
                wkStart = Math.floor(dayStart / 7);
                if (wkStart < 0) wkStart = 0;
            }
            if (schEnd > moment(new Date(1900, 1, 1))) {
                var dayEnd = schEnd.diff(startSchedule, 'days');
                wkEnd = Math.floor(dayEnd / 7);
                if (wkEnd < 0 || wkEnd > $('.week_row').length)
                    wkEnd = $('.week_row').length;
            }
            for (j = wkStart; j <= wkEnd; j++) {
                if (j < maxWeek - 1)
                    $('.week_row:eq(' + (j + 1) + ')').before(row.clone());
                else
                    $('#lessonTable tbody').append(row.clone());
            }
             $('#completedLesson').text(viewed);
        }
    }

    var filterLesson = function () {
        var todayNo = parseFloat(moment(new Date()).format("YYYYMMDD"));
        var schedule = $('#schedule_filter').val();
        var status = $('#status_filter').val();
        var schFilter = function (obj) { return true;}
        var stsFilter = function (obj) { return true;};
        $('.lesson_row').hide();
        switch (schedule) {
            case "past":
                schFilter = function (obj) {
                    return $(obj).attr("ed") < todayNo;
                }
                break;
            case "ongoing":
                schFilter = function (obj) {
                    return ($(obj).attr("sd") <= todayNo) && ($(obj).attr("ed") >= todayNo);
                }
                break;
            case "incoming":
                schFilter = function (obj) {
                    return $(obj).attr("sd") > todayNo;
                }
                break;
        }
        switch (status) {
            case "viewed":
                stsFilter = function (obj) {
                    return $(obj).hasClass("completed");
                }
                break;
            case "unviewed":
                stsFilter = function (obj) {
                    return !($(obj).hasClass("completed"));
                }
                break;
        }
        console.log(stsFilter);
        if (status == '' && schedule == '') {
            $('.lesson_row').show();
        } else {
            $('.lesson_row').filter(function () {

                return schFilter(this) && stsFilter(this);
            }).show();
        }
    }

</script>
