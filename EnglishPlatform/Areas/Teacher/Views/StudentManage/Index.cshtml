@{

    Layout = "~/Views/Shared/_LayoutTeacher_NewUI.cshtml";
    ViewData["Title"] = "Quản lý học viên";
    var listGrade = ViewBag.Grade as List<BaseCustomerEntity.Database.GradeEntity>;
    var listSubject = ViewBag.Subject as List<BaseCustomerEntity.Database.SubjectEntity>;
    var listTeacher = ViewBag.Teacher as List<BaseCustomerEntity.Database.TeacherEntity>;
    var listSkills = ViewBag.Skills as List<BaseCustomerEntity.Database.SkillEntity>;
    var listClass = ViewBag.Classes as List<BaseCustomerEntity.Database.ClassEntity>;
    var user = ViewBag.User as string;
    var hasManageRole = (bool)(ViewBag.Managable ?? false);
}
<script>
    setActiveMenu("student");
</script>

<section class="module" id="dashboard_content">
    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-header" v-cloak>
        <div class="flex border-b padding-b25 justify-content-between">
            <div class="flex width-100">
                <div class="box filter-box w-152">
                    <autocomplete v-on:chooseitem="chooseClass" :items="list_ac_class" v-on:input="autocompleteClass" :plhd="'Nhập để tìm lớp'" />
                </div>
                <div class="box filter-box w-152">
                    <select name="" v-model="search_subject_id">
                        <option value="">Chương trình</option>
                        <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                    </select>
                </div>
                <div class="box filter-box w-152">
                    <select name="" v-model="search_skill_id">
                        <option value="">Môn học</option>
                        <option v-for="(item,k) in list_skill" :value="item.ID">{{item.Name}}</option>
                    </select>
                </div>
                <div class="box filter-box w-152">
                    <select name="" v-model="search_grade_id">
                        <option value="">Cấp độ</option>
                        <option v-for="(item,k) in list_grades_full" v-if="matchGrade(item)" :value="item.ID">{{item.Name}}</option>
                    </select>
                </div>
                <div class="search-box mr-2">
                    <button><i class="ic ic-find"></i></button>
                    <input type="text" name="" v-model="searchTerm" placeholder="Tên học viên">
                </div>
            </div>

            <div class="flex">
                <b-button class="btn-addevent btn-student btn-sm" v-on:click="showStudentModal()"><i class="ti-plus"></i></b-button>
                <b-button class="btn-addevent btn-student btn-sm" style="margin-left:5px" v-on:click="showStudentUploadModal($event.target.value)"><i class="ti-zip"></i></b-button>
            </div>
        </div>
    </div>
    <div class="card-body" v-cloak>
        <table id="ed_table" class="table">
            <thead>
                <tr>
                    <th v-for="(field,k) in fields">{{field.label}}</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="(item,k) in tableData">
                    <td>{{(page - 1) * view + (k+1)}}</td>
                    <td>
                        <a :href="'@Url.Action("StudentDetail", "Class")/' + item.ID + '/' + item.ClassID" :title="item.FullName" v-if="item.ClassID != null">{{item.FullName}}</a>
                        <a :href="'@Url.Action("Detail", "StudentManage")/' + item.ID" :title="item.FullName" v-else="item.ClassID != null">{{item.FullName}}</a>
                    </td>
                    <td>{{item.ClassName}}</td>
                    <td>{{item.Email}}</td>
                    <td>{{item.Phone}}</td>
                    <td><button class="btn-act btn-trash" v-on:click="removeStudent(item)"><i class="ti-trash"></i></button></td>
                </tr>
            </tbody>
        </table>
        <div class="box margin-t20 flex">
            <div class="paging-view">
                Hiển thị:
                <select v-model="view" v-on:change="getData()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                <div class="right">
                    <b-pagination v-model="page"
                                  :total-rows="totalRec"
                                  :per-page="view"
                                  v-on:input="getData()"></b-pagination>
                </div>
            </div>
        </div>
    </div>
</section>


@section Scripts {

    <script type="text/x-template" id="autocomplete">
        <div class="autocomplete">
            <input type="text" v-on:input="onChange" v-model="search" v-on:keyup.down="onArrowDown" v-on:keyup.up="onArrowUp" v-on:keyup.enter="onEnter" class="form-control" :placeholder="plhd" />
            <ul id="autocomplete-results" v-show="isOpen" class="autocomplete-results">
                <li class="loading" v-if="isLoading">
                    Loading results...
                </li>
                <li v-else v-for="(result, i) in results" :key="i" v-on:click="setResult(result)" class="autocomplete-result" :class="{'is-active': i === arrowCounter }">
                    {{ result.Name }}
                </li>
            </ul>

        </div>
    </script>

    <style>
        .card-header .search-box {
            width: auto;
        }

        #app {
            font-family: "Avenir", Helvetica, Arial, sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            color: #2c3e50;
            margin-top: 60px;
        }

        .autocomplete {
            position: relative;
            width: 100%;
        }

        .autocomplete-results {
            padding: 0;
            margin: 0;
            border: 1px solid #eeeeee;
            max-height: 120px;
            overflow: auto;
            width: 100%;
            position: absolute;
            min-width: 200px;
            background: #FFF;
        }

        .autocomplete-result {
            list-style: none;
            text-align: left;
            padding: 4px 10px;
            cursor: pointer;
        }

            .autocomplete-result.is-active,
            .autocomplete-result:hover {
                background-color: #4aae9b;
                color: white;
            }
    </style>

    <script>
        Vue.component("autocomplete",
            {
                template: "#autocomplete",
                props: {
                    items: {
                        type: Array,
                        required: false,
                        default: () => []
                    },
                    url: {
                        type: String,
                        required: false,
                        default: () => ''
                    },
                    plhd: {
                        type: String,
                        required: false,
                        default: () => 'Nhập để tìm kiếm (>2 chữ)'
                    }
                },
                data() {
                    return {
                        isOpen: false,
                        results: [],
                        search: "",
                        isLoading: false,
                        arrowCounter: 0,
                        loadedTerms: [],
                    };
                },
                methods: {
                    onChange() {
                        // Let's warn the parent that a change was made
                        this.$emit("input", this.search, this.filterResults);
                        if (this.search.length < 2) {
                            this.isOpen = false
                        }
                        else {
                            this.isOpen = true
                        }
                    },
                    searchResult() {
                        this.filterResults();
                        this.isOpen = true;
                        this.$forceUpdate();
                    },
                    filterResults() {
                        this.results = this.items
                        this.isOpen = true
                    },
                    setResult(result) {
                        this.search = result.Name;
                        this.isOpen = false;
                        this.arrowCounter = -1;
                        this.$emit("chooseitem", result);
                    },
                    onArrowDown(evt) {
                        if (this.arrowCounter < this.results.length) {
                            this.arrowCounter = this.arrowCounter + 1;
                        }
                    },
                    onArrowUp() {
                        if (this.arrowCounter > 0) {
                            this.arrowCounter = this.arrowCounter - 1;
                        }
                    },
                    onEnter() {
                        if (this.arrowCounter < 0 || this.arrowCounter > this.results.length)
                            return false;
                        this.setResult(this.results[this.arrowCounter])
                        //this.search = this.results[this.arrowCounter].FullName;
                        //this.isOpen = false;
                        //this.arrowCounter = -1;
                        //this.$emit("chooseStudent", result);
                    },
                    handleClickOutside(evt) {
                        if (!this.$el.contains(evt.target)) {
                            this.isOpen = false;
                            this.arrowCounter = -1;
                        }
                    }
                },
                watch: {
                    items: function (val, oldValue) {
                        // actually compare them
                        if (val.length !== oldValue.length) {
                            this.results = val;
                            this.isLoading = false;
                        }
                    }
                },
                mounted() {
                    document.addEventListener("click", this.handleClickOutside);
                },
                destroyed() {
                    document.removeEventListener("click", this.handleClickOutside);
                }
            }
        )
    </script>

    <script>
        new Vue({
            el: "#main",
            mounted() {
                this.getData()
                this.getActiveClass()
                this.list_subject = @Html.Raw(Json.Serialize(listSubject));
                this.list_grades_full = @Html.Raw(Json.Serialize(listGrade));
                this.list_skill = @Html.Raw(Json.Serialize(listSkills));
            },
            data: {
                isLoading: false,
                editorOption: {
                    theme: 'snow'
                },
                add_student: {
                    id: "",
                    name: "",
                    email: "",
                    class_id: ""
                },
                list_student: [
                ],
                fields: [
                    {
                        key: 'stt',
                        label: '#'
                    },
                    {
                        key: 'name',
                        label: 'Họ tên'
                    },
                    {
                        key: 'class',
                        label: 'Lớp'
                    },
                    {
                        key: 'email',
                        label: 'Email'
                    },
                    {
                        key: 'phone',
                        label: 'SĐT'
                    },
                    //{
                    //    key: 'per',
                    //    label: 'Tiến độ'
                    //},
                    //{
                    //    key: 'last_update',
                    //    label: 'Lần học cuối'
                    //},
                    //{
                    //    key: 'score',
                    //    label: 'Kết quả'
                    //},
                    {
                        key: 'actions',
                        label: 'Tác vụ'
                    }
                ],
                tableData: [
                ],
                list_subject: [],
                list_skill: [],
                list_grades_full: [],
                teacherSource: [],
                courseSource: [],
                list_active_class: [],
                list_ac_class: [],
                week: '',
                view: 30,
                page: 1,
                search_class_id: '',
                search_subject_id: '',
                search_grade_id: '',
                search_teacher_id: '',
                search_skill_id: '',
                searchTerm: '',
                totalRec: 0,
                uploadfile: {
                    file: null,
                },
            },
            watch: {
                search_subject_id: function () {
                    this.getData()
                },
                search_grade_id: function () {
                    this.getData()
                },
                search_skill_id: function () {
                    this.getData()
                },
                search_class_id: function () {
                    this.getData()
                },
                searchTerm: function(){
                    if(this.searchTimeout != null)
                        clearTimeout(this.searchTimeout)
                    var fn = this.getData
                    this.searchTimeout = setTimeout(function(){
                        fn()
                        fn = null
                    }, 500)
                },
            },
            methods: {
                getData() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('SubjectID', _that.search_subject_id)
                    _form.append('ClassID', _that.search_class_id)
                    _form.append('SkillID', _that.search_skill_id)
                    _form.append('GradeID', _that.search_grade_id)
                    _form.append('TeacherID', _that.search_teacher_id)
                    _form.append('PageSize', _that.view)
                    _form.append('PageIndex', _that.page)
                    _form.append('SearchText', _that.searchTerm)

                    let _url = '@Url.Action("GetList", "StudentManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.tableData = response.data.Data;
                            this.tableData = _that.tableData
                            this.totalRec = response.data.Model.totalRecord
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = Math.floor(tt / this.view) + (tt % this.view > 0 ? 1 : 0);
                        }).catch(e => { })
                },
                getActiveClass() {
                    if (this.list_active_class.length == 0) {
                        let _that = this
                        let _form = new FormData()
                        _form.append('skipActive', false)
                        _form.append('PageSize', 500)
                        @if(!User.IsInRole("head-teacher"))
                        {
                            @:let _url = '@Url.Action("GetClassList", "Class")'
                        }
                        else
                        {
                            @:let _url = '@Url.Action("GetManageList", "Class")'
                        }
                        axios.post(_url, _form)
                            .then(response => {
                                var _data = response.data.Data;
                                _data.forEach(function (item, k) {
                                    _that.list_active_class.push({
                                        ID: item.ID,
                                        Name: item.Name
                                    })
                                })
                            }).catch(e => { })
                    }
                    this.add_student.class_id = ''
                },
                destroy(id) {
                    this.tableData.forEach(function (item, k) {
                        if (item.id == id) {
                            item.id = 0
                        }
                    })
                    let _data = this.tableData.filter(function (a) {
                        return a.id > 0
                    })
                    this.tableData = _data
                },
                toggleState(obj) {
                    this.tableData.forEach(function (item, k) {
                        if (item.id === obj.id) {
                            item.state = !item.state
                        }
                    })
                },
                matchGrade(item) {
                    return item.SubjectID == this.search_subject_id
                },
                hideModal() {
                    $('.close').click();
                },
                showStudentModal() {
                    this.add_student.class_id = this.search_class_id
                    this.$bvModal.show('modal_event')
                },
                autocompleteStudent(term, callback) {
                    let _that = this
                    if (term.length >= 2) {
                        if (this.actimeout != null)
                            clearTimeout(this.actimeout);
                        this.actimeout = setTimeout(function () {
                            if (_that.loadedTermsST == null)
                                _that.loadedTermsST = []

                            if (_that.loadedTermsST.filter(item => item.term.indexOf(term) > -1).length == 0) {
                                let _form = new FormData()
                                _form.append('term', term)
                                let _url = '@Url.Action("Search","StudentManage")'
                                axios.post(_url, _form)
                                    .then(response => {
                                        var data = []
                                        if (response.data.length > 0) {
                                            response.data.forEach(function (item) {
                                                data.push({
                                                    ID: item.ID,
                                                    Name: item.FullName,
                                                    Email: item.Email
                                                });
                                            })
                                        }
                                        _that.list_student = data
                                        _that.loadedTermsST.push({
                                            term: term,
                                            data: data
                                        })
                                        callback()
                                    }).catch(e => { })
                            } else {
                                _that.list_student = _that.loadedTermsST.filter(item => item.term.indexOf(term) > -1)[0].data;
                                callback()
                            }
                        }, 500)
                    }
                },
                autocompleteClass(term, callback) {
                    let _that = this
                    term = term.toLowerCase()
                    _that.list_ac_class = _that.list_active_class.filter(item => item.Name.toLowerCase().indexOf(term) > -1);
                    callback()
                },
                showStudentUploadModal() {
                    this.add_student.class_id = this.search_class_id
                    this.$bvModal.show('modal_upload')
                },
                chooseStudent(student) {
                    this.add_student.name = student.Name
                    this.add_student.email = student.Email
                    this.add_student.id = student.ID
                },
                chooseClass(_class){
                    this.search_class_id = _class.ID;
                },
                createStudent() {
                    let _that = this
                    let _form = new FormData()
                    if (_that.add_student.class_id == '') {
                        Swal.fire('Chưa chọn lớp học','','warning');
                        return false;
                    }
                    if (_that.add_student.id == '') {
                        alert('Vui lòng chọn lại học viên')
                        return false;
                    }
                    _form.append('ClassID', _that.add_student.class_id)
                    _form.append('StudentID', _that.add_student.id)
                    _that.isLoading = true
                    let _url = '@Url.Action("AddStudent", "StudentManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.isLoading = false
                            if (response.data.error != null) {
                                alert(response.data.error);
                                return false;
                            }
                            else {
                                alert(response.data.msg)
                                this.search_class_id = _that.add_student.class_id
                                this.search_grade_id = ''
                                this.search_skill_id = ''
                                this.search_subject_id = ''
                                this.getData()
                                this.hideModal()
                            }
                        }).catch(e => {
                            _that.isLoading = false
                            console.log(e)
                        })
                },
                uploadStudent() {
                    let _that = this
                    let _form = new FormData()
                    if (_that.add_student.class_id == '') {
                        alert('Chưa chọn lớp học');
                        return false;
                    }
                    if (!_that.uploadfile.file) {
                         alert('Chưa chọn danh sách học viên');
                        return false;
                    }
                    _form.append('ClassID', _that.add_student.class_id)
                    _form.append('fileUpload', _that.uploadfile.file)
                    _that.isLoading = true
                    let _url = '@Url.Action("ImportStudent", "StudentManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            _that.isLoading = false
                            if (response.data.error != null) {
                                alert(response.data.error);
                                return false;
                            }
                            else {
                                alert(response.data.msg)
                                this.search_class_id = _that.add_student.class_id
                                this.search_grade_id = ''
                                this.search_skill_id = ''
                                this.search_subject_id = ''
                                this.getData()
                                this.hideModal()
                            }
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = Math.floor(tt / this.view) + (tt % this.view > 0 ? 1 : 0);
                        }).catch(e => {
                            _that.isLoading = false
                            console.log(e)
                        })
                },
                removeStudent(student) {
                    if (!confirm('Xác nhận xóa học viên ' + student.FullName + ' khỏi lớp ' + student.ClassName + '?')) {
                        return false;
                    }
                    let _that = this
                    let _form = new FormData()
                    _form.append('ClassID', student.ClassID)
                    _form.append('StudentID', student.ID)
                    let _url = '@Url.Action("RemoveStudent", "StudentManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            if (response.data.error != null) {
                                alert(response.data.error);
                                return false;
                            }
                            else {
                                alert(response.data.msg)
                                this.getData()
                                this.hideModal()
                            }
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = Math.floor(tt / this.view) + (tt % this.view > 0 ? 1 : 0);
                        }).catch(e => { console.log(e) })
                },
                changeFile() {
                    console.log(event.target.files[0])
                    this.uploadfile.file = event.target.files[0]
                },
                downloadTemplate() {
                    window.open("@Url.Action("StudentTemplate", "StudentManage")");
                }
            }
        });

    </script>
}

@section Modals{
    <b-modal :no-close-on-backdrop="true" id="modal_event" centered title="Thêm học viên">
        <b-col class="form-group">
            <label for="">Lớp</label>
            <select v-model="add_student.class_id" class="form-control">
                <option value="">Chọn lớp</option>
                <option v-for="(item,k) in list_active_class" :value="item.ID">{{item.Name}}</option>
            </select>
        </b-col>
        <b-col class="form-group">
            <label for="">Học viên</label>
            <autocomplete v-on:chooseitem="chooseStudent" :items="list_student" v-on:input="autocompleteStudent" />
        </b-col>
        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="createStudent()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>

    <b-modal :no-close-on-backdrop="true" id="modal_upload" centered title="Nhập học viên từ file">
        <b-col class="form-group">
            <label for="">Lớp</label>
            <select v-model="add_student.class_id" class="form-control">
                <option value="">Chọn lớp</option>
                <option v-for="(item,k) in list_active_class" :value="item.ID">{{item.Name}}</option>
            </select>
        </b-col>
        <b-col class="form-group">
            <label for="">Chọn danh sách học viên (excel)</label>
            <input type="file" class="btn btn-info" :ref="`uploadfile`" accept=".xls,.xlsx" v-on:change="changeFile()" /><br />
        </b-col>
        <template v-slot:modal-footer="{ ok, cancel}">
            <button v-on:click="downloadTemplate()" class="btn btn-secondary">Tải file mẫu</button>
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="uploadStudent()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>
}