
@{
    ViewData["Title"] = "Ngân hàng câu hỏi";
    Layout = "~/Views/Shared/_LayoutTeacher.cshtml";
    var subjects = ViewBag.Subjects as List<BaseCustomerEntity.Database.SubjectEntity>;
    var grades = ViewBag.Grades as List<BaseCustomerEntity.Database.GradeEntity>;
    var currentData = ViewBag.CurrentExamArchive as BaseCustomerEntity.Database.ExamQuestionArchiveEntity;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    string processUrl(string act, string ctrl, Object param = null)
    {
        string url = Url.Action(act, ctrl, param);

        return $"/{center}{url}";
    }
}
<script src="~/js/vue@2.6.0.js?@DateTime.UtcNow.ToString("yyyyMMddHHmmss")"></script>
<script src="~/js/bootstrap-vue.min.js?@DateTime.UtcNow.ToString("yyyyMMddHHmmss")"></script>
<script src="~/js/axios.min.js?@DateTime.UtcNow.ToString("yyyyMMddHHmmss")"></script>
<script src="~/js/plugins/ck4/ckeditor.js?@DateTime.UtcNow.ToString("yyyyMMddHHmmss")"></script>

@*<script src="https://unpkg.com/vue-multiselect@2.1.0"></script>*@
@*<link rel="stylesheet"
    href="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.css" />*@
<link href="~/lib/vue-multiselect@2.1.0/vue-multiselect.min.css?@DateTime.UtcNow.ToString("yyyyMMddHHmmss")" rel="stylesheet" />
<script src="~/lib/vue-multiselect@2.1.0/vue-multiselect.min.js?@DateTime.UtcNow.ToString("yyyyMMddHHmmss")"></script>

<script src="~/js/content-render-lessonexam.js?@DateTime.UtcNow.ToString("yyyyMMddHHmmss")"></script>

<script>
        var config = {
            container: "lessonContainer",
            //mod: mod.TEACHERVIEW,
            url: {
                load: '@processUrl("GetDetailsLesson", "Lesson")',
                list_part: '@processUrl("GetList", "CloneLessonPart")',
                load_part: '@processUrl("GetDetail", "CloneLessonPartExam")',
                save_part: '@processUrl("CreateOrUpdate", "CloneLessonPartExam")',
                del_part: '@processUrl("Remove", "CloneLessonPart")',
                move_part: '@processUrl("ChangePosition","CloneLessonPart")',
                export_quiztemp: '@processUrl("ExportQuestionTemplate", "Curriculum")',
                import_quiz: '@processUrl("ImportQuestion", "Curriculum")',
                load_classsubject: '@processUrl("GetClassSubjects", "ClassSubject")',
                load_contents: '@processUrl("GetFullStructure", "ClassSubject")',
                create_exam: '@processUrl("CreateExamPart", "CloneLessonPart")',
                export_quiztemp_with_word: '@processUrl("ExportWordTemplate", "Curriculum")',
                import_quiz_with_word: '@processUrl("ImportFromWord", "CloneLessonPart")',
                download_word: '@processUrl("ExportToWord", "CloneLessonPart")',
            },
            bankquizid: '@currentData.ID',
            listtags: []
            @*type: @Data.TemplateType,
            lesson_id: '@Data.ID',
            class_id: '@Class.ID',
            class_subject_id: '@ClassSubject.ID',
            chap_id: '@Data.ChapterID',
            class_name: '@Class.Name',
            center_name: '@currentCenter.Name',
            student_name: '...................................',*@
        }
    var widget = new Lesson.onReady(config);
</script>
<link href="~/css/detailui.css" rel="stylesheet" />
<script>
    var RefreshPage = function () {
        document.location = document.location
    }
</script>

<section class="container-fluid">
    <div class="card-header border-b">
        <div class="flex flex-row flex-wrap align-items-center">
            <div class="">
                <h3>@currentData.Name (Tiếng Anh)</h3>

            </div>
            @*<div class="box filter-box w-152 m-1 ">
                    <select v-model="subject">
                        <option value="">Chương trình</option>
                        <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                    </select>
                </div>
                <div class="box filter-box w-152 m-1">
                    <select name="" v-model="grade">
                        <option value="">Cấp độ</option>
                        <option v-for="(item,k) in list_grades_full" :value="item.ID" v-if="item.SubjectID == subject">{{item.Name}}</option>
                    </select>
                </div>*@
        </div>
        <div class="flex flex-row flex-wrap align-items-center">

            <div class="box filter-box w-152 m-1 ">
                <select v-model="filterLevelPart">
                    <option value="">Mức độ</option>
                    <option value="@BaseCustomerEntity.Database.LEVELPART.KNOW">Nhận biết</option>
                    <option value="@BaseCustomerEntity.Database.LEVELPART.UNDERSTANDING">Thông hiểu</option>
                    <option value="@BaseCustomerEntity.Database.LEVELPART.MANIPULATE">Vận dụng</option>
                    <option value="@BaseCustomerEntity.Database.LEVELPART.MANIPULATEHIGHLY">Vận dụng cao</option>
                </select>
            </div>
            <div class="box filter-box w-152 m-1 ">
                <select>
                    <option value="">Loại câu hỏi</option>
                    <option value="">Lý thuyết</option>
                    <option value="">Bài tập</option>
                </select>
            </div>
            <div class="search-box m-1">
                <button><i class="ic ic-find"></i></button>
                <input type="text" name="" v-model="searchTerm" placeholder="Nội dung tìm kiếm">
            </div>
            <div class="ml-0 ml-md-auto">
                @*<b-button class="btn-addevent btn-sm m-1" v-on:click="showAddEditItem()"><i class="ti-plus"></i>Thêm mới</b-button>*@
                <b-button class="btn-addevent btn-sm m-1" v-on:click="showSelectTypeContent()"><i class="ti-plus"></i>Thêm nội dung</b-button>
                @*<b-button class="btn-addevent btn-sm m-1 ml-0 ml-md-auto" v-on:click="showEditItem()"><i class="ti-plus"></i> Thêm bài giảng</b-button>*@
            </div>
        </div>
    </div>
    <div class="card-body">
        <table class="table">
            <thead>
                <tr>
                    <td style="width:30px;max-width:30px">#</td>
                    <td>Câu hỏi</td>
                    <td style="width:250px;min-width:450px">Nội dung</td>
                    <td style="width:150px;max-width:150px;min-width:30px">Loại câu hỏi</td>
                    <td style="width:150px;max-width:130px;min-width:30px">Mức độ</td>
                    <td style="width:100px;max-width:100px;min-width:30px">Tác vụ</td>
                </tr>
            </thead>
            <tbody>
                <tr v-for="(item,k) in listLessonPart">
                    <td>{{(page - 1) * view + (k+1)}}</td>
                    <td>{{item.Title}}</td>
                    <td>
                        @*<input type="text" class="form-control" v-model="item.TagsName" disabled readonly />*@
                        <multiselect v-model="item.ListTags"
                                     tag-placeholder="Thêm mới"
                                     placeholder="Chọn nội dung"
                                     label="name"
                                     track-by="id"
                                     :options="optionsTags"
                                     :multiple="true"
                                     :taggable="true"
                                     :id="item.ID"
                                     @@tag="addTag"
                                     @@search-change="searchTags"
                                     @*@@input="changeValue"*@
                                     @@remove="removeTags"
                                     @@select="selectTags"></multiselect>
                    </td>
                    <td>
                        <select :id="item.ID" v-model="item.TypePart" v-on:change="changeTypePart(item.ID,item.TypePart)" class="form-control">
                            <option value="@BaseCustomerEntity.Database.TYPE_PART.THEORY">Lý thuyết</option>
                            <option value="@BaseCustomerEntity.Database.TYPE_PART.EXERCISE">Bài tập</option>
                        </select>
                    </td>
                    <td>
                        <select :id="item.ID" v-model="item.LevelPart" v-on:change="changeStatus(item.ID,item.LevelPart)" class="form-control">
                            <option value="@BaseCustomerEntity.Database.LEVELPART.KNOW">Nhận biết</option>
                            <option value="@BaseCustomerEntity.Database.LEVELPART.UNDERSTANDING">Thông hiểu</option>
                            <option value="@BaseCustomerEntity.Database.LEVELPART.MANIPULATE">Vận dụng</option>
                            <option value="@BaseCustomerEntity.Database.LEVELPART.MANIPULATEHIGHLY">Vận dụng cao</option>
                        </select>
                    </td>
                    <td>
                        <div class="btn-group" style="display:block">
                            @*<a class="btn-act btn-edit" title="Sửa" href="javascript:;" v-on:click="EditPart(item.ID)"><i class="ti-pencil-alt"></i></a>*@
                            <button class="btn-act btn-trash" title="Sửa" v-on:click="EditPart1(item)"><i class="ti-pencil-alt"></i></button>
                            <button class="btn-act btn-trash" title="Xóa" v-on:click="removeItem(item)"><i class="ti-trash"></i></button>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="box margin-t20 flex">
            <div class="paging-view">
                Hiển thị:
                <select v-model="view" v-on:change="getListPart()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                <div class="right">
                    <b-pagination v-model="page"
                                  :total-rows="totalRec"
                                  :per-page="view"
                                  v-on:input="getListPart()"></b-pagination>
                </div>
            </div>
        </div>
    </div>

    <!--Modals-->
    <b-modal id="addEditItem-modal-xl" size="xl" :title="getTitle()" :no-close-on-backdrop="true">
        <b-col class="form-group">
            <b-col class="flex flex-row flex-wrap align-items-center">
                <b-col class="box filter-box w-152 m-1">
                    <select v-model="addEditItem.SubjectID">
                        <option value="">Chương trình</option>
                        <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                    </select>
                </b-col>
                <b-col class="box filter-box w-152 m-1">
                    <select name="" v-model="addEditItem.GradeID">
                        <option value="">Cấp độ</option>
                        <option v-for="(item,k) in list_grades_full" :value="item.ID" v-if="item.SubjectID == addEditItem.SubjectID">{{item.Name}}</option>
                    </select>
                </b-col>
            </b-col>
        </b-col>
        <b-col class="form-group">
            <template v-if="listCourses.length > 0">
                <ul class="ul-course">
                    <template v-for="(item,k) in listCourses">
                        <li class="course">
                            <div class="course-content" v-on:click="showChapter(item)">
                                {{item.Name}}
                                <i class='far fa-arrow-alt-circle-down ml-1' :id="'i_'+ item.ID"></i>
                            </div>
                            <ul class="ul-chapter hide" :id="item.ID" v-if="filterChapters(item.ID,listChapters).length > 0">
                                <li v-for="(chapter,i) in filterChapters(item.ID,listChapters)" v-if="chapter.ParentID == 0">
                                    <template v-if="filterChildChapters(chapter.ID,listChapters).length > 0">
                                        <div class="course-content" v-on:click="showChapter(chapter)">
                                            {{chapter.Name}}
                                            <i class='far fa-arrow-alt-circle-down ml-1' :id="'i_'+chapter.ID"></i>
                                        </div>
                                        <ul class="hide" :id="chapter.ID">
                                            <li v-for="(chid,c) in filterChildChapters(chapter.ID,listChapters)">
                                                <div class="course-content" v-on:click="showCourseLesson(chid)">
                                                    {{chid.Name}}
                                                    <i class='far fa-arrow-alt-circle-down ml-1' :id="'i_'+chid.ID"></i>
                                                </div>
                                                <ul class="hide" :id="'li_' + chid.ID"></ul>
                                            </li>
                                        </ul>
                                    </template>
                                    <template v-else>
                                        <div class="course-content" v-on:click="showCourseLesson(chapter)">
                                            {{chapter.Name}}
                                            <i class='far fa-arrow-alt-circle-down ml-1' :id="'i_'+chapter.ID"></i>
                                        </div>
                                        <ul class="hide" :id="'li_' + chapter.ID"></ul>
                                    </template>
                                </li>
                            </ul>
                        </li>
                    </template>
                </ul>
            </template>
            @*<template v-else>
                    Không có nội dung
                </template>*@
        </b-col>
        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="savePart()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>

    <b-modal id="tags-modal" size="lg" title="Môn: Tiếng anh" :no-close-on-backdrop="true">
        <div class="pt-1 pb-1">
            <label class="">Chọn nội dung</label>
            <div class="row" id="listTags">
                <div v-for="(item,k) in list_tags" class="col-sm-6" style="position:relative">
                    <multiselect v-model="item.value"
                                 tag-placeholder="Thêm mới"
                                 placeholder="Chọn nội dung có sẵn hoặc thêm mới"
                                 label="name"
                                 track-by="id"
                                 :options="item.options"
                                 :multiple="false"
                                 :taggable="true"
                                 :id="'multiselect_'+k"
                                 @@tag="addTagtoList"
                                 @@search-change="searchTagtoList"
                                 @@input="inputTagstoList"
                                 style="max-width:350px">
                    </multiselect>
                    @*<multiselect v-model="value"
                                     :options="options"

                                     placeholder="Chọn nội dung"
                                     label="name"
                                     track-by="name"
                                     @@tag="addTagtoList"
                                     @@search-change="searchTagtoList"
                                     @@input="inputTagstoList"
                                     style="max-width:300px">
                        </multiselect>*@
                    <i class="fas fa-long-arrow-alt-right" id="fa-long-arrow-alt-right" style="display:none"></i>
                </div>
            </div>
            <div class="pt-1">
                <button class="btn" title="Thêm nội dung cấp dưới" v-on:click="addChilTags()">Thêm nội dung cấp dưới(Nếu cần)</button>
            </div>
        </div>

        @*<footer id="modal-footer"></footer>*@
        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang gửi dữ liệu ...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="nextStep()">Tiếp tục</b-button>
                <b-button variant="danger" v-on:click="hideModal('tags-modal')">Huỷ</b-button>
            </template>
        </template>

    </b-modal>

    <b-modal id="selectTypeContent-modal-center" centered title="Chọn thao tác">
        <div class="text-center">
            <p>
                <button type="button" class="btn btn-primary w-50 p-2 m-2" st v-on:click="AddPart1()"><i class="fas fa-plus-square mr-2"></i> Thêm trực tiếp </button>
            </p>
            <p>
                <button type="button" class="btn btn-primary w-50 p-2 m-2" v-on:click="showAddEditItem()"><i class="far fa-folder-open mr-2"></i> Chọn từ học liệu </button>
            </p>
        </div>

        @*<template #modal-footer="{cancel}">
                <b-button size="xl" v-on:click="hideModal('selectTypeContent-modal-center')">
                    Đóng
                </b-button>
            </template>*@
        <template v-slot:modal-footer="{cancel}">
            <template v-if="isLoading">
                <b-button>Đang gửi dữ liệu ...</b-button>
            </template>
            <template v-else>
                @*<b-button variant="success" v-on:click="nextStep()">Tiếp tục</b-button>*@
                <b-button variant="danger" v-on:click="hideModal('selectTypeContent')">Huỷ</b-button>
            </template>
        </template>
    </b-modal>

    @*<b-modal id="partModal" size="xl" title="Extra Large Modal">
            <div class="modal-body">
                <form action="#" name="partForm" enctype="multipart/form-data">
                </form>
            </div>
            <template v-slot:modal-footer="{ok,cancel}">
                <template v-if="isLoading">
                    <b-button>Đang gửi dữ liệu ...</b-button>
                </template>
                <template v-else>
                    <b-button variant="danger" data-dismiss="modal">Đóng</b-button>
                    <b-button variant=" success" onclick="submitForm(event)">Lưu</b-button>
                </template>
            </template>
        </b-modal>*@

    <div class="modal fade" role="dialog" aria-hidden="true" id="partModal" data-backdrop="static">
        <div class="modal-dialog modal-xl lesson-modal" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Thêm phần mới</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Đóng">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="#" name="partForm" enctype="multipart/form-data">
                        <input type="text" />
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-close" data-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary btnSaveForm" onclick="submitForm(event)">Lưu</button>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts{

    <script>
        new Vue({
            el: "#right-content",
            mounted() {
                this.list_subject = @Html.Raw(Json.Serialize(subjects));
                this.list_grades_full = @Html.Raw(Json.Serialize(grades));
                this.getListPart();
            },
            components: {
                Multiselect: window.VueMultiselect.default
            },
            data: {
                list_grades_full: [],
                list_subject: [],
                grade: '',
                subject: '',
                searchTerm: '',
                addEditItem: {
                    SubjectID: '',
                    GradeID:''
                },
                isLoading: false,
                listCourses: [],
                listChapters: [],
                listCourseLesson: [],
                view: 30,
                page: 1,
                totalRec: 0,
                searchTerm: '',
                filterLevelPart:'',
                listLessonPart: [],

                displayTags: [],
                optionsTags: [],
                list_tags: {
                    obj: {
                        //value: [{ name: 'Javascript', id: 'js',parentids:[] }],
                        value: [],
                        options: [
                            //{ name: 'Vue.js', id: 'vu', parentids: []},
                        ]
                    }
                }
            },
            computed: {},
            watch: {
                "addEditItem.GradeID": function () {
                    if (this.addEditItem.GradeID != "") {
                        this.getData();
                    }
                },
                "addEditItem.SubjectID": function () {
                    this.addEditItem.GradeID = ""
                },
                filterLevelPart: function () {
                    if (this.filterLevelPart >= 1 || this.filterLevelPart <= 3) {
                        this.getListPart(this.filterLevelPart)
                    }
                },
                grade: function () {
                    this.getListPart()
                }
            },
            methods: {
                showAddEditItem() {
                    //debugger
                    let _that = this
                    _that.addEditItem.GradeID = ""
                    _that.addEditItem.SubjectID = "@currentData.SubjectID"
                    _that.listCourses = []
                    this.hideModal('selectTypeContent-modal-center')
                    _that.$bvModal.show('addEditItem-modal-xl')
                },
                showSelectTypeContent() {
                    let _that = this
                    this.list_tags = []
                    var newobj = {
                        //value: [{ name: 'Javascript', id: 'js', parentids: []}],
                        value: [],
                        options: [
                            //{ name: 'Vue.js', id: 'vu', parentids: []},
                        ]
                    }
                    this.list_tags.push(newobj)
                    _that.$bvModal.show('tags-modal')
                },
                hideModal() {
                    $('.close').click();
                },
                getData() {
                    let _that = this
                    let _form = new FormData();
                    _form.append("GradeID", this.addEditItem.GradeID)
                    _form.append("SubjectID", this.addEditItem.SubjectID)
                    let _url = '@processUrl("GetListCourse","Curriculum")'
                    _that.isLoading = true
                    axios.post(_url, _form)
                        .then(response => {
                            _that.isLoading = false
                            var data = response.data.Courses
                            var chapters = response.data.Chapters
                            var error = response.data.Error
                            this.listCourses = []
                            this.listChapters = []
                            //debugger
                            if (data.length > 0) {
                                _that.listCourses = data
                                this.listCourses = _that.listCourses
                                this.listChapters = chapters
                                //this.totalRec = response.data.Model.totalRecord
                            }
                            //else if (error == "") {
                            //    alert(error)
                            //}
                        }).catch(e => {
                            _that.isLoading = false;
                            alert("Error: " + e)
                        })
                },
                filterChapters(courseID, obj) {
                    //debugger
                    var array = []
                    if (obj.length > 0) {
                        for (var i = 0; i < obj.length; i++) {
                            var item = obj[i]
                            if (item.CourseID == courseID)
                                array.push(item)
                        }
                        return array
                    }
                    else {
                        return array
                    }
                },
                filterChildChapters(ParentID, obj) {
                    var array = []
                    if (obj.length > 0) {
                        for (var i = 0; i < obj.length; i++) {
                            var item = obj[i]
                            if (item.ParentID == ParentID)
                                array.push(item)
                        }
                        return array
                    }
                    else {
                        return array
                    }
                },
                showChapter(obj) {
                    var id = obj.ID
                    var ulChapter = $("#"+id).attr("class")
                    var classi = $("#i_" + id).attr("class")
                    //ebugger
                    if (ulChapter != null) {
                        if (ulChapter.includes("hide")) {
                            $("#" + id).removeClass("hide")
                        }
                        else {
                            $("#" + id).addClass("hide")
                        }
                        if (classi.includes("fa-arrow-alt-circle-down")) {
                            $("#i_" + id).removeClass("fa-arrow-alt-circle-down")
                            $("#i_" + id).addClass("fa-arrow-alt-circle-left")
                        }
                        else {
                            $("#i_" + id).addClass("fa-arrow-alt-circle-down")
                            $("#i_" + id).removeClass("fa-arrow-alt-circle-left")
                        }
                    }
                },
                showCourseLesson(obj) {
                    var ul = $("#li_" + obj.ID)
                    if (ul[0].childElementCount == 0) {
                        if ($(ul).attr("class").includes("hide")) {
                            $(ul).removeClass("hide")
                            $("#i_" + obj.ID).removeClass("fa-arrow-alt-circle-down")
                            $("#i_" + obj.ID).addClass("fa-arrow-alt-circle-left")
                        }
                        else {
                            $(ul).addClass("hide")
                            $("#i_" + obj.ID).addClass("fa-arrow-alt-circle-down")
                            $("#i_" + obj.ID).removeClass("fa-arrow-alt-circle-left")
                        }
                        let _that = this
                        let _form = new FormData()
                        _form.append("ParentID", obj.ID)
                        let _url = '@processUrl("GetListCourseLesson", "Curriculum")'
                        _that.isLoading = true
                        axios.post(_url, _form)
                            .then(response => {
                                _that.isLoading = false
                                var data = response.data.CourseLesson
                                var lessonPart = response.data.LessonPart
                                var status = response.data.Status
                                var error = response.data.Error
                                var code = response.data.code
                                if (code == 405) {
                                    alert("Bạn không có quyền với thao tác này.Vui lòng liên hệ quản trị viên.")
                                }
                                else {
                                    if (status) {
                                        //this.listCourseLesson = data
                                        this.renderCourseLesson(obj.ID, data)
                                        this.renderLessonPart(lessonPart)
                                    }
                                    else {
                                        alert(error)
                                    }
                                }
                            }).catch(e => {
                                _that.isLoading = false;
                                alert("Error: " + e)
                            })
                    }
                    else {
                        if ($(ul).attr("class").includes("hide")) {
                            $(ul).removeClass("hide")
                            $("#i_" + obj.ID).removeClass("fa-arrow-alt-circle-down")
                            $("#i_" + obj.ID).addClass("fa-arrow-alt-circle-left")
                        }
                        else {
                            $(ul).addClass("hide")
                            $("#i_" + obj.ID).addClass("fa-arrow-alt-circle-down")
                            $("#i_" + obj.ID).removeClass("fa-arrow-alt-circle-left")
                        }
                    }
                },
                renderCourseLesson(id, obj) {
                    var ul = $("#li_" + id)
                    if (ul != null) {
                        ul.empty();
                        for (var i = 0; i < obj.length; i++) {
                            var item = obj[i]
                            //ul.append($('<li>', { "class": "card-footer", "style": "display:none","text": obj.Name}))
                            ul.append("<li><div style='cursor:pointer' onclick='showLessonPart(\"" + item.ID + "\")'>" + item.Title + "</div><ul class='hide' id='" + item.ID + "'></ul></li>")
                        }
                    }
                },
                renderLessonPart(obj) {
                    if (obj.length > 0) {
                        for (var i = 0; i < obj.length; i++) {
                            var item = obj[i]
                            var id = item.ParentID
                            var ul = $("#" + id)

                            var selectOption = "<select id='lp_" + item.ID + "' class='form-control' style='width:150px' required>" +
                                "<option value='@BaseCustomerEntity.Database.LEVELPART.KNOW'>Nhận biết</option>"+
                                "<option value='@BaseCustomerEntity.Database.LEVELPART.UNDERSTANDING'>Thông hiểu</option>"+
                                "<option value='@BaseCustomerEntity.Database.LEVELPART.MANIPULATE'>Vận dụng</option>"+
                                "<option value='@BaseCustomerEntity.Database.LEVELPART.MANIPULATEHIGHLY'>Vận dụng cao</option>"+
                                "</select>"

                            var selectType = "<select id='type_" + item.ID + "' class='form-control' style='width:150px' required>" +
                                "<option value='@BaseCustomerEntity.Database.TYPE_PART.THEORY'>Lý thuyết</option>"+
                                "<option value='@BaseCustomerEntity.Database.TYPE_PART.EXERCISE'>Bài tập</option>"+
                                "</select>"

                            var input = "<input type='checkbox' class='form-check-input' style='width: 50px;vertical-align: middle;' onclick='chooseLessonPart(\"" + item.ID + "\",this)'/>"

                            //var tags = "<input type='text' id='tags_" + item.ID + "' class='form-control' required />"
                            //var timer = "<input type='number' class='form-control' min='1' placeholder='Thời gian' id='tm_'" + item.ID + "/>"
                            //ul.append("<div class='row'><div class='col-sm-10'><li style='cursor:pointer'>" + item.Title + "</li></div><div class='col-sm-2' style='margin:auto'>" + timer + selectOption + input + "</div></div>")
                            //var table = "<div class='ml-sm-2 col-sm-9'>" + item.Title + "</div><div class='col-sm-1 p-0 m-0'>" + timer + "</div><div class='col-sm-1 p-0 m-0'>" + selectOption + "</div><div>" + input + "</div>"
                            var table = "<div class='ml-sm-2 col-sm-8'>" + item.Title + "</div>" +
                                //"<div class='col-sm-1 p-0 m-0'>" + tags + "</div>" +
                                "<div class='pl-1 pr-1'>" + selectType + "</div>" +
                                "<div class='pl-1 pr-1'>" + selectOption + "</div>" +
                                "<div class='pl-1 pr-1' style='margin-top:5px'>" + input + "</div>"
                            ul.append("<div class='row'>" + table + "</div>")
                        }
                    }
                },
                savePart() {
                    debugger
                    if (array.length == 0) {
                        alert("Bạn chưa chọn câu hỏi nào. Vui lòng chọn ít nhất 1 câu hỏi")
                    }
                    else {
                        //debugger
                        let _that = this
                        let _form = new FormData()
                        let _url = '@processUrl("CreateOrUpdateLessonPart", "ExamManage")'
                        for (var i = 0; i < array.length; i++) {
                            item = array[i]
                            _form.append("lessonPartExtentsions[" + i +"].OriginID", item.LessonPartID)
                            _form.append("lessonPartExtentsions[" + i +"].LevelPart", item.LevelPart)
                            //_form.append("lessonPartExtentsions[" + i +"].Tags", item.Tags)
                            _form.append("lessonPartExtentsions[" + i + "].TypePart", item.TypePart)
                        }

                        for (var i = 0; i < this.list_tags.length; i++) {
                            var value = this.list_tags[i].value
                            debugger
                            value.forEach((item, index) => {
                                debugger
                                _form.append("tags[" + index + "].ID", item.id)
                                _form.append("tags[" + index + "].Name", item.name)
                            })
                        }

                        _form.append("GradeID", this.addEditItem.GradeID)
                        _form.append("ID", '@currentData.ID')
                        _that.isLoading = true
                        axios.post(_url, _form)
                            .then(response => {
                                _that.isLoading = false
                                //this.hideModal()
                                var data = response.data.Data
                                var array = []
                                if (data.length > 0) {
                                    for (var i = 0; i < data.length; i++) {
                                        var item = data[i]
                                        array.push(item)
                                    }
                                    this.listLessonPart = array.concat(this.listLessonPart)
                                }
                                else {
                                    alert(response.data.Msg)
                                }
                            }).catch(e => {
                                _that.isLoading = false;
                                this.hideModal()
                                alert("Error: " + e)
                            })
                    }
                },
                getListPart() {
                    let _that = this
                    let _form = new FormData()
                    _form.append("ID", '@currentData.ID')
                    _form.append('PageSize', _that.view)
                    _form.append('PageIndex', _that.page)
                    _form.append('SearchText', _that.searchTerm)
                    _form.append('LevelPart', _that.filterLevelPart)
                    if (_that.grade) {
                        _form.append('SubjectID', _that.subject)
                        _form.append('GradeID', _that.grade)
                    }
                    let _url = '@processUrl("GetListPart", "ExamManage")'
                    axios.post(_url, _form)
                        .then(response => {
                            //_that.isLoading = false
                            var data = response.data.Data
                            this.listLessonPart = data
                            //debugger
                            this.totalRec = response.data.Model.totalRecord
                        }).catch(e => {
                            _that.isLoading = false;
                            alert("Error: " + e)
                        })
                },
                changeStatus(ID, newType) {
                    let _that = this
                    let _form = new FormData()
                    let _url = '@processUrl("ChangeStatus", "ExamManage")'
                    _form.append("ID", ID)
                    _form.append("NewType", newType)
                    axios.post(_url, _form)
                        .then(response => {
                            var id = response.data.ID
                            var type = response.data.NewType
                            $("#" + ID).val(type);
                        }).catch(e => {
                            _that.isLoading = false;
                            alert("Error: " + e)
                        })
                },
                changeTypePart(ID, newTypePart) {
                    let _that = this
                    let _form = new FormData()
                    let _url = '@processUrl("ChangeTypePart", "ExamManage")'
                    _form.append("ID", ID)
                    _form.append("NewTypePart", newTypePart)
                    axios.post(_url, _form)
                        .then(response => {
                            var id = response.data.ID
                            var type = response.data.NewType
                            $("#type_" + ID).val(type);
                        }).catch(e => {
                            _that.isLoading = false;
                            alert("Error: " + e)
                        })
                },
                changeTimer(ID, timer) {
                    let _that = this
                    let _form = new FormData()
                    let _url = '@processUrl("ChangeTimer", "ExamManage")'
                    _form.append("ID", ID)
                    _form.append("Timer", timer)
                    axios.post(_url, _form)
                        .then(response => {
                            var id = response.data.ID
                            var timer = response.data.Timer
                            $("#tm_" + ID).val(timer);
                        }).catch(e => {
                            _that.isLoading = false;
                            alert("Error: " + e)
                        })
                },
                removeItem(obj) {
                    let _that = this
                    let _form = new FormData()
                    let _url = '@processUrl("DeleteLessonPart", "ExamManage")'
                    _form.append("ID", obj.ID)
                    if (window.confirm("Bạn muốn xoá câu hỏi " + obj.Title + " ?")) {
                        axios.post(_url, _form)
                            .then(response =>
                            {
                                var stt = response.data.Status
                                var data = response.data.Data
                                if (stt) {
                                    var index = this.listLessonPart.findIndex(x => x.ID == data);
                                    if (index > -1) {
                                        this.listLessonPart.splice(index, 1);
                                    }
                                }
                                else {
                                    alert(data)
                                }
                            })
                            .catch(e =>
                            {
                                alert(e)
                            })
                    }
                },
                addTag(newTag, id) {
                    console.log(id)
                    //const tag = {
                    //    name: newTag,
                    //    id: ""
                    //};
                    //this.optionsTags.push(tag);
                    //debugger
                    let _that = this
                    let _form = new FormData();
                    let _url = '@processUrl("UpdateTags" ,"ExamManage")'
                    _form.append("listTags[0].Name", newTag)
                    _form.append("ExamQuestionArchiveID", '@currentData.ID')
                    _form.append("lessonpartID", id)
                    axios.post(_url, _form)
                        .then(res => {
                            var stt = res.data.Status
                            if (stt) {
                                debugger
                                const tag = {
                                    name: res.data.Data[0].Name,
                                    id: res.data.Data[0].ID
                                };
                                this.optionsTags.push(tag);
                            }
                            else {
                                console.log(res.data.Msg)
                            }
                        })
                        .catch(e => { console.log(e) })
                    //debugger
                },
                searchTags(term, id) {
                    let _that = this
                    //console.log(id)
                    if (term.length >= 2) {
                        if (this.actimeout != null)
                            clearTimeout(this.actimeout);
                        this.actimeout = setTimeout(function () {
                            var data_tags = _that.optionsTags.filter(item => item.name.toLowerCase().indexOf(term.toLowerCase()) > -1)
                            if (data_tags.length == 0) {
                                let _form = new FormData()
                                _form.append('Term', term)
                                //_form.append('Center', '@center')
                                let _url = '@processUrl("SearchTags", "ExamManage")'
                                axios.post(_url, _form)
                                    .then(response => {
                                        var stt = response.data.Status
                                        if (stt) {
                                            var data = response.data.Data
                                            //debugger
                                            if (data.length > 0) {
                                                for (var i = 0; i < data.length; i++) {
                                                    var current = data[i]
                                                    _that.optionsTags.push({
                                                        id: current.ID,
                                                        name: current.Name
                                                    })
                                                }
                                            }
                                        }
                                        else {
                                            alert(response.data.Msg)
                                        }
                                    }).catch(e => { alert(e) })
                            } else {

                            }
                        }, 500)
                    }
                },
                changeValue(value, id) {
                    debugger
                    let _that = this
                    let _form = new FormData();
                    let _url = '@processUrl("UpdateTags" ,"ExamManage")'

                    _form.append("ExamQuestionArchiveID", '@currentData.ID')
                    _form.append("lessonpartID", id)
                    for (var i = 0; i < value.length; i++) {
                        _form.append("listTags[" + i + "].Name", value[i].name)
                        _form.append("listTags[" + i + "].ID", value[i].id)
                    }
                    axios.post(_url, _form)
                        .then(res => {
                            var stt = res.data.Status
                            debugger
                            if (stt) {
                                const tag = {
                                    name: res.data.Data.Name,
                                    id: res.data.Data.ID
                                };
                                this.optionsTags.push(tag);
                            }
                            else {
                                console.log(res.data.Msg)
                            }
                        })
                        .catch(e => { console.log(e) })
                },
                removeTags(removedOption, id) {
                    //debugger
                    let _that = this
                    let _form = new FormData();
                    let _url = '@processUrl("UpdateTags" ,"ExamManage")'
                    //_form.append("listTags[0].Name", newTag)
                    _form.append("listTags[0].ID", removedOption.id)
                    _form.append("ExamQuestionArchiveID", '@currentData.ID')
                    _form.append("isRemove", true)
                    _form.append("lessonpartID", id)
                    axios.post(_url, _form)
                        .then(res => {
                            var stt = res.data.Status
                            if (stt) {
                                debugger
                                const tag = {
                                    name: res.data.Data[0].Name,
                                    id: res.data.Data[0].ID
                                };
                                this.optionsTags.push(tag);
                            }
                            else {
                                console.log(res.data.Msg)
                            }
                        })
                        .catch(e => { console.log(e) })
                },
                selectTags(selectedOption, id) {
                    debugger
                    let _that = this
                    let _form = new FormData();
                    let _url = '@processUrl("UpdateTags" ,"ExamManage")'
                    //_form.append("listTags[0].Name", newTag)
                    _form.append("listTags[0].ID", selectedOption.id)
                    _form.append("ExamQuestionArchiveID", '@currentData.ID')
                    _form.append("lessonpartID", id)
                    axios.post(_url, _form)
                        .then(res => {
                            var stt = res.data.Status
                            if (stt) {
                                debugger
                                const tag = {
                                    name: res.data.Data[0].Name,
                                    id: res.data.Data[0].ID
                                };
                                this.optionsTags.push(tag);
                            }
                            else {
                                console.log(res.data.Msg)
                            }
                        })
                        .catch(e => { console.log(e) })
                },
                addChilTags() {
                    let _that = this
                    if (_that.list_tags.length < 2) {
                        var newobj = {
                            //value: [{ name: 'Javascript', id: 'js', parentids: []}],
                            value: [],
                            options: [
                                //{ name: 'Vue.js', id: 'vu', parentids: []},
                            ]
                        }
                        this.list_tags.push(newobj)
                    }
                    if (_that.list_tags.length == 2) {
                        $(event.target).attr('style','display:none')
                    }
                    $("#fa-long-arrow-alt-right").removeAttr('style')
                    $("#fa-long-arrow-alt-right").attr('style','position:absolute;right:0;top:15px')
                },
                addTagtoList(newTag, id) {
                    console.log('addTagtoList')
                    let _that = this
                    let _form = new FormData();
                    let _url = '@processUrl("UpdateTags" ,"ExamManage")'
                    _form.append("listTags[0].Name", newTag)
                    _form.append("listTags[0].ExamQuestionArchiveID", '@currentData.ID')
                    var index = parseInt(id.replace("multiselect_", ""))
                    if (index > 0) {
                        var parentIDs = _that.list_tags[index - 1].value[0].id
                        _form.append("listTags[0].ParentIDs[0]", parentIDs)
                    }
                    axios.post(_url, _form)
                        .then(res => {
                            var stt = res.data.Status
                            if (stt) {
                                const tag = {
                                    name: res.data.Data[0].Name,
                                    id: res.data.Data[0].ID,
                                    parentids: res.data.Data[0].ParentIDs
                                };
                                this.list_tags[index].options.push(tag);
                            }
                            else {
                                console.log(res.data.Msg)
                            }
                        })
                        .catch(e => { console.log(e) })
                },
                searchTagtoList(term, id) {
                    let _that = this
                    console.log(term)
                    var index = parseInt(id.replace("multiselect_", ""))
                    if (term.length >= 2) {
                        if (this.actimeout != null)
                            clearTimeout(this.actimeout);
                        this.actimeout = setTimeout(function () {
                            //debugger
                            var data_tags = _that.list_tags[index].options.filter(item => item.name.toLowerCase().indexOf(term.toLowerCase()) > -1)
                            if (data_tags.length == 0) {
                                let _form = new FormData()
                                _form.append('Term', term)
                                //_form.append('Center', '@center')
                                let _url = '@processUrl("SearchTags", "ExamManage")'
                                axios.post(_url, _form)
                                    .then(response => {
                                        var stt = response.data.Status
                                        if (stt) {
                                            var data = response.data.Data
                                            if (data.length > 0) {
                                                for (var i = 0; i < data.length; i++) {
                                                    var current = data[i]
                                                    //debugger
                                                    _that.list_tags[index].options.push({
                                                        id: current.ID,
                                                        name: current.Name
                                                    })
                                                }
                                            }
                                        }
                                        else {
                                            alert(response.data.Msg)
                                        }
                                    }).catch(e => { alert(e) })
                            } else {

                            }
                        }, 500)
                    }
                },
                inputTagstoList(value, id) {
                    console.log('inputTagstoList')
                    var index = parseInt(id.replace("multiselect_", ""))
                    if (this.list_tags.length > 1 && index > 0) {
                        //debugger
                        var parentTags = this.list_tags[0].value
                        if (value.length == undefined) {
                            debugger
                        }
                        else {
                            value.parentids.push(parentTags.id)
                        }
                    }
                    if (index == 0 && this.list_tags.length > 1) {
                        var newtags = {
                            value: [],
                            options:[]
                        }
                        //debugger
                        this.list_tags[1] = newtags
                    }
                },
                nextStep() {
                    this.hideModal('tags-modal')
                    this.$bvModal.show('selectTypeContent-modal-center')
                    //this.$bvModal.show('addEditItem-modal-xl')
                },
                getTitle() {
                    if (this.list_tags.length > 0) {
                        var title = ""
                        for (var i = 0; i < this.list_tags.length; i++) {
                            var value = this.list_tags[i].value
                            //debugger
                            if (value.length == undefined) {
                                title += value.name + "; "
                            }
                            else {
                                value.forEach(item => {
                                    title += item.name + "; "
                                })
                            }
                        }
                        return title
                    }
                    else {
                        return "Thêm câu hỏi"
                    }
                },
                AddPart1() {
                    this.hideModal('selectTypeContent-modal-center')
                    AddPart()
                    config.listtags = []
                    for (var i = 0; i < this.list_tags.length; i++) {
                        var item = this.list_tags[i].value
                        config.listtags.push(item)
                    }
                },
                EditPart1(obj) {
                    console.log(obj.ID)
                    this.hideModal('selectTypeContent-modal-center')
                    EditPart(obj.ID)
                    $('#partModal').modal('hide');
                    $('#partModal').modal('show');
                }
            }
        });

        var showLessonPart = function (id) {
            //debugger
            var ul = $("#" + id)
            if ($(ul).attr("class").includes("hide")) {
                $(ul).removeClass("hide")
            }
            else {
                $(ul).addClass("hide")
            }
        }

        var array = []

        var chooseLessonPart = function (id, obj) {
            var stt = $(obj).prop("checked")
            var levelPart = document.getElementById("lp_" + id).value
            //var tags = document.getElementById("tags_" + id).value
            var typePart = document.getElementById("type_" + id).value
            //var timer = document.getElementById("tm_" + id).value
            if (stt) {
                //array.push({ ID: id, Type: typePart, Timer: timer })
                array.push({ LessonPartID: id, LevelPart: levelPart, TypePart: typePart })
            }
            else {
                var index = array.findIndex(x => x.LessonPartID == id);
                if (index > -1) {
                    array.splice(index, 1);
                }
            }
        }

        @*var saveQuestion = function () {
            if (array.length == 0) {
                alert("Bạn chưa chọn câu hỏi nào. Vui lòng chọn ít nhất 1 câu hỏi")
            }
            else {
                let _that = this
                let _form = new FormData()
                let _url = '@processUrl("CreateOrUpdateQuestion", "ExamManage")'
                //for (var i = 0; i < array.length; i++) {
                //    item = array[i]
                //    _form.append("Data", item)
                //}
                _form.append(array)
                axios.post(_url, _form)
                    .then(response => {
                        //_that.isLoading = false
                    }).catch(e => {
                        _that.isLoading = false;
                        alert("Error: " + e)
                    })
            }
        }*@
    </script>
    <style>
        ul {
            list-style: none
        }

            ul li {
                padding: 10px
            }

        /*.course {
            padding: 10px
        }*/

        .course .course-content {
            font-size: 16px;
            color: #00bbd4;
            font-weight: 700;
            cursor: pointer
        }

            .course .course-content:hover {
                text-shadow: 2px 2px 8px #FF0000
            }

        .right-content {
            position: relative
        }

        /*footer {
            background-color: white ;
            height: 60px
        }*/

        /*ul li:hover {
            text-shadow: 2px 2px 8px #FF0000
        }*/

        .multiselect__tag {
            background-color: antiquewhite;
            cursor: pointer;
            color: black
        }

            .multiselect__tag:hover {
                background-color: gray
            }

        .multiselect__tag-icon:after {
            color: black
        }

        .multiselect__option--highlight {
            background-color: antiquewhite;
            cursor: pointer;
            color: black
        }

            .multiselect__option--highlight:after {
                background-color: antiquewhite;
                cursor: pointer;
                color: black
            }

        /*.multiselect__option--selected.multiselect__option--highlight {
            background: #ff6a6a;
            color: #fff
        }*/
        /*.multiselect__tag-icon {
            visibility:hidden
        }

            .multiselect__tag-icon:focus, .multiselect__tag-icon:hover {*/
        /*background: #369a6e*/
        /*visibility: visible
            }*/

        .modal-footer {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            justify-content: flex-end;
            padding: .75rem;
            border-top: 1px solid #dee2e6;
            border-bottom-right-radius: calc(.3rem - 1px);
            border-bottom-left-radius: calc(.3rem - 1px);
            height: 55px;
            background-color: white
        }

        .modal-body {
            z-index: 9999
        }
    </style>
}

@section Modals{
    <!--modal thêm câu hỏi-->
    <!--<b-modal id="addEditItem-modal-xl" size="xl" title="Thêm câu hỏi" :no-close-on-backdrop="true">
        <b-col class="form-group">
            <b-col class="flex flex-row flex-wrap align-items-center">
                <b-col class="box filter-box w-152 m-1">
                    <select v-model="addEditItem.SubjectID">
                        <option value="">Chương trình</option>
                        <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                    </select>
                </b-col>
                <b-col class="box filter-box w-152 m-1">
                    <select name="" v-model="addEditItem.GradeID">
                        <option value="">Cấp độ</option>
                        <option v-for="(item,k) in list_grades_full" :value="item.ID" v-if="item.SubjectID == addEditItem.SubjectID">{{item.Name}}</option>
                    </select>
                </b-col>
            </b-col>
        </b-col>
        <b-col class="form-group">
            <template v-if="listCourses.length > 0">
                <ul class="ul-course">
                    <template v-for="(item,k) in listCourses">
                        <li class="course">
                            <div class="course-content" v-on:click="showChapter(item)">
                                {{item.Name}}
                                <i class='far fa-arrow-alt-circle-down ml-1' :id="'i_'+ item.ID"></i>
                            </div>
                            <ul class="ul-chapter hide" :id="item.ID" v-if="filterChapters(item.ID,listChapters).length > 0">
                                <li v-for="(chapter,i) in filterChapters(item.ID,listChapters)" v-if="chapter.ParentID == 0">
                                    <template v-if="filterChildChapters(chapter.ID,listChapters).length > 0">
                                        <div class="course-content" v-on:click="showChapter(chapter)">
                                            {{chapter.Name}}
                                            <i class='far fa-arrow-alt-circle-down ml-1' :id="'i_'+chapter.ID"></i>
                                        </div>
                                        <ul class="hide" :id="chapter.ID">
                                            <li v-for="(chid,c) in filterChildChapters(chapter.ID,listChapters)">
                                                <div class="course-content" v-on:click="showCourseLesson(chid)">
                                                    {{chid.Name}}
                                                    <i class='far fa-arrow-alt-circle-down ml-1' :id="'i_'+chid.ID"></i>
                                                </div>
                                                <ul class="hide" :id="'li_' + chid.ID"></ul>
                                            </li>
                                        </ul>
                                    </template>
                                    <template v-else>
                                        <div class="course-content" v-on:click="showCourseLesson(chapter)">
                                            {{chapter.Name}}
                                            <i class='far fa-arrow-alt-circle-down ml-1' :id="'i_'+chapter.ID"></i>
                                        </div>
                                        <ul class="hide" :id="'li_' + chapter.ID"></ul>
                                    </template>
                                </li>
                            </ul>
                        </li>
                    </template>
                </ul>
            </template>-->
    @*<template v-else>
            Không có nội dung
        </template>*@
    <!--</b-col>
        <template v-slot:modal-footer="{ ok, cancel}">
            <template v-if="isLoading">
                <b-button>Đang thực hiện...</b-button>
            </template>
            <template v-else>
                <b-button variant="success" v-on:click="savePart()">Lưu</b-button>
                <b-button variant="danger" v-on:click="hideModal()">Huỷ</b-button>
            </template>
        </template>
    </b-modal>-->
}

