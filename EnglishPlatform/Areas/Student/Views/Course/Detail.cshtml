@{
    Layout = "~/Views/Shared/_LayoutStudent_NewUI.cshtml";
    var currentClass = ViewBag.Class as BaseCustomerMVC.Models.ClassViewModel;
    ViewData["Title"] = currentClass.Name;
    string userid = ViewBag.UserID;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    string processUrl(string act, string ctrl, Object param = null)
    {
        string url = Url.Action(act, ctrl, param);

        return $"/{center}{url}";
    }
}
<script>
    setActiveMenu("class");
</script>

<section class="module" id="dashboard_content">
    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-header" v-cloak>
        <div class="flex pb-2">
            <h2 class="title"><a href="@processUrl("Index","Course")" title="Quản lý môn học"><i class="ti-arrow-left d-none"></i></a>{{domDecoder(className)}}</h2>
            <div class="c-right">
                <ul class="time-line flex">
                    <li><i class="ti-time"></i>Bắt đầu: {{formatShortDate(startDate)}} </li>
                    <li><i class="ti-time"></i>Kết thúc: {{formatShortDate(endDate)}} </li>
                </ul>
            </div>
        </div>
        <div class="flex j-between border-b">
            <div class="tab bg-none">
                <ul class="flex flex-row">
                    <li v-bind:class="{active : tab[0]}"><a href="javascript:;" title="Tổng quan" v-on:click="tabChange()">Tổng quan</a></li>
                    <li v-bind:class="{active : tab[1]}"><a href="javascript:;" title="Môn học" v-on:click="tabChange(1)">Môn học</a></li>
                    <li v-bind:class="{active : tab[2]}"><a href="javascript:;" title="Tài liệu tham khảo" v-on:click="tabChange(2)">Tài liệu tham khảo</a></li>
                    <li v-bind:class="{active : tab[3]}"><a href="javascript:;" title="Trao đổi / thảo luận" v-on:click="tabChange(3)">Thảo luận</a></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="card-body" v-cloak>
        <div class="box" v-if="tab[0]">
            <ul class="box list ls-overview mb-3">
                <li class="flex margin-b20">
                    <a href="#" class="thumb"><img :src="classImg" alt="" /></a>
                    <div class="c-right">
                        <p><span class="label">Khóa học: </span>{{domDecoder(className)}}</p>
                        <p><span class="label">Chương trình: </span>{{domDecoder(subjectName)}}</p>
                        <p><span class="label">Môn học: </span>{{skillName}}</p>
                        <ul class="time-line flex">
                            <li><i class="ti-time"></i>Bắt đầu: {{formatShortDate(startDate)}} </li>
                            <li><i class="ti-time"></i>Kết thúc: {{formatShortDate(endDate)}} </li>
                        </ul>
                    </div>
                </li>
            </ul>
            <div class="box info-practice">
                <h4>Chi tiết lớp học</h4>
                <p>{{domDecoder(classDescription)}}</p>
            </div>
        </div>
        <div class="row row-list" v-if="tab[1]">
            <div class="col-md-3 practice-item" v-for="(item,k) in classSubjects">
                <div class="box">
                    <div class="inner text-center">
                        <a :href="'@processUrl("Modules","Course")/' + item.ID" title="" class="title" :style="'color: ' + item.Color">
                            <span class="ic ic-headphone" :style="'background-image:url(' + item.Image + ');width: 150px; height: 200px;background-size:center; margin-bottom:5px'"></span>
                            @*<div>
                                    <img :src="item.Image" style="max-width:150px; max-height:200px" />
                                </div>*@
                            <div>
                                {{item.Title}}
                            </div>
                        </a>
                        <span class="name center">
                            {{item.Grade}}<br />
                            GV: {{item.Teacher}}
                        </span>
                        <a :href="'@processUrl("Modules","Course")/' + item.ID" class="btn-learn" :style="'background-color: ' + item.Color">Học ngay</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="box" v-if="tab[2]">
            <div class="row ls-doc" v-if="ref.data.length > 0">
                <div class="col-md-12" v-for="data in ref.data">
                    <div class="inner flex">
                        <a href="#" title="" class="thumb">
                            <img src="/pictures/doc1.png" alt="">
                        </a>
                        <div class="entry">
                            <div>
                                <div>
                                    <a href="#" title="" class="title">{{data.Title}}</a>
                                </div>
                                <div>
                                    <div class="rating"><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i></div>
                                    <div class="author pt-2"><i class="icofont icofont-teacher"></i> {{data.OwnerName}}</div>
                                </div>
                            </div>
                            <div class="pt-2 pb-2">
                                <p>{{domDecoder(data.Description)}}</p>
                            </div>
                            <div>
                                <a href="#" title="Xem" class="btn-view btn-success" v-on:click="openLink(data)" v-if="data.Link != null && data.Link.length > 0">Xem ({{data.Viewed}})</a>
                                <a href="#" v-if="data.Media != null" v-on:click="download(data)" :title="data.Media.Name" class="btn-download btn-info">Tải về ({{data.Downloaded}})</a>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="row ls-doc text-center d-block" v-else>
                Không có tài liệu
            </div>
        </div>
        <div class="box margin-t20 flex" v-if="tab[2] && ref.data.length > 0">
            <div class="paging-view">
                Hiển thị:
                <select v-model="ref.view" v-on:change="loadPreference()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                <div class="right">
                    <b-pagination v-model="ref.page"
                                  :total-rows="ref.totalRec"
                                  :per-page="ref.view"
                                  v-on:input="loadPreference()"></b-pagination>
                </div>
            </div>
        </div>
    </div>
</section>
@section Scripts{
    <script>
        new Vue({
            el: "#main",
            mounted() {
                this.loadClassDetail()
                window.loadContent = this.loadContent
                var hash = window.location.hash;
                if (hash.startsWith('#')) {
                    hash = hash.split('#')[1]
                    //console.log(hash)
                    switch (hash) {
                        case 'module':
                            this.tabChange(1);
                            break;
                        case 'reference':
                            this.tabChange(2);
                            break;
                        case 'discuss':
                            this.tabChange(3);
                            break;
                        default:
                            this.tabChange(0);
                            break;
                    }
                }
                else {
                    this.tabChange(1);
                }
            },
            data: {
                classID: '@currentClass.ID',
                className: '@currentClass.Name',
                startDate: '@currentClass.StartDate',
                endDate: '@currentClass.EndDate',
                classDescription: '@currentClass.Description',
                classImg: '@currentClass.Image',
                subjectName: '@currentClass.SubjectName',
                skillName: '@currentClass.SkillName',
                classSubjects: [],
                tab: [true, false],
                ref: {
                    range: '@BaseCustomerEntity.Database.REF_RANGE.CLASS',
                    target: '@currentClass.ID',
                    searchTerm: '',
                    data: [],
                    view: 10,
                    page: 1
                },
            },
            watch: {
            },
            methods: {
                tabChange(a = 0) {
                    // có thể load data theo từng tab để tối ưu hiệu năng
                    // this.getData()
                    let _that = this
                    _that.tab.forEach(function (item, k) {
                        _that.tab[k] = false;
                    })
                    this.tab = _that.tab
                    this.tab[a] = true
                    switch (a) {
                        case 0:
                            history.replaceState({ tab: a }, this.className + " - Tổng quan", "#info");
                            this.loadClassDetail();
                            break;
                        case 1:
                            history.replaceState({ tab: a }, this.className + " - Môn học", "#module");
                            this.loadClassSubjects();
                            break;
                        case 2:
                            history.replaceState({ tab: a }, this.className + " - Tài liệu tham khảo", "#reference");
                            this.loadPreference();
                            break;
                        case 3:
                            this.loadComment();
                            break;
                    }
                    this.$forceUpdate()
                },

                loadClassDetail() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('ID', _that.classID)
                    let _url = '@processUrl("GetDetail", "Course")'
                    axios.post(_url, _form)
                        .then(response => {
                        var _data = response.data.Data;
                        _data.forEach(function (item, k)
                        {
                            _that.teacherSource.push({
                                ID: item.id,
                                FullName: item.fullname,
                                SubjectID: obj.SubjectID
                            })
                        })
                        _that.loaded_teacher.push(obj.SubjectID);
                    }).catch(e => { })
                },
                loadComment() {
                    //document.location = '#comment'
                    $('.fn-box-chat-eduso').focus().click()
                },

                //MODULES
                loadClassSubjects() {
                    let _that = this
                    if (_that.classSubjects.length > 0)
                        return;

                    let _form = new FormData()
                    _form.append('ClassID', _that.classID)
                    let _url = '@processUrl("GetClassSubjects", "ClassSubject")'
                        axios.post(_url, _form)
                            .then(response => {
                                var _data = response.data.Data;
                                _that.classSubjects = [];
                                _data.forEach(function (item, k) {
                                    _that.classSubjects.push({
                                        ID: item.ID,
                                        Title: item.SkillName,
                                        Image: item.SkillImage,
                                        Color: item.Color,
                                        Teacher: item.TeacherName,
                                        Grade: item.GradeName,
                                        Chapters: [],
                                        Lessons: []
                                    })
                                    //_that.changeAddSubject(item)
                                    //_that.changeAddGrade(item)
                                })

                                //_that.$forceUpdate()
                            }).catch(e => { })
                },
                matchedItem(obj, key) {
                    return (obj.ClassSubject + '-' + obj.Parent) == key
                },
                filterItem(obj, list) {
                    return list.filter((p) => {
        	            return p.Parent == obj.ID && p.ClassSubject == obj.ClassSubject
                    })
                },


                //REF
                loadPreference() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('SearchText', "")
                    _form.append('Target', _that.ref.target)
                    _form.append('PageSize', _that.ref.view)
                    _form.append('PageIndex', _that.ref.page)

                    let _url = '@processUrl("GetClassList", "Reference")'

                    axios.post(_url, _form)
                        .then(response => {
                            _that.ref.data = response.data.Data;
                            this.ref.data = _that.ref.data
                            this.ref.totalRec = response.data.Model.totalRecord
                            console.log(totalRec)
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = tt / this.view + (tt % this.view > 0 ? 1 : 0);
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },
                openLink(obj) {
                    obj.Viewed = obj.Viewed + 1;
                    window.open('@processUrl("OpenLink", "Reference")/' + obj.ID);
                },
                download(obj) {
                    if (obj.Media == null)
                        return false;
                    obj.Downloaded = obj.Downloaded + 1;
                    window.open('@processUrl("Download", "Reference")/' + obj.ID);
                },

                //SUPPORT
                domDecoder(str) {
                    let parser = new DOMParser();
                    let dom = parser.parseFromString('<!doctype html><body>' + str, 'text/html');
                    return dom.body.textContent;
                },
                formatShortDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD/MM/YYYY")
                },

            }
        });
    </script>
}

