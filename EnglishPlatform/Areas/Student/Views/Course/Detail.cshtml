@{
    Layout = "~/Views/Shared/_LayoutStudent_NewUI.cshtml";
    var currentClass = ViewBag.Class as BaseCustomerMVC.Models.ClassViewModel;
    ViewData["Title"] = currentClass.Name;
    string userid = ViewBag.UserID;
}
<script>
    setActiveMenu("class");
</script>

<section class="module" id="dashboard_content">
    <div class="card-header">
        <div class="flex padding-b25">
            <h2 class="title"><a href="@Url.Action("Index","Course")" title="Quản lý môn học"><i class="ti-arrow-left"></i></a>{{className}}</h2>
            <div class="c-right">
                <ul class="time-line flex">
                    <li><i class="ti-time"></i>Bắt đầu: 14/08/2019 </li>
                    <li><i class="ti-time"></i>Kết thúc: 21/08/2019 </li>
                </ul>
            </div>
        </div>
        <div class="flex j-between border-b">
            <div class="tab bg-none">
                <ul class="flex">
                    <li v-bind:class="{active : tab[0]}"><a href="javascript:;" title="Tổng quan" v-on:click="tabChange()">Tổng quan</a></li>
                    <li v-bind:class="{active : tab[1]}"><a href="javascript:;" title="Môn học" v-on:click="tabChange(1)">Môn học</a></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="box" v-if="tab[0]">
            <ul class="box list ls-overview mb-3">
                <li class="flex margin-b20">
                    <a href="#" class="thumb"><img :src="classImg" alt="" /></a>
                    <div class="c-right">
                        <p><span class="label">Khóa học: </span>{{className}}</p>
                        <p><span class="label">Chương trình: </span>{{subjectName}}</p>
                        <p><span class="label">Môn học: </span>{{skillName}}</p>
                        <ul class="time-line flex">
                            <li><i class="ti-time"></i>Bắt đầu: {{formatShortDate(startDate)}} </li>
                            <li><i class="ti-time"></i>Kết thúc: {{formatShortDate(endDate)}} </li>
                        </ul>
                    </div>
                </li>
            </ul>
            <div class="box info-practice">
                <h4>Chi tiết lớp học</h4>
                <p>{{classDescription}}</p>
            </div>
        </div>
        <div class="row row-list" v-if="tab[1]">
            <div class="col-md-3 practice-item" v-for="(item,k) in classSubjects">
                <div class="box">
                    <div class="inner">
                        <span class="ic ic-headphone" :style="'background-image:url(' + item.Image + ')'"></span>
                        <a :href="'@Url.Action("Modules","Course")/' + item.ID" title="" class="title">{{item.Title}}</a>
                        <a :href="'@Url.Action("Modules","Course")/' + item.ID" class="btn-learn">Học ngay</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@section Scripts{
    <script>
        new Vue({
            el: "#main",
            mounted() {
                this.loadClassDetail()
                window.loadContent = this.loadContent
            },
            data: {
                classID: '@currentClass.ID',
                className: '@currentClass.Name',
                startDate: '@currentClass.StartDate',
                endDate: '@currentClass.EndDate',
                classDescription: '@currentClass.Description',
                classImg: '@currentClass.Image',
                subjectName: '@currentClass.SubjectName',
                skillName: '@currentClass.SkillName',
                classSubjects: [],
                tab: [true, false]
            },
            watch: {
            },
            methods: {
                tabChange(a = 0) {
                    // có thể load data theo từng tab để tối ưu hiệu năng
                    // this.getData()
                    let _that = this
                    _that.tab.forEach(function (item, k) {
                        _that.tab[k] = false;
                    })
                    this.tab = _that.tab
                    this.tab[a] = true
                    switch (a) {
                        case 0:
                            this.loadClassDetail();
                            break;
                        case 1:
                            this.loadClassSubjects();
                            break;
                    }
                    this.$forceUpdate()
                },
                loadClassDetail() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('ID', _that.classID)
                    let _url = '@Url.Action("GetDetail", "Class")'
                    axios.post(_url, _form)
                        .then(response => {
                        var _data = response.data.Data;
                        _data.forEach(function (item, k)
                        {
                            _that.teacherSource.push({
                                ID: item.id,
                                FullName: item.fullname,
                                SubjectID: obj.SubjectID
                            })
                        })
                        _that.loaded_teacher.push(obj.SubjectID);
                    }).catch(e => { })
                },
                loadClassSubjects() {
                    let _that = this
                    if (_that.classSubjects.length > 0)
                        return;

                    let _form = new FormData()
                    _form.append('ClassID', _that.classID)
                    let _url = '@Url.Action("GetClassSubjects", "ClassSubject")'
                        axios.post(_url, _form)
                            .then(response => {
                                var _data = response.data.Data;
                                _that.classSubjects = [];
                                _data.forEach(function (item, k) {
                                    _that.classSubjects.push({
                                        ID: item.ID,
                                        Title: item.SkillName,
                                        Image:  item.SkillImage,
                                        Chapters: [],
                                        Lessons: []
                                    })
                                    //_that.changeAddSubject(item)
                                    //_that.changeAddGrade(item)
                                })

                                //_that.$forceUpdate()
                            }).catch(e => { })
                },
                formatShortDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD/MM/YYYY")
                },
                matchedItem(obj, key) {
                    return (obj.ClassSubject + '-' + obj.Parent) == key
                },
                filterItem(obj, list) {
                    return list.filter((p) => {
        	            return p.Parent == obj.ID && p.ClassSubject == obj.ClassSubject
                    })
                },
            }
        });
    </script>
}

