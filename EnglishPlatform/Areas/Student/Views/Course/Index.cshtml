@{

    Layout = "~/Views/Shared/_LayoutStudent_NewUI.cshtml";
    var model = ViewBag.Model as BaseCustomerMVC.Models.DefaultModel;
    ViewData["Title"] = "My Courses";
    var subjects = ViewBag.Subjects as List<BaseCustomerEntity.Database.SubjectEntity>;
    var grades = ViewBag.Grades as List<BaseCustomerEntity.Database.GradeEntity>;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    string processUrl(string act, string ctrl)
    {
        string url = Url.Action(act, ctrl);

        return $"/{center}{url}";
    }
}

<script>
    setActiveMenu("class");
</script>

<script src="~/js/daterangepicker.min.js"></script>
<link href="~/css/daterangepicker.css" rel="stylesheet" />


<section class="module" id="dashboard_content">
    <div class="card-header">
        <div class="flex border-b padding-b25">
            <div class="box filter-box">
                <input type="text" value="-- Chọn thời gian --" name="dates" v-on:click="initDate()">
                <span class="ic ic-picker inactive"></span>
            </div>
            <div class="box filter-box w-152">
                <select v-model="subject" v-on:change="changeSubject()">
                    <option value="">Choose Subject</option>
                    <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                </select>
            </div>
            <div class="box filter-box w-152">
                <select name="" v-model="grade" v-on:change="changeGrade()">
                    <option value="">Choose Level</option>
                    <option v-for="(item,k) in list_grades" :value="item.ID">{{item.Name}}</option>
                </select>
            </div>
            <div class="search-box">
                <button><i class="ic ic-find"></i></button>
                <input type="text" name="" placeholder="Search">
            </div>
        </div>
    </div>

    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-body"  v-cloak>
        <div class="row row-list">
            <div class="col-md-3 course-item" v-for="(item,k) in list_course">
                <div class="box radius">
                    <a :href="'@processUrl("Detail", "Course")/' + item.ID" class="thumb"><img :src="item.Thumb" :alt="item.Name"></a>
                    <div class="detail box">
                        <a :href="'@processUrl("Detail", "Course")/' + item.ID" title="" class="title">{{item.Name}}</a>
                        <p><i class="ti-time"></i>{{formatShortDate(item.EndDate)}}</p>
                        <div class="c-bot flex">
                            <a :href="'@processUrl("Detail", "Course")/' + item.ID" title="Học ngay" class="btn-learn">Học ngay</a>
                            <div class="c-right">
                                {{item.CompletePercent + '%'}}<span class="ic ic-subtag"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="box margin-t20 flex">
            <div class="paging-view">
                Hiển thị:
                <select name="" v-model="view" v-on:change="getCourse()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                <div class="inner">
                    <button><i class="ti-angle-left"></i></button>
                    <button><i class="ti-angle-double-left"></i></button>
                    <input type="text" v-model="page" />
                    <button><i class="ti-angle-double-right"></i></button>
                    <button><i class="ti-angle-right"></i></button>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts{
    <style>

        .ic-picker {
            cursor: pointer;
        }

            .ic-picker.inactive {
                background-image: url('../images/pickerdate-1.png');
            }

        .course-item .thumb {
            position: relative;
            height: 0;
            padding-top: 56%;
        }

            .course-item .thumb img {
                position: absolute;
                top: 0;
                max-height: none;
                height: auto;
            }
    </style>
    <script>
        var isSearchDate = false;
        new Vue({
            el: "#main",
            mounted() {
                //var start = moment();
                //var end = moment().add(29, 'days');
                //$('input[name="dates"]').daterangepicker({
                //    startDate: start,
                //    endDate: end,
                //    locale: {
                //        format: "DD/MM/YYYY",
                //    }
                //}, function (s, e, label) {
                //    RepDate(s,e);
                //    GetCourse();
                //});
                this.list_subject = @Html.Raw(Json.Serialize(subjects));
                this.list_grades_full = @Html.Raw(Json.Serialize(grades));
                //console.log(this.list_grades_full);
                this.changeSubject()
                window.ChooseCalendar = this.chooseCalendar
                window.GetCourse = this.getCourse
                window.InitDate = this.initDate
                window.DestroyDate = this.destroyDate
                window.RepDate = this.repDate
                $('input[name=dates]').siblings('.ic-picker').click(function () {
                    if (isSearchDate) {
                        DestroyDate(this)
                    }
                    else {
                        InitDate();
                    }
                });
            },
            data: {
                list_course: [
                ],
                list_subject: [],
                list_grades_full: [],
                list_grades: [],
                subject:'',
                grade: '',
                view: 10,
                page: 1,
                startdate: moment(new Date(1800,1,1)),
                enddate: moment(new Date(1800,1,1)),
            },
            computed: {
                sDate: {
                    get() {
                        return moment(this.startdate).format("MM/DD/YYYY");
                    },
                    set(value) {
                        this.startdate = value;
                    }
                },
                eDate: {
                    get() {
                        return moment(this.enddate).format("MM/DD/YYYY");
                    },
                    set(value) {
                        this.enddate = value;
                    }
                }
            },
            watch: {
            },
            methods: {
                getCourse() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('GradeID', _that.grade)
                    _form.append('SubjectID', _that.subject)
                    _form.append('PageSize', _that.view)
                    _form.append('PageIndex', _that.page)
                    _form.append('StartDate', _that.sDate)
                    _form.append('EndDate', _that.eDate)
                    let _url = '@processUrl("GetList", "Course")'
                    axios.post(_url, _form)
                        .then(response => {
                            console.log(response.data)
                            _that.list_course = response.data.Data;
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },
                changeSubject() {
                    let _that = this
                    //console.log(this.subject)
                    //console.log(this.list_grades_full)
                    _that.list_grades = [];

                    for (i = 0; i < _that.list_grades_full.length; i++)
                    {
                        //console.log(_that.list_grades_full[i].SubjectID)
                        if (_that.list_grades_full[i].SubjectID == _that.subject) {
                            _that.list_grades.push(_that.list_grades_full[i])
                        }
                    }
                    _that.grade = ""
                    _that.changeGrade()
                },
                changeGrade() {
                    let _that = this
                    _that.getCourse()
                },
                formatShortDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD/MM/YYYY")
                },
                chooseCalendar() {
                    $('input[name=dates]').focus().click()
                },
                initDate() {
                    if (isSearchDate) return;
                    let _that = this
                    var start = moment();
                    var end = moment().add(29, 'days');
                    $('input[name="dates"]').daterangepicker({
                        startDate: start,
                        endDate: end,
                        locale: {
                            format: "DD/MM/YYYY",
                        }
                    }, function (s, e, label) {
                        RepDate(s, e);
                        GetCourse();
                    });
                    $('input[name="dates"]').siblings().removeClass('inactive');
                    isSearchDate = true;
                    $('input[name="dates"]').focus().click();
                    _that.startdate = start;
                    _that.enddate = end;
                    GetCourse()
                },
                destroyDate() {
                    let _that = this
                    console.log(isSearchDate);
                    if (!isSearchDate) return false;
                    //$('input[name="dates"]').daterangepicker().destroy()
                    $('input[name="dates"]').data('daterangepicker').remove();
                    $('input[name="dates"]').val('-- Chọn thời gian --');
                    $('input[name="dates"]').siblings().addClass('inactive');
                    isSearchDate = false;
                    console.log(isSearchDate);
                    _that.startdate = moment(new Date(1800,1,1)),
                    _that.enddate = moment(new Date(1800,1,1)),
                    GetCourse();
                },
                repDate(svalue, evalue) {
                    this.eDate = evalue;
                    this.sDate = svalue;
                }
            }
        });

    </script>
}