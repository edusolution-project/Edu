@{

    Layout = "~/Views/Shared/_LayoutStudent_NewUI.cshtml";
    var model = ViewBag.Model as BaseCustomerMVC.Models.DefaultModel;
    ViewData["Title"] = "My Courses";
    var subjects = ViewBag.Subjects as List<BaseCustomerEntity.Database.SubjectEntity>;
    var grades = ViewBag.Grades as List<BaseCustomerEntity.Database.GradeEntity>;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    string processUrl(string act, string ctrl)
    {
        string url = Url.Action(act, ctrl);
        return $"/{center}{url}";
    }
}

<script>
    setActiveMenu("class");
</script>

<script src="~/js/daterangepicker.min.js"></script>
<link href="~/css/daterangepicker.css" rel="stylesheet" />

<!--Lazy load-->
<script src="~/js/vue-lazyload.js"></script>

<section class="module" id="dashboard_content">
    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-body" v-cloak>
        <template v-if="classes.length > 0">
            <template v-for="(item,i) in classes">
                <template v-if="item.ClassMechanism != @BaseCustomerEntity.Database.CLASS_MECHANISM.PERSONAL">
                    <div class="form-group" :id="item.ID">
                        <h2 style="font-size:16px" class="font-weight-bold border-b pb-2 red-color">{{item.Name}} <span style="font-size:80%;">({{formatShortDate(item.StartDate)}} - {{formatShortDate(item.EndDate)}}) </span></h2>
                        <h3 style="font-size:14px" class="" v-if="item.Description != null">{{item.Description}}</h3>
                    </div>
                    <div class="form-group" v-if="classSubjects.filter(csbj => csbj.ClassID == item.ID && csbj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.STANDARD).length > 0">
                        <h2 style="font-size:15px;" class="font-weight-bold pb-3 blue-color">Học liệu chính quy</h2>
                        <ul class="list ls-practice row">
                            <li v-for="(csbj,j) in classSubjects" class="form-row col-md-6 col-sm-12 mb-3" v-if="csbj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.STANDARD && csbj.ClassID == item.ID">
                                <div class="inner d-flex w-100">
                                    <div class="align-top" style="width:102px">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName">
                                            <img v-lazy="cacheImg(csbj.SkillImage,100,130)" :title="csbj.CourseName" class="rounded border" />
                                        </a>
                                    </div>
                                    <div class="flex-fill ml-2">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName" class="text-dark font-weight-bold">
                                            {{csbj.CourseName}}
                                        </a>
                                        <p class="mb-1 pb-0 mt-1" style="font-size:13px">
                                            <span>{{csbj.SubjectName}}</span>
                                            <template v-if="csbj.SkillName != null">
                                                -
                                                <span>{{csbj.SkillName}}</span>
                                            </template>
                                        </p>
                                        <p style="font-size:13px">
                                            <template v-if="csbj.TeacherName != null">
                                                <span>GV: {{csbj.TeacherName}}</span>
                                            </template>
                                        </p>
                                        <p style="font-size:13px">
                                            Điểm mục tiêu: <btn class="csbj_target text-info" v-on:click="chooseTarget(csbj)"> {{csbj.Target  > 0 ? csbj.Target / 10 : "Chưa đặt"}}</btn>
                                        </p>
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="form-group" v-if="classSubjects.filter(csbj => csbj.ClassID == item.ID && csbj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXTEND).length > 0">
                        <h2 style="font-size:15px;" class="font-weight-bold pb-3 blue-color">Học liệu chuyên đề</h2>
                        <ul class="list ls-practice row">
                            <li v-for="(csbj,j) in classSubjects" class="form-row col-md-6 col-sm-12 mb-3" v-if="csbj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXTEND && csbj.ClassID == item.ID">
                                <div class="inner d-flex w-100" style="max-height:150px">
                                    <div class="align-top" style="width:102px">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName">
                                            <img v-lazy="cacheImg(csbj.SkillImage,100,130)" :title="csbj.CourseName" class="rounded border" />
                                        </a>
                                    </div>
                                    <div class="flex-fill ml-2">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName" class="text-dark font-weight-bold">
                                            {{csbj.CourseName}}
                                        </a>
                                        <p class="mb-1 pb-0 mt-1" style="font-size:13px">
                                            <span>{{csbj.SubjectName}}</span>
                                            <template v-if="csbj.SkillName != null">
                                                -
                                                <span>{{csbj.SkillName}}</span>
                                            </template>
                                        </p>
                                        <p style="font-size:13px">
                                            <template v-if="csbj.TeacherName != null">
                                                <span>GV: {{csbj.TeacherName}}</span>
                                            </template>
                                        </p>
                                        <p style="font-size:13px">
                                            Điểm mục tiêu: <btn class="csbj_target text-info" v-on:click="chooseTarget(csbj)"> {{csbj.Target  > 0 ? csbj.Target / 10: "Chưa đặt"}}</btn>
                                        </p>
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>

                    @* exam *@
                    <div class="form-group" v-if="classSubjects.filter(csbj => csbj.ClassID == item.ID && csbj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM).length > 0">
                        <template v-for="(csbj,j) in classSubjects" v-if="csbj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM && csbj.ClassID == item.ID">
                            <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName" class="text-danger font-weight-bold">
                                <h2 style="font-size:15px;" class="font-weight-bold">
                                    Bài kiểm tra
                                </h2>
                            </a>
                            <p style="font-size:13px" class="pb-3">
                                Điểm mục tiêu: <btn class="csbj_target text-info" v-on:click="chooseTarget(csbj)"> {{csbj.Target  > 0 ? csbj.Target / 10 : "Chưa đặt"}}</btn>
                            </p>
                        </template>
                        <ul class="list ls-practice">
                            <li v-for="(obj,i) in classSubjects" v-if="obj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM && obj.ClassID == item.ID" :for="obj.ID">
                                <ul class="list">
                                    <chap-content v-for="(item,k) in list_chapters" v-if="item.ClassSubject + '-' + item.Parent == obj.ID + '-'"
                                                  v-bind:data="item"
                                                  v-bind:classbj="obj.ID"
                                                  v-bind:pos="k"
                                                  v-bind:owner="obj.TeacherID"
                                                  v-bind:listchaps="list_chapters"
                                                  v-bind:type="'exam'"></chap-content>
                                    <lesson-item v-for="lesson in filterLesson({ID:'0', ClassSubject: obj.ID})" v-bind:data="lesson" v-bind:owner="obj.TeacherID" v-bind:classSubject="obj.ID" v-bind:type="'exam'"></lesson-item>
                                </ul>
                            </li>
                        </ul>
                    </div>
                </template>
                <template v-else-if="item.ClassMechanism == @BaseCustomerEntity.Database.CLASS_MECHANISM.PERSONAL">
                    <div class="form-group">
                        <h2 style="font-size:15px;" class="font-weight-bold pb-3 blue-color">Học liệu cá nhân</h2>
                        <ul class="list ls-practice row">
                            <li v-for="(csbj,j) in classSubjects" class="form-row col-md-6 col-sm-12 mb-3" v-if="csbj.ClassID == item.ID">
                                <div class="inner d-flex w-100" style="max-height:150px">
                                    <div class="align-top" style="width:102px">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName">
                                            <img v-lazy="cacheImg(csbj.SkillImage,100,130)" :title="csbj.CourseName" class="rounded border" />
                                        </a>
                                    </div>
                                    <div class="flex-fill ml-2 col-md-8">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName" class="text-dark font-weight-bold">
                                            {{csbj.CourseName}}
                                        </a>
                                        <p class="mb-1 pb-0 mt-1" style="font-size:13px">
                                            <span>{{csbj.SubjectName}}</span>
                                            <template v-if="csbj.SkillName != null">
                                                -
                                                <span>{{csbj.SkillName}}</span>
                                            </template>
                                        </p>
                                        <p style="font-size:13px">
                                            <template v-if="csbj.TeacherName != null">
                                                <span>GV: {{csbj.TeacherName}}</span>
                                            </template>
                                        </p>
                                        <p style="font-size:13px">
                                            Điểm mục tiêu: <btn class="csbj_target text-info" v-on:click="chooseTarget(csbj)"> {{csbj.Target  > 0 ?  (csbj.Target / 10) : "Chưa đặt"}}</btn>
                                        </p>
                                    </div>
                                    <template>
                                        <button v-if="isMobileDevice()" style="display:inline-flex!important;height:35px;border-radius:20px;position:inherit!important" type="button" class="btn" v-on:click="removeCourse(csbj)"><i class="far fa-trash-alt"></i></button>
                                        <button v-else type="button" class="btn btn-delete" v-on:click="removeCourse(csbj)"><i class="far fa-trash-alt"></i></button>
                                    </template>
                                </div>
                            </li>
                        </ul>
                    </div>
                </template>
            </template>
        </template>
    </div>
</section>

@section Scripts{
    <style>
        .ic-picker {
            cursor: pointer;
        }

            .ic-picker.inactive {
                background-image: url('../images/pickerdate-1.png');
            }

        .course-item .thumb {
            position: relative;
            height: 0;
            padding-top: 56%;
        }

            .course-item .thumb img {
                position: absolute;
                top: 0;
                max-height: none;
                height: auto;
            }

        .btn-delete {
            position: absolute;
            right: 30px;
            /*bottom: 10px;*/
            display: none;
        }

        .ls-practice li:hover .btn-delete {
            display: inline-block
        }

        .ls-practice .btn-delete:hover {
            border: solid 1px #CCC;
            border-radius: 2px;
        }

        .csbj_target {
            cursor: pointer;
        }

            .csbj_target:hover {
                font-weight: bold;
            }

        .swal2-title {
            font-size: 18px;
        }
    </style>

    <script type="text/x-template" id="chapContentTemp">
        <li class="pr-0 ml-3 chap-item">
            <div class="inner pt-2 pb-2">
                <div class="chap-row mt-1" onmouseover="$('.row-action.active').removeClass('active')">
                    <a href="javascript:;" v-b-toggle="`prc-${data.ID}-${pos}`" class="blue-color btn-collapse flex-grow-1 mb-0" v-on:click="loadContent(data.ClassSubject, data.ID)">
                        <div class="align-self-center mb-1" style="line-height:24px">
                            <i class=" ic far fa-folder mr-2"></i>{{data.Title + ' (' + data.TotalLessons +  ')'}}
                            <i class="ic ic-collapse"></i>
                        </div>
                    </a>
                    <div>
                        <div class="d-flex justify-content-between align-items-start align-items-md-center">
                            <div class="chap-info ml-3" style="color:#999; white-space: nowrap">
                                <i class="ti-link" style="background-color: #bee4ef;" v-for="(chap,j) in listchaps" v-if="(data.ConditionChapter != '') && (chap.ID == data.ConditionChapter)"><span class="pl-1">Điều kiện: {{chap.Title}}</span></i>
                                <i class="ti-target ml-2" v-if="data.BasePoint > 0" style="background-color: #ffe38d"><span class="pl-1">Điểm mục tiêu: {{data.BasePoint}}</span></i>
                                <i class="ti-control-play ml-2" style="background-color: #c3e2c3" v-if="moment(data.StartDate) > moment(new Date(1900,1,1))"><span class="pl-1">bắt đầu {{formatTime(data.StartDate)}}</span></i>
                                <i class="ti-timer ml-2" style="background-color: #fbcbcb" v-if="moment(data.EndDate) > moment(new Date(1900,1,1))"><span class="pl-1">hết hạn {{formatTime(data.EndDate)}}</span></i>
                            </div>
                        </div>
                    </div>
                </div>


                <b-collapse :id="`prc-${data.ID}-${pos}`" :accordion="`my-accordion-${data.Parent}`" role="tabpanel">
                    <b-card-body class="pr-0 pb-1 ">
                        <ul class="list">
                            <template v-if="data.IsLoading">
                                <li><i class=""></i> Đang nạp dữ liệu</li>
                            </template>
                            <template v-else>
                                <chap-content v-for="(subItem,j) in listchaps" v-if="subItem.ClassSubject + '-' + subItem.Parent == classbj + '-' + data.ID"
                                              v-bind:data="subItem"
                                              v-bind:classbj="classbj"
                                              v-bind:pos="j"
                                              v-bind:owner="owner"
                                              v-bind:listchaps="listchaps"
                                              v-bind:type="type"></chap-content>
                                <lesson-item v-for="lesson in filterLesson(data)" v-bind:data="lesson" v-bind:owner="owner" v-bind:classSubject="data.ClassSubject" v-bind:type="type"></lesson-item>
                            </template>
                        </ul>
                    </b-card-body>
                </b-collapse>
            </div>
        </li>
    </script>

    <script type="text/x-template" id="lessonItemTemp">
        <li class="sub-practice pt-2 pb-1 pl-2 rounded">
            <div class="d-flex w-100 flex-column flex-md-row align-items-start align-items-md-center">
                <a target="_blank" :href="'@processUrl("Detail", "Lesson")/' + data.ID + '/' + data.ClassSubject" class="flex-grow-1 overflow-hidden text-dark" style="text-overflow: ellipsis" :title="data.Title">
                    <template v-if="data.TemplateType === 2">
                        <span class="text-danger">
                            <i class="ic far fa-edit mr-2"></i>
                            {{data.Title}}
                        </span>
                    </template>
                    <template v-else>
                        <span>
                            <i class="ic far fa-file-alt mr-2"></i>
                            {{data.Title}}
                        </span>
                    </template>
                </a>
            </div>
        </li>
    </script>

    <script>

        Vue.component('chap-content', {
            template: '#chapContentTemp',
            props: {
                listchaps: Array,
                classbj: String,
                lessons: Array,
                data: Object,
                pos: String,
                owner: String,
                type: String
            }
        })

        Vue.component('lesson-item', {
            template: '#lessonItemTemp',
            props: {
                data: Object,
                classSubject: String,
                owner: String,
                type: String
            }
        })

        var isSearchDate = false;
        new Vue({
            el: "#main_content",
            mounted() {

                this.list_subject = @Html.Raw(Json.Serialize(subjects));
                this.list_grades_full = @Html.Raw(Json.Serialize(grades));

                this.loadClassSubjects();

                this.isMobileDevice();
            },
            data: {
                list_course: [],
                list_subject: [],
                list_grades_full: [],
                list_grades: [],
                subject:'',
                grade: '',
                view: 10,
                page: 1,

                lesson_week: [],
                weekTitle: '',
                startDate: moment(),
                padRoute: 0,
                endDate: moment(),
                period: 0,
                classSubjects: [],
                classes: [],
                checkClass(c1, c2) {
                    console.log(c1);
                    console.log(c2);
                    return c1 == c2
                },
                loadClassSubjects() {
                    //debugger
                    let _that = this
                    //if (_that.classSubjects.length > 0)
                    //    return;

                    let _form = new FormData()
                    //_form.append('ClassID', _that.classID)
                    _form.append('GradeID', _that.grade)
                    _form.append('SubjectID', _that.subject)
                    let _url = '@processUrl("GetClassSubjects", "ClassSubject")'
                        axios.post(_url, _form)
                            .then(response => {
                                var _data = response.data.Data;
                                if (response.data.Classes.length == 0) {
                                    swal({
                                        title: "Bạn chưa có trong lớp học nào, liên hệ với giáo viên hoặc chuyển đến học liệu để thêm vào lớp cá nhân của bạn",
                                        text: "Click tại đây để chuyển đến học liệu tương tác",
                                        icon: "warning",
                                        buttons: true,
                                        dangerMode: true,
                                    })
                                        .then((willDelete) => {
                                            if (willDelete) {
                                                window.location.href="@processUrl("Index", "Reference")#docsinteractive"
                                            }
                                        });
                                    //Swal.fire("Bạn chưa có trong lớp học nào, liên hệ với giáo viên hoặc chuyển đến học liệu để thêm vào lớp cá nhân của bạn", "Click tại đây để chuyển đến học liệu tương tác", "warning");
                                }
                                else {
                                    this.classes = response.data.Classes;
                                    this.classSubjects = response.data.Data;
                                    for (var i = 0; i < this.classSubjects.length; i++) {
                                        var itemcsbj = this.classSubjects[i]
                                        if (itemcsbj.TypeClass == @BaseCustomerEntity.Database.CLASSSUBJECT_TYPE.EXAM) {
                                            //debugger
                                            this.loadContent(itemcsbj.ID);
                                        }
                                    }
                                }
                            }).catch(e => { })
                },
                list_chapters: [],
                loaded_chapter: [],
                list_lessons:[]
            },
            //computed: {
            //    sDate: {
            //        get() {
            //            return moment(this.startdate).format("MM/DD/YYYY");
            //        },
            //        set(value) {
            //            this.startdate = value;
            //        }
            //    },
            //    eDate: {
            //        get() {
            //            return moment(this.enddate).format("MM/DD/YYYY");
            //        },
            //        set(value) {
            //            this.enddate = value;
            //        }
            //    }
            //},
            watch: {
            },
            methods: {
                formatTime(time) {
                    var _time = moment(time);
                    if (!_time._isValid || _time < moment(new Date(2000, 1, 1))) return "";
                    return _time.format("DD/MM/YYYY HH:mm")
                },
                formatShortDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD/MM/YYYY")
                },
                formatDatenoYear(date) {
                    var _date = moment(date);
                    if (!_date._isValid || _date < moment(new Date(2000, 1, 1))) return "";
                    return _date.format("DD/MM")
                },
                cacheImg(src, width, height) {
                    return cacheStatic(src, width, height, 'picture/book.jpg');
                },
                removeCourse(csbj) {
                    let _form = new FormData()
                    _form.append('ClassSubjectID', csbj.ID);
                    //let _url = '@processUrl("RemoveCourse", "Class")';
                    let _url = '@processUrl("Remove", "Class")';
                    Swal.fire({
                        //title: "Xác nhận xoá học liệu " + csbj.CourseName + " ?",
                        html: "Xác nhận xoá học liệu <br/><b>" + csbj.CourseName + "</b> ?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Xóa',
                        cancelButtonText: 'Hủy',
                    }).then(result => {
                        if (result.value) {
                            Swal.fire({
                                title: 'Đang xóa học liệu ...',
                                onBeforeOpen() {
                                    Swal.showLoading()
                                },
                                onAfterClose() {
                                    Swal.hideLoading()
                                },
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                allowEnterKey: false
                            });
                            axios.post(_url, _form)
                                .then(response => {
                                    if (!response.data.Status) {//xoa khong thanh cong
                                        Swal.fire(response.data.Msg, "warning")
                                        //alert(response.data.Msg);
                                    }
                                    else {//xoa thanh cong
                                        Swal.fire(response.data.Msg, "success");
                                        //remove deleted course

                                        this.classSubjects.splice(this.classSubjects.indexOf(csbj), 1);

                                        //alert(response.data.Msg);
                                        //_that.changeSubject();
                                        //Swal.close();
                                    }
                                }).catch(e => {
                                    console.log(e);
                                    Swal.close()
                                })
                        }
                        else {
                            Swal.close();
                            return false;
                        }
                    });
                },
                isMobileDevice() {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        // true for mobile device
                        console.log("Mobile detected");
                        return true;
                    } else {
                        // false for not mobile device
                        console.log("Desktop detected");
                        return false;
                    }
                },
                filterLesson(obj) {
                    var filter = []
                    for (var i = 0; i < this.list_lessons.length; i++) {
                        var item = this.list_lessons[i]
                        if (item.ClassSubject == obj.ClassSubject) {
                            //debugger
                            filter.push(item)
                        }
                    }
                    return filter;
                },
                loadContent(subject, chapter) {
                    let _that = this
                    let key = subject + "_" + chapter
                    if (_that.loaded_chapter.includes(key))
                        return;
                    let _form = new FormData()
                    _form.append('ID', subject)
                    if (chapter)
                        _form.append('Parent', chapter)
                    let _url = '@processUrl("GetContents", "ClassSubject")'
                    axios.post(_url, _form)
                        .then(response => {
                            var _data = response.data.Data;
                            var _lesson = response.data.Lesson;
                            _data.forEach(function (chapter, k) {
                                var parent = chapter.ParentID;
                                if (parent == "0") { parent = ""; }
                                _that.list_chapters.push({
                                    ID: chapter.ID,
                                    Title: chapter.Name,
                                    ClassSubject: subject,
                                    Parent: parent,
                                    TotalLessons: chapter.TotalLessons,
                                    StartDate: chapter.StartDate,
                                    EndDate: chapter.EndDate,
                                    BasePoint: chapter.BasePoint,
                                    ConditionChapter: chapter.ConditionChapter == null ? '' : chapter.ConditionChapter
                                })
                            })
                            _lesson.forEach(function (lesson, k) {
                                var parent = '';
                                if (lesson.ChapterID) {
                                    parent = lesson.ChapterID;
                                }

                                _that.list_lessons.push({
                                    ID: lesson.ID,
                                    ScheduleID: lesson.ScheduleID,
                                    Title: lesson.Title,
                                    TemplateType: lesson.TemplateType,
                                    ClassSubject: subject,
                                    Parent: parent,
                                    StartDate: moment(lesson.StartDate) > moment(new Date(1900, 1, 1)) ? lesson.StartDate : "",
                                    EndDate: moment(lesson.EndDate) > moment(new Date(1900, 1, 1)) ? lesson.EndDate : "",
                                    IsActive: lesson.IsActive,
                                    IsUpdating: false,
                                    IsOnline: lesson.IsOnline,
                                    IsHideAnswer: lesson.IsHideAnswer
                                })

                            })
                            this.loaded_chapter.push(key);
                            this.list_chapters = _that.list_chapters
                            this.list_lessons = _that.list_lessons
                            //Vue.nextTick(function () {
                            //    this.toggleTooltips($('.ls-practice [for=' + subject + ']'));
                            //})
                        }).catch(e => { })
                },
                chooseTarget(csbj) {
                    Swal.fire({
                        title: 'Điểm mục tiêu cho môn này của bạn là mấy?',
                        html: '<span style="font-size:20px; color:#D03239; font-weight:bold;">' + csbj.CourseName + '</span>',
                        icon: 'question',
                        input: 'number',
                        showCancelButton: true,
                        cancelButtonText: 'Hủy',
                        confirmButtonText: 'Đặt',
                        inputLabel: 'Điểm mục tiêu',
                        inputAttributes: {
                            min: 1,
                            max: 10,
                            step: 1
                        },
                        inputValidator: (value) => {
                            return (value > 10 || value < 0) && 'Điểm mục tiêu trong khoảng 1 đến 10'
                        },
                        inputValue: csbj.Target / 10,
                        showLoaderOnConfirm: true,
                        preConfirm: (target) => {
                            if (target != csbj.Target) {
                                let _form = new FormData()
                                _form.append('Target', target * 10);
                                _form.append('ID', csbj.ID);
                                let _url = '@processUrl("SetTarget", "ClassSubject")'
                                axios.post(_url, _form)
                                    .then(response => {
                                        var data = response.data.target;
                                        var error = response.data.error;
                                        if (error != null) {
                                            throw new Error(error);
                                        }
                                        else {
                                            csbj.Target = data;
                                        }
                                    }).catch(e => {
                                        //console.log(e)
                                        Swal.showValidationMessage(
                                            `Có lỗi: ${e}`
                                        )
                                    })
                            }
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        console.log(result);
                        if (result.isConfirmed) {
                           //csbj.Target = result.value
                        }
                    })
                },
                showWeekLesson(start) {

                    let _that = this
                    let _form = new FormData()
                    var _date = moment(start);
                    if (!_date._isValid || _date < moment(new Date(2000, 1, 1)))
                        _date = moment();
                    date = _date.format("yyyy-MM-dd")
                    console.log(date);
                    _form.append('today', date)
                    _form.append('seekStart', false)
                    let _url = '@processUrl("GetThisWeekLesson", "Course")'

                    axios.post(_url, _form)
                        .then(response => {
                            //console.log("Week")
                        _that.lesson_week = response.data.data;
                        }).catch(e => { })

                    this.weekTitle = "Danh sách bài - Tuần " + this.formatShortDate(_date) + " - " + this.formatShortDate(_date.add(6, 'days'));
                    this.$bvModal.show("model_week_lesson")
                }
            }
        });

        //lazy load
        Vue.use(VueLazyload, {
            preLoad: 1.3,
            error: '~/pictures/book.jpg',
            //loading: '~/img/Spin-1.8s-200px.gif',
            attempt: 1,
            // the default is ['scroll', 'wheel', 'mousewheel', 'resize', 'animationend', 'transitionend']
            //listenEvents: ['scroll']
        })

        var toggleTooltips = function (obj) {
            $(obj).find('i').tooltip({
                position: {
                    my: "center bottom-10",
                    at: "center top",
                    using: function (position, feedback) {
                        $(this).css(position);
                        $("<div>")
                            .addClass("arrow")
                            .addClass(feedback.vertical)
                            .addClass(feedback.horizontal)
                            .appendTo(this);
                    }
                },
                show: {
                    delay: 25
                }
            });
        }

    </script>
}

