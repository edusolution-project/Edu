@{

    Layout = "~/Views/Shared/_LayoutStudent_NewUI.cshtml";
    var model = ViewBag.Model as BaseCustomerMVC.Models.DefaultModel;
    ViewData["Title"] = "My Courses";
    var subjects = ViewBag.Subjects as List<BaseCustomerEntity.Database.SubjectEntity>;
    var grades = ViewBag.Grades as List<BaseCustomerEntity.Database.GradeEntity>;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    string processUrl(string act, string ctrl)
    {
        string url = Url.Action(act, ctrl);

        return $"/{center}{url}";
    }
}

<script>
    setActiveMenu("class");
</script>

<script src="~/js/daterangepicker.min.js"></script>
<link href="~/css/daterangepicker.css" rel="stylesheet" />

<!--Lazy load-->
<script src="~/js/vue-lazyload.js"></script>

<section class="module" id="dashboard_content">
    @*<div class="card-header">

            <div class="flex flex-row border-b flex-wrap pb-2 align-items-center">
                <div class="box filter-box d-none">
                    <input type="text" value="-- Chọn thời gian --" name="dates" v-on:click="initDate()">
                    <span class="ic ic-picker inactive"></span>
                </div>
                <div class="box filter-box col-12 col-md-3 ml-0 mb-1">
                    <select v-model="subject" v-on:change="changeSubject()">
                        <option value="">Chọn chương trình</option>
                        <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                    </select>
                </div>
                <div class="box filter-box col-12 col-md-3 ml-0 mb-1 ml-md-2">
                    <select name="" v-model="grade" v-on:change="changeGrade()">
                        <option value="">Chọn cấp độ</option>
                        <option v-for="(item,k) in list_grades" :value="item.ID">{{item.Name}}</option>
                    </select>
                </div>
                <div class="search-box col-12 col-md-3 mb-1 ml-0 ml-md-2">
                    <button><i class="ic ic-find"></i></button>
                    <input type="text" name="" placeholder="Tên lớp cần tìm">
                </div>
            </div>
        </div>*@

    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-body" v-cloak>
        <template v-if="classes.length > 0">
            <template v-for="(item,i) in classes">
                <template v-if="item.ClassMechanism != @BaseCustomerEntity.Database.CLASS_MECHANISM.PERSONAL">
                    <div class="form-group" :id="item.ID">
                        <h2 style="font-size:16px" class="font-weight-bold border-b pb-2 red-color">{{item.Name}} <span style="font-size:80%;">({{formatShortDate(item.StartDate)}} - {{formatShortDate(item.EndDate)}}) </span></h2>
                    </div>
                    <div class="form-group" v-if="classSubjects.filter(csbj => csbj.ClassID == item.ID && csbj.TypeClass == @BaseCustomerEntity.Database.CLASS_TYPE.STANDARD).length > 0">
                        <h2 style="font-size:15px;" class="font-weight-bold pb-3 blue-color">Học liệu chính quy</h2>
                        <ul class="list ls-practice row">
                            <li v-for="(csbj,j) in classSubjects" class="form-row col-md-6 col-sm-12 mb-3" v-if="csbj.TypeClass == @BaseCustomerEntity.Database.CLASS_TYPE.STANDARD && csbj.ClassID == item.ID">
                                <div class="inner d-flex w-100">
                                    <div class="align-top" style="width:102px">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName">
                                            <img v-lazy="cacheImg(csbj.SkillImage,100,130)" :title="csbj.CourseName" class="rounded border" />
                                        </a>
                                    </div>
                                    <div class="flex-fill ml-2">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName" class="text-dark font-weight-bold">
                                            {{csbj.CourseName}}
                                        </a>
                                        <p class="mb-1 pb-0 mt-1" style="font-size:13px">
                                            <span>{{csbj.SubjectName}}</span>
                                            <template v-if="csbj.SkillName != null">
                                                -
                                                <span>{{csbj.SkillName}}</span>
                                            </template>
                                        </p>
                                        <p style="font-size:13px">
                                            <template v-if="csbj.TeacherName != null">
                                                <span>GV: {{csbj.TeacherName}}</span>
                                            </template>
                                        </p>
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>

                    <div class="form-group" v-if="classSubjects.filter(csbj => csbj.ClassID == item.ID && csbj.TypeClass == @BaseCustomerEntity.Database.CLASS_TYPE.EXTEND).length > 0">
                        <h2 style="font-size:15px;" class="font-weight-bold pb-3 blue-color">Học liệu chuyên đề</h2>
                        <ul class="list ls-practice row">
                            <li v-for="(csbj,j) in classSubjects" class="form-row col-md-6 col-sm-12 mb-3" v-if="csbj.TypeClass == @BaseCustomerEntity.Database.CLASS_TYPE.EXTEND && csbj.ClassID == item.ID">
                                <div class="inner d-flex w-100" style="max-height:150px">
                                    <div class="align-top" style="width:102px">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName">
                                            <img v-lazy="cacheImg(csbj.SkillImage,100,130)" :title="csbj.CourseName" class="rounded border" />
                                        </a>
                                    </div>
                                    <div class="flex-fill ml-2">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName" class="text-dark font-weight-bold">
                                            {{csbj.CourseName}}
                                        </a>
                                        <p class="mb-1 pb-0 mt-1" style="font-size:13px">
                                            <span>{{csbj.SubjectName}}</span>
                                            <template v-if="csbj.SkillName != null">
                                                -
                                                <span>{{csbj.SkillName}}</span>
                                            </template>
                                        </p>
                                        <p style="font-size:13px">
                                            <template v-if="csbj.TeacherName != null">
                                                <span>GV: {{csbj.TeacherName}}</span>
                                            </template>
                                        </p>
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </template>
                <template v-else>
                    <div class="form-group">
                        <h2 style="font-size:15px;" class="font-weight-bold pb-3 blue-color">Học liệu cá nhân</h2>
                        <ul class="list ls-practice row">
                            <li v-for="(csbj,j) in classSubjects" class="form-row col-md-6 col-sm-12 mb-3" v-if="csbj.ClassID == item.ID">
                                <div class="inner d-flex w-100" style="max-height:150px">
                                    <div class="align-top" style="width:102px">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName">
                                            <img v-lazy="cacheImg(csbj.SkillImage,100,130)" :title="csbj.CourseName" class="rounded border" />
                                        </a>
                                    </div>
                                    <div class="flex-fill ml-2 col-md-8">
                                        <a :href="'@processUrl("Modules","Course")/' + csbj.ID" :title="csbj.CourseName" class="text-dark font-weight-bold">
                                            {{csbj.CourseName}}
                                        </a>
                                        <p class="mb-1 pb-0 mt-1" style="font-size:13px">
                                            <span>{{csbj.SubjectName}}</span>
                                            <template v-if="csbj.SkillName != null">
                                                -
                                                <span>{{csbj.SkillName}}</span>
                                            </template>
                                        </p>
                                        <p style="font-size:13px">
                                            <template v-if="csbj.TeacherName != null">
                                                <span>GV: {{csbj.TeacherName}}</span>
                                            </template>
                                        </p>
                                    </div>
                                    <template>
                                        <button v-if="isMobileDevice()" style="display:inline-flex!important;height:35px;border-radius:20px;position:inherit!important" type="button" class="btn" v-on:click="removeCourse(csbj)"><i class="far fa-trash-alt"></i></button>
                                        <button v-else type="button" class="btn btn-delete" v-on:click="removeCourse(csbj)"><i class="far fa-trash-alt"></i></button>
                                    </template>
                                </div>
                            </li>
                        </ul>
                    </div>
                </template>
            </template>
        </template>
    </div>
</section>

@section Scripts{
    <style>

        .ic-picker {
            cursor: pointer;
        }

            .ic-picker.inactive {
                background-image: url('../images/pickerdate-1.png');
            }

        .course-item .thumb {
            position: relative;
            height: 0;
            padding-top: 56%;
        }

            .course-item .thumb img {
                position: absolute;
                top: 0;
                max-height: none;
                height: auto;
            }

        .btn-delete {
            position: absolute;
            right: 30px;
            /*bottom: 10px;*/
            display: none;
        }

        .ls-practice li:hover .btn-delete {
            display: inline-block
        }

        .ls-practice .btn-delete:hover {
            border: solid 1px #CCC;
            border-radius: 2px;
        }
    </style>
    <script>
        var isSearchDate = false;
        new Vue({
            el: "#main_content",
            mounted() {
                //var start = moment();
                //var end = moment().add(29, 'days');
                //$('input[name="dates"]').daterangepicker({
                //    startDate: start,
                //    endDate: end,
                //    locale: {
                //        format: "DD/MM/YYYY",
                //    }
                //}, function (s, e, label) {
                //    RepDate(s,e);
                //    GetCourse();
                //});
                this.list_subject = @Html.Raw(Json.Serialize(subjects));
                this.list_grades_full = @Html.Raw(Json.Serialize(grades));
                //this.loadClassSubjects();
                //console.log(this.list_grades_full);
                this.changeSubject();
                //window.ChooseCalendar = this.chooseCalendar
                //window.GetCourse = this.getCourse
                //window.InitDate = this.initDate
                //window.DestroyDate = this.destroyDate
                //window.RepDate = this.repDate
                //$('input[name=dates]').siblings('.ic-picker').click(function () {
                //    if (isSearchDate) {
                //        DestroyDate(this)
                //    }
                //    else {
                //        InitDate();
                //    }
                //});
                this.isMobileDevice();
            },
            data: {
                list_course: [
                ],
                list_subject: [],
                list_grades_full: [],
                list_grades: [],
                subject:'',
                grade: '',
                view: 10,
                page: 1,
                startdate: moment(new Date(1800,1,1)),
                enddate: moment(new Date(1800, 1, 1)),
                classSubjects: [],
                classes: [],
                checkClass(c1, c2) {
                    console.log(c1);
                    console.log(c2);
                    return c1 == c2
                },
                loadClassSubjects() {
                    //debugger
                    let _that = this
                    //if (_that.classSubjects.length > 0)
                    //    return;

                    let _form = new FormData()
                    //_form.append('ClassID', _that.classID)
                    _form.append('GradeID', _that.grade)
                    _form.append('SubjectID', _that.subject)
                    let _url = '@processUrl("GetClassSubjects", "ClassSubject")'
                        axios.post(_url, _form)
                            .then(response => {
                                //var _data = response.data.Data;
                                if (response.data.Classes.length == 0) {
                                    swal({
                                        title: "Bạn chưa có trong lớp học nào, liên hệ với giáo viên hoặc chuyển đến học liệu để thêm vào lớp cá nhân của bạn",
                                        text: "Click tại đây để chuyển đến học liệu tương tác",
                                        icon: "warning",
                                        buttons: true,
                                        dangerMode: true,
                                    })
                                        .then((willDelete) => {
                                            if (willDelete) {
                                                window.location.href="@processUrl("Index", "Reference")#docsinteractive"
                                            }
                                        });
                                    //Swal.fire("Bạn chưa có trong lớp học nào, liên hệ với giáo viên hoặc chuyển đến học liệu để thêm vào lớp cá nhân của bạn", "Click tại đây để chuyển đến học liệu tương tác", "warning");
                                }
                                else {
                                    this.classes = response.data.Classes;
                                    this.classSubjects = response.data.Data;
                                }
                                //_data.forEach(function (item, k) {
                                //    _that.classSubjects.push({
                                //        ID: item.ID,
                                //        Title: item.SkillName,
                                //        Image: item.SkillImage,
                                //        Color: item.Color,
                                //        Teacher: item.TeacherName,
                                //        Grade: item.GradeName,
                                //        Chapters: [],
                                //        Lessons: [],
                                //        TypeClass: item.TypeClass,
                                //        ClassName: item.ClassName,
                                //        ClassID: item.ClassID,
                                //        CourseName: item.CourseName,
                                //        SubjectName: item.SubjectName,
                                //        StartDate: item.StartDate,
                                //        EndDate: item.EndDate
                                //    })
                                //    //_that.changeAddSubject(item)
                                //    //_that.changeAddGrade(item)
                                //})
                                //_that.$forceUpdate()
                            }).catch(e => { })
                }
            },
            //computed: {
            //    sDate: {
            //        get() {
            //            return moment(this.startdate).format("MM/DD/YYYY");
            //        },
            //        set(value) {
            //            this.startdate = value;
            //        }
            //    },
            //    eDate: {
            //        get() {
            //            return moment(this.enddate).format("MM/DD/YYYY");
            //        },
            //        set(value) {
            //            this.enddate = value;
            //        }
            //    }
            //},
            watch: {
            },
            methods: {
                @*getCourse() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('GradeID', _that.grade)
                    _form.append('SubjectID', _that.subject)
                    //_form.append('PageSize', _that.view)
                    //_form.append('PageIndex', _that.page)
                    //_form.append('StartDate', _that.sDate)
                    //_form.append('EndDate', _that.eDate)
                    let _url = '@processUrl("GetList", "Course")'
                    axios.post(_url, _form)
                        .then(response => {
                            console.log(response.data)
                            _that.list_course = response.data.Data;
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },*@
                changeSubject() {
                    let _that = this
                    //console.log(this.subject)
                    //console.log(this.list_grades_full)
                    _that.list_grades = [];

                    for (i = 0; i < _that.list_grades_full.length; i++)
                    {
                        //console.log(_that.list_grades_full[i].SubjectID)
                        if (_that.list_grades_full[i].SubjectID == _that.subject) {
                            _that.list_grades.push(_that.list_grades_full[i])
                        }
                    }
                    _that.grade = ""
                    _that.changeGrade()
                },
                changeGrade() {
                    let _that = this
                    _that.loadClassSubjects()
                },
                formatShortDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD/MM/YYYY")
                },
                //chooseCalendar() {
                //    $('input[name=dates]').focus().click()
                //},
                //initDate() {
                //    if (isSearchDate) return;
                //    let _that = this
                //    var start = moment();
                //    var end = moment().add(29, 'days');
                //    $('input[name="dates"]').daterangepicker({
                //        startDate: start,
                //        endDate: end,
                //        locale: {
                //            format: "DD/MM/YYYY",
                //        }
                //    }, function (s, e, label) {
                //        RepDate(s, e);
                //        GetCourse();
                //    });
                //    $('input[name="dates"]').siblings().removeClass('inactive');
                //    isSearchDate = true;
                //    $('input[name="dates"]').focus().click();
                //    _that.startdate = start;
                //    _that.enddate = end;
                //    GetCourse()
                //},
                //destroyDate() {
                //    let _that = this
                //    console.log(isSearchDate);
                //    if (!isSearchDate) return false;
                //    //$('input[name="dates"]').daterangepicker().destroy()
                //    $('input[name="dates"]').data('daterangepicker').remove();
                //    $('input[name="dates"]').val('-- Chọn thời gian --');
                //    $('input[name="dates"]').siblings().addClass('inactive');
                //    isSearchDate = false;
                //    console.log(isSearchDate);
                //    _that.startdate = moment(new Date(1800,1,1)),
                //    _that.enddate = moment(new Date(1800,1,1)),
                //    GetCourse();
                //},
                cacheImg(src, width, height) {
                    return cacheStatic(src, width, height, 'picture/book.jpg');
                },
                //repDate(svalue, evalue) {
                //    this.eDate = evalue;
                //    this.sDate = svalue;
                //},
                removeCourse(csbj) {
                    let _form = new FormData()
                    _form.append('ClassSubjectID', csbj.ID);
                    //let _url = '@processUrl("RemoveCourse", "Class")';
                    let _url = '@processUrl("Remove", "Class")';
                    Swal.fire({
                        //title: "Xác nhận xoá học liệu " + csbj.CourseName + " ?",
                        html: "Xác nhận xoá học liệu <br/><b>" + csbj.CourseName + "</b> ?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Xóa',
                        cancelButtonText: 'Hủy',
                    }).then(result => {
                        if (result.value) {
                            Swal.fire({
                                title: 'Đang xóa học liệu ...',
                                onBeforeOpen() {
                                    Swal.showLoading()
                                },
                                onAfterClose() {
                                    Swal.hideLoading()
                                },
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                allowEnterKey: false
                            });
                            axios.post(_url, _form)
                                .then(response => {
                                    if (!response.data.Status) {//xoa khong thanh cong
                                        Swal.fire(response.data.Msg, "warning")
                                        //alert(response.data.Msg);
                                    }
                                    else {//xoa thanh cong
                                        Swal.fire(response.data.Msg, "success");
                                        //remove deleted course

                                        this.classSubjects.splice(this.classSubjects.indexOf(csbj), 1);

                                        //alert(response.data.Msg);
                                        //_that.changeSubject();
                                        //Swal.close();
                                    }
                                }).catch(e => {
                                    console.log(e);
                                    Swal.close()
                                })
                        }
                        else {
                            Swal.close();
                            return false;
                        }
                    });
                },
                isMobileDevice() {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        // true for mobile device
                        console.log("Mobile detected");
                        return true;
                    } else {
                        // false for not mobile device
                        console.log("Desktop detected");
                        return false;
                    }
                }
            }
        });

        //lazy load
        Vue.use(VueLazyload, {
            preLoad: 1.3,
            error: '~/pictures/book.jpg',
            //loading: '~/img/Spin-1.8s-200px.gif',
            attempt: 1,
            // the default is ['scroll', 'wheel', 'mousewheel', 'resize', 'animationend', 'transitionend']
            //listenEvents: ['scroll']
        })

        @*$(document).ready(function () {
            alert(@TempData["message"])
        });*@

    </script>
}