@{

    Layout = "~/Views/Shared/_LayoutStudent_NewUI.cshtml";
    var model = ViewBag.Model as BaseCustomerMVC.Models.DefaultModel;
    ViewData["Title"] = "My Courses";
    var subjects = ViewBag.Subjects as List<BaseCustomerEntity.Database.SubjectEntity>;
    var grades = ViewBag.Grades as List<BaseCustomerEntity.Database.GradeEntity>;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    string processUrl(string act, string ctrl)
    {
        string url = Url.Action(act, ctrl);

        return $"/{center}{url}";
    }
}

<script>
    setActiveMenu("class");
</script>

<script src="~/js/daterangepicker.min.js"></script>
<link href="~/css/daterangepicker.css" rel="stylesheet" />

<section class="module" id="dashboard_content">
    <div class="card-header">

        <div class="flex flex-row border-b flex-wrap pb-2 align-items-center">
            <div class="box filter-box d-none">
                <input type="text" value="-- Chọn thời gian --" name="dates" v-on:click="initDate()">
                <span class="ic ic-picker inactive"></span>
            </div>
            <div class="box filter-box col-12 col-md-3 ml-0 mb-1">
                <select v-model="subject" v-on:change="changeSubject()">
                    <option value="">Chọn chương trình</option>
                    <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                </select>
            </div>
            <div class="box filter-box col-12 col-md-3 ml-0 mb-1 ml-md-2">
                <select name="" v-model="grade" v-on:change="changeGrade()">
                    <option value="">Chọn cấp độ</option>
                    <option v-for="(item,k) in list_grades" :value="item.ID">{{item.Name}}</option>
                </select>
            </div>
            <div class="search-box col-12 col-md-3 mb-1 ml-0 ml-md-2">
                <button><i class="ic ic-find"></i></button>
                <input type="text" name="" placeholder="Tên lớp cần tìm">
            </div>
        </div>
    </div>

    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-body" v-cloak>
        <div class="form-group">
            <h2 style="font-size:16px;" class="font-weight-bold">Học liệu chính quy</h2>
            <ul class="list ls-practice row">
                <li v-for="(item,k) in classSubjects" class="form-row col-md-6 col-sm-12" v-if="item.TypeClass == @BaseCustomerEntity.Database.CLASS_TYPE.STANDARD && item.ClassID!=myClassID">
                    <div class="inner row w-100" style="max-height:150px">
                        <div class="col-md-2" style="text-align:center;margin:auto;width:100px">
                            <img :src="cacheStatic(item.Image,90,130)" :title="item.CourseName" />
                        </div>
                        <div class="col-md-10">
                            <a :href="'@processUrl("Modules","Course")/' + item.ID" :title="item.CourseName" v-b-toggle="`collapse-${i}`" class="btn-collapse parent flex align-items-center pb-2 mb-0 pt-2" :style="'color: ' + item.Color">
                                {{item.CourseName + ' (Lớp: ' + item.ClassName + ')'}}
                                @*<i class="far fa-arrow-alt-circle-down ml-1"></i>*@
                            </a>
                            <p><span>Chương trình: {{item.SubjectName}}</span> - <span>Môn học: {{item.Title}}</span></p>
                            <p><i class="ti-time"></i> {{formatShortDate(item.EndDate)}}</p>
                        </div>
                    </div>
                </li>
            </ul>
        </div>

        <div class="form-group">
            <h2 style="font-size:16px;" class="font-weight-bold">Học liệu chuyên đề</h2>
            <ul class="list ls-practice row">
                <li v-for="(item,k) in classSubjects" class="form-row col-md-6 col-sm-12" v-if="item.TypeClass == @BaseCustomerEntity.Database.CLASS_TYPE.EXTEND && item.ClassID!=myClassID">
                    <div class="inner row w-100" style="max-height:150px">
                        <div class="col-md-2" style="text-align:center;margin:auto;width:100px">
                            <img :src="cacheStatic(item.Image,90,130)" :title="item.CourseName" />
                        </div>
                        <div class="col-md-10">
                            <a :href="'@processUrl("Modules","Course")/' + item.ID" :title="item.CourseName" v-b-toggle="`collapse-${i}`" class="btn-collapse parent flex align-items-center pb-2 mb-0 pt-2" :style="'color: ' + item.Color">
                                {{item.CourseName + ' (Lớp: ' + item.ClassName + ')'}}
                                @*<i class="far fa-arrow-alt-circle-down ml-1"></i>*@
                            </a>
                            <p><span>Chương trình: {{item.SubjectName}}</span> - <span>Môn học: {{item.Title}}</span></p>
                            <p><i class="ti-time"></i> {{formatShortDate(item.EndDate)}}</p>
                        </div>
                    </div>
                </li>
            </ul>
        </div>

        <div class="form-group">
            <h2 style="font-size:16px;" class="font-weight-bold">Học liệu cá nhân</h2>
            <ul class="list ls-practice row">
                <li v-for="(item,k) in classSubjects" class="form-row col-md-6 col-sm-12" v-if="item.ClassID == myClassID">
                    <div class="inner row w-100" style="max-height:150px">
                        <div class="col-md-2" style="text-align:center;margin:auto;width:100px">
                            <img :src="cacheStatic(item.Image,90,130)" :title="item.CourseName" />
                        </div>
                        <div class="col-md-10" style="position:relative">
                            <a :href="'@processUrl("Modules","Course")/' + item.ID" :title="item.CourseName" v-b-toggle="`collapse-${i}`" class="btn-collapse parent flex align-items-center pb-2 mb-0 pt-2" :style="'color: ' + item.Color">
                                {{item.CourseName + ' (Lớp: ' + item.ClassName + ')'}}
                                @*<i class="far fa-arrow-alt-circle-down ml-1"></i>*@
                            </a>
                            <div><span>Chương trình: {{item.SubjectName}}</span> - <span>Môn học: {{item.Title}}</span></div>
                            <div><i class="ti-time"></i> @DateTime.Now.ToString("dd-MM-yyyy")</div>
                            <button type="button" class="btn btn-outline-danger" v-on:click="removeCourse(item.ID,item.CourseName)"><i class="fas fa-minus-circle"></i></button>
                        </div>
                    </div>
                </li>
            </ul>
        </div>

        @*<div class="row row-list">
            <div class="col-md-3 course-item" v-for="(item,k) in list_course">
                <div class="box radius">
                    <a :href="'@processUrl("Detail", "Course")/' + item.ID" class="thumb"><img :src="cacheStatic(item.Thumb,256)" :alt="item.Name" class="w-100"></a>
                    <div class="detail box">
                        <a :href="'@processUrl("Detail", "Course")/' + item.ID" title="" class="title">{{item.Name}}</a>
                        <p><i class="ti-time"></i>{{formatShortDate(item.EndDate)}}</p>
                        <div class="c-bot flex-row flex align-items-center">
                            <a :href="'@processUrl("Detail", "Course")/' + item.ID" title="Học ngay" class="btn-learn">Học ngay</a>
                            <div class="ml-auto">
                                {{item.CompletePercent + '%'}}<span class="ic ic-subtag ml-1" style="margin-bottom: -1px"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="box margin-t20 flex">
            <div class="paging-view">
                Hiển thị:
                <select name="" v-model="view" v-on:change="getCourse()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                <div class="inner">
                    <button><i class="ti-angle-left"></i></button>
                    <button><i class="ti-angle-double-left"></i></button>
                    <input type="text" v-model="page" />
                    <button><i class="ti-angle-double-right"></i></button>
                    <button><i class="ti-angle-right"></i></button>
                </div>
            </div>
        </div>*@

    </div>
</section>

@section Scripts{
    <style>

        .ic-picker {
            cursor: pointer;
        }

            .ic-picker.inactive {
                background-image: url('../images/pickerdate-1.png');
            }

        .course-item .thumb {
            position: relative;
            height: 0;
            padding-top: 56%;
        }

            .course-item .thumb img {
                position: absolute;
                top: 0;
                max-height: none;
                height: auto;
            }

        .btn-outline-danger {
            position: absolute;
            right: 30px;
            bottom: 10px;
            display:none;
        }

        .ls-practice li:hover .btn-outline-danger {
            display: inline-block
        }
    </style>
    <script>
        var isSearchDate = false;
        new Vue({
            el: "#main_content",
            mounted() {
                //var start = moment();
                //var end = moment().add(29, 'days');
                //$('input[name="dates"]').daterangepicker({
                //    startDate: start,
                //    endDate: end,
                //    locale: {
                //        format: "DD/MM/YYYY",
                //    }
                //}, function (s, e, label) {
                //    RepDate(s,e);
                //    GetCourse();
                //});
                this.list_subject = @Html.Raw(Json.Serialize(subjects));
                this.list_grades_full = @Html.Raw(Json.Serialize(grades));
                this.loadClassSubjects();
                //console.log(this.list_grades_full);
                this.changeSubject()
                window.ChooseCalendar = this.chooseCalendar
                window.GetCourse = this.getCourse
                window.InitDate = this.initDate
                window.DestroyDate = this.destroyDate
                window.RepDate = this.repDate
                $('input[name=dates]').siblings('.ic-picker').click(function () {
                    if (isSearchDate) {
                        DestroyDate(this)
                    }
                    else {
                        InitDate();
                    }
                });
            },
            data: {
                list_course: [
                ],
                list_subject: [],
                list_grades_full: [],
                list_grades: [],
                subject:'',
                grade: '',
                view: 10,
                page: 1,
                startdate: moment(new Date(1800,1,1)),
                enddate: moment(new Date(1800, 1, 1)),
                classSubjects: [],
                myClassID: '',
                loadClassSubjects() {
                    //debugger
                    let _that = this
                    if (_that.classSubjects.length > 0)
                        return;

                    let _form = new FormData()
                    //_form.append('ClassID', _that.classID)
                    let _url = '@processUrl("GetClassSubjects", "ClassSubject")'
                        axios.post(_url, _form)
                            .then(response => {
                                var _data = response.data.Data;
                                _that.myClassID = response.data.MyClassID;
                                _that.classSubjects = [];
                                _data.forEach(function (item, k) {
                                    _that.classSubjects.push({
                                        ID: item.ID,
                                        Title: item.SkillName,
                                        Image: item.SkillImage,
                                        Color: item.Color,
                                        Teacher: item.TeacherName,
                                        Grade: item.GradeName,
                                        Chapters: [],
                                        Lessons: [],
                                        TypeClass: item.TypeClass,
                                        ClassName: item.ClassName,
                                        ClassID: item.ClassID,
                                        CourseName: item.CourseName,
                                        SubjectName: item.SubjectName
                                    })
                                    //_that.changeAddSubject(item)
                                    //_that.changeAddGrade(item)
                                })
                                //_that.$forceUpdate()
                            }).catch(e => { })
                }
            },
            computed: {
                sDate: {
                    get() {
                        return moment(this.startdate).format("MM/DD/YYYY");
                    },
                    set(value) {
                        this.startdate = value;
                    }
                },
                eDate: {
                    get() {
                        return moment(this.enddate).format("MM/DD/YYYY");
                    },
                    set(value) {
                        this.enddate = value;
                    }
                }
            },
            watch: {
            },
            methods: {
                getCourse() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('GradeID', _that.grade)
                    _form.append('SubjectID', _that.subject)
                    _form.append('PageSize', _that.view)
                    _form.append('PageIndex', _that.page)
                    //_form.append('StartDate', _that.sDate)
                    //_form.append('EndDate', _that.eDate)
                    let _url = '@processUrl("GetList", "Course")'
                    axios.post(_url, _form)
                        .then(response => {
                            console.log(response.data)
                            _that.list_course = response.data.Data;
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },
                changeSubject() {
                    let _that = this
                    //console.log(this.subject)
                    //console.log(this.list_grades_full)
                    _that.list_grades = [];

                    for (i = 0; i < _that.list_grades_full.length; i++)
                    {
                        //console.log(_that.list_grades_full[i].SubjectID)
                        if (_that.list_grades_full[i].SubjectID == _that.subject) {
                            _that.list_grades.push(_that.list_grades_full[i])
                        }
                    }
                    _that.grade = ""
                    _that.changeGrade()
                },
                changeGrade() {
                    let _that = this
                    _that.getCourse()
                },
                formatShortDate(date) {
                    if (moment(date) < moment(new Date(2000, 1, 1))) return "-"
                    return moment(date).format("DD-MM-YYYY")
                },
                chooseCalendar() {
                    $('input[name=dates]').focus().click()
                },
                initDate() {
                    if (isSearchDate) return;
                    let _that = this
                    var start = moment();
                    var end = moment().add(29, 'days');
                    $('input[name="dates"]').daterangepicker({
                        startDate: start,
                        endDate: end,
                        locale: {
                            format: "DD/MM/YYYY",
                        }
                    }, function (s, e, label) {
                        RepDate(s, e);
                        GetCourse();
                    });
                    $('input[name="dates"]').siblings().removeClass('inactive');
                    isSearchDate = true;
                    $('input[name="dates"]').focus().click();
                    _that.startdate = start;
                    _that.enddate = end;
                    GetCourse()
                },
                destroyDate() {
                    let _that = this
                    console.log(isSearchDate);
                    if (!isSearchDate) return false;
                    //$('input[name="dates"]').daterangepicker().destroy()
                    $('input[name="dates"]').data('daterangepicker').remove();
                    $('input[name="dates"]').val('-- Chọn thời gian --');
                    $('input[name="dates"]').siblings().addClass('inactive');
                    isSearchDate = false;
                    console.log(isSearchDate);
                    _that.startdate = moment(new Date(1800,1,1)),
                    _that.enddate = moment(new Date(1800,1,1)),
                    GetCourse();
                },
                cacheStatic(src,width ,height) {
                    if (src.startsWith("http"))
                        return src;
                    return "https://static.eduso.vn/" + src + "?w=" + width + "&&h=" + height;
                },
                repDate(svalue, evalue) {
                    this.eDate = evalue;
                    this.sDate = svalue;
                },
                removeCourse(ID,Name) {
                    let _that = this
                    let _form = new FormData()
                    _form.append('ClassSubjectID', ID);
                    let _url = '@processUrl("Remove", "Class")';
                    if (window.confirm("Bạn muốn xoá học liệu " + Name + " ?")) {
                        axios.post(_url, _form)
                            .then(response => {
                                if (!response.data.Status) {
                                    alert(response.data.Msg);
                                }
                                else {
                                    alert(response.data.Msg);
                                }
                            }).catch(e => {
                                alert(e);
                            })
                    }
                    else return false;
                }
            }
        });

        @*$(document).ready(function () {
            alert(@TempData["message"])
        });*@

    </script>
}