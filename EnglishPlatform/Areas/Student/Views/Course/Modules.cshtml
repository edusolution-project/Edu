@{
    Layout = "~/Views/Shared/_LayoutStudent_NewUI.cshtml";
    var currentCs = ViewBag.ClassSubject as BaseCustomerMVC.Models.ClassSubjectViewModel;
    //var completePercent = (int)ViewBag.CompletePercent;
    ViewData["Title"] = currentCs.SkillName + " - " + currentCs.ClassName;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    string processUrl(string act, string ctrl, Object param = null)
    {
        string url = Url.Action(act, ctrl, param);

        return $"/{center}{url}";
    }
}

<script>
    setActiveMenu("course");
</script>

<style>
    .red-color {
        color: #D03239 !important;
    }

    .red-bg {
        background-color: #D03239 !important;
    }

    .blue-color {
        color: #0194e4 !important;
    }

    .blue-bg {
        background-color: #0194e4 !important;
    }

    .green-color {
        color: #00bf7a !important;
    }

    .green-bg {
        background-color: #00bf7a !important;
    }

    .yellow-color {
        color: #F7971E !important;
    }

    .yellow-bg {
        background-color: #F7971E !important;
    }
</style>
<section class="module" id="dashboard_content">
    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-header" v-cloak>
        <div class="flex border-b pb-2">
            <h2 class="title"><a href="@processUrl("Detail", "Course")/@currentCs.ClassID#module" title="@currentCs.ClassName" class="text-dark"><i class="ti-arrow-left d-none"></i>@currentCs.ClassName</a> / <span class="end-break">@currentCs.SkillName (@currentCs.CompletedLesssons/@currentCs.TotalLessons)</span></h2>
            <div class="c-right bad">
                <div class="flex">
                    <b-progress :value="@currentCs.CompletedLesssons" :max="@currentCs.TotalLessons" class="mb-3"></b-progress>
                    <span>
                        @if (currentCs.TotalLessons > 0)
                        {
                            var complete = currentCs.CompletedLesssons * 100.00 / currentCs.TotalLessons;
                            @: @complete.ToString("0.00")%
                        }
                        else
                        {
                            @:0%
                        }
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body" v-cloak>
        <div class="box">
            <ul class="list ls-pratice">
                <chap-content v-for="(item,k) in list_data"
                              v-bind:data="item"
                              v-bind:pos="k"
                              v-if="item.ParentID == '0'"
                              v-bind:subchaps="list_data">
                </chap-content>
                <lesson-item v-for="lesson in filterLesson({ID:'0'})" v-bind:data="lesson" v-bind:classSubject="`@currentCs.ID`"></lesson-item>
            </ul>
        </div>
    </div>
</section>



@section Scripts {
    <style>
        .ls-pratice .list {
            max-height: none;
        }

        .ls-pratice li .inner {
            border: none;
        }

        .btn-collapse {
            border-bottom: .5px solid #D0DFE8;
            margin-bottom: 0;
            padding: 5px 0 13px;
        }

        .btn-act {
            font-size: 12px;
        }

        .c.schedule {
            font-size: 12px;
        }
    </style>

    <script type="text/x-template" id="chapContentTemp">
        <li class="col-md-12">
            <div class="inner">
                <a href="javascript:;" v-b-toggle="`prc-${data.ID}-${pos}`" class="blue-color btn-collapse" v-on:click="getSubList(data.ID, pos)" :id="data.ID"><i class="ic far fa-folder mr-2"></i>{{data.Name + ' (' + data.TotalLessons + ')'}}<i class="ic ic-collapse"></i></a>
                <b-collapse :id="`prc-${data.ID}-${pos}`" @*:accordion="`my-accordion-${data.ParentID}`"*@ :title="`my-accordion-${data.ParentID}`" role="tabpanel">
                    <b-card-body>
                        <ul class="list">
                            <chap-content v-for="(item,k) in subchaps"
                                          v-bind:data="item"
                                          v-bind:pos="k"
                                          v-bind:subchaps="subchaps"
                                          v-if="item.ParentID == data.ID"></chap-content>
                            <lesson-item v-for="lesson in filterLesson(data.ID)" v-bind:lesson="lesson" v-bind:classSubject="data.ClassSubject"></lesson-item>
                        </ul>
                    </b-card-body>
                </b-collapse>
            </div>
        </li>
    </script>

    <script type="text/x-template" id="lessonItemTemp">
        <li class="sub-practice d-flex flex-column" :id="lesson.ID">
            <div class="d-flex justify-content-between w-100 align-items-center">
                <a :href="'@processUrl("Detail", "Lesson")/' + lesson.ID + '/@currentCs.ID'" v-on:click.prevent="GoLesson(lesson.ID)" class="text-dark"><i class="ic far fa-file-alt mr-2"></i>{{lesson.Title}}</a>
                <ul class="time-line flex">
                    <li v-if="isValidTime(lesson.StartDate)"><i class="ti-time"></i>{{formatTime(lesson.StartDate)}} </li>
                    <li v-if="isValidTime(lesson.EndDate)"><i class="ti-time"></i>{{formatTime(lesson.EndDate)}} </li>
                </ul>
            </div>
            @*Exam*@
            <div class="d-flex justify-content-start w-100 mt-2 align-items-center">
                <template v-if="lesson.TemplateType === 2">
                    <template v-if="!isValid(lesson)">
                        <a title="CHƯA MỞ" class="btn-act act ml-0 bg-secondary pt-0 pb-0 pl-2 pr-2" style="min-width:unset; font-size:60%;" v-if="moment(lesson.StartDate) > moment()" v-on:click="lockNotify(lesson,1)">CHƯA MỞ</a>
                        <a title="HẾT HẠN" class="btn-act act ml-0 bg-secondary pt-0 pb-0 pl-2 pr-2" style="min-width:unset; font-size:60%;" v-else v-on:click="lockNotify(lesson,0)">HẾT HẠN</a>
                    </template>
                    <template v-else-if="lesson.Tried > 0">
                        <a :href="'@processUrl("Detail", "Lesson")/' + lesson.ID + '/@currentCs.ID'" v-if="lesson.LastExam != null" class="btn-act act ml-0 bg-success pt-0 pb-0 pl-2 pr-2" style="min-width:unset; font-size:60%;" title="ĐÃ LÀM">ĐÃ LÀM</a>
                        <a :href="'@processUrl("Detail", "Lesson")/' + lesson.ID + '/@currentCs.ID'" v-else class="btn-act act ml-0 bg-warning pt-0 pb-0 pl-2 pr-2" style="min-width:unset; font-size:60%;" title="ĐANG LÀM">ĐANG LÀM</a>
                    </template>
                    <template v-else>
                        <a :href="'@processUrl("Detail", "Lesson")/' + lesson.ID + '/@currentCs.ID'" title="Làm bài" class="btn-act act ml-0 bg-info pt-0 pb-0 pl-2 pr-2" style="min-width:unset; font-size:60%;">CHƯA LÀM</a>
                    </template>
                    <div v-if="isValidTime(lesson.LastJoin)" class="text-muted ml-2" style="font-size:90%">
                        @*<span>Làm bài lần cuối</span>*@
                        <span>{{formatTime(lesson.LastJoin)}}</span> - @*Kết quả:*@
                        <span class="bg-transparent text-primary font-weight-bold" v-bind:class="{'text-danger' : parseInt(lesson.DoPoint) < 50, 'text-success' : parseInt(lesson.DoPoint) > 70}">{{lesson.DoPoint.toFixed(2)}}%</span>
                    </div>
                    <a v-if="lesson.Tried > 0 && lesson.LastExam != null" :href="'@processUrl("Review", "Lesson")/' + lesson.LastExam" title="Xem đáp án" class="pt-0 pb-0 pl-2 pr-2 ml-1 text-muted" style="min-width:unset; font-size: 90%;"> (Xem đáp án)</a>
                </template>
                <template v-else>
                    <a :href="'@processUrl("Detail", "Lesson")/' + lesson.ID + '/@currentCs.ID'" v-if="isValidTime(lesson.LastJoin)" title="ĐÃ HỌC" class="btn-act act ml-0 bg-success pt-0 pb-0 pl-2 pr-2" style=" min-width:unset; font-size:60%;">ĐÃ HỌC</a>
                    <a :href="'@processUrl("Detail", "Lesson")/' + lesson.ID + '/@currentCs.ID'" v-else title="CHƯA HỌC" class="btn-act act ml-0 pt-0 pb-0 pl-2 pr-2 bg-info" style="font-size:60%; min-width: unset;">CHƯA HỌC</a>
                    <div v-if="isValidTime(lesson.LastJoin)" class="text-muted" style="font-size:90%">
                        @*<span class="ml-2">Học lần cuối: </span>*@
                        <span class="ml-2">{{formatTime(lesson.LastJoin)}}</span>
                    </div>
                </template>
            </div>
        </li>
    </script>


    <script>
        Vue.component('chap-content', {
            template: '#chapContentTemp',
            props: {
                subchaps: Array,
                data: Object,
                pos: String
            }
        })
        Vue.component('lesson-item',{
            template: '#lessonItemTemp',
            props: {
                lesson: Object,
                classSubject: String
            }
        })

        new Vue({
        el: "#dashboard_content",
		mounted(){
            this.getList()
            window.filterChap = this.filterChap
            window.getSubList = this.getSubList
            window.filterLesson = this.filterLesson
            window.isValidTime = this.isValidTime
            window.formatTime = this.formatTime
            window.isValid = this.isValid
            window.GoLesson = this.goLesson
            var hash = window.location.hash;
                if (hash.startsWith('#')) {
                    hash = hash.split('#')[1]
                    var needscroll = true;
                    var lessonID = hash;
                    var r = setInterval(function () {
                        if (needscroll) {
                            var container = $("#" + lessonID);
                            if (container.length > 0) {
                                container.scrollTop = 0;
                                needscroll = false;
                            }
                            //alert(1);
                        }
                    }, 200);
                }
		},
        data: {
            list_data: [],
            list_lessons: [],
            load_chapter: [],
            view : 10,
            page : 1
        },
        watch : {
        },
        methods: {
            getList(){
                let _that = this
                let _form = new FormData()
                _form.append('ID', '@currentCs.ID')
                let _url = '@processUrl("GetMainChapters", "Course")'
                axios.post(_url, _form)
                    .then(response => {
                        //console.log(response.data.Data)
                        _that.list_data = response.data.Data.Chapters;
                        //var data = response.data.Data;
                        //data.forEach(function (item) { getSubList(item.ID)});
                        var lessons = response.data.Data.Lessons;
                        //console.log(lessons)
                        lessons.forEach(function (lesson) {
                            if (_that.list_lessons.findIndex(t => t.ID == lesson.ID) == -1)
                                _that.list_lessons.push(lesson)
                        })
                        this.list_data = _that.list_data;
                        console.log(this.list_data);
                        this.list_lessons = _that.list_lessons;                        
                        if (window.location.hash != "")
                        {

                        }

                        //console.log(_that.active_course);
                    }).catch(e => { })
            },
            filterChap(ID, list) {
                return list.filter((p) => {
        	        return p.ParentID == ID
                })
            },
            filterLesson(ID) {
                console.log(ID);
                console.log(this.list_lessons);
                return this.list_lessons.filter((p) => {
        	        return p.ChapterID == ID
                })
            },
            getSubList(chapterId, pos){
                let _that = this
                if (_that.load_chapter.findIndex(t=> t == chapterId) < 0) {
                    //var name = _that.list_data[pos].Name;
                    let _form = new FormData()
                    //_that.list_data[pos].Name = _that.list_data[pos].Name + "...";
                    _form.append('ID', '@currentCs.ID')
                    _form.append('ChapterID', chapterId)
                    let _url = '@processUrl("GetChapterContent", "Lesson")'
                    axios.post(_url, _form)
                        .then(response => {
                            var chapters = response.data.Data.Chapters;
                            if (chapters != null && chapters.length > 0)
                            {
                                chapters.forEach(function(chapter)
                                {
                                    getSubList(chapter.ID);
                                    _that.list_data.push(chapter);
                                })
                            }

                            var lessons = response.data.Data.Lessons;
                            //console.log(lessons)
                            lessons.forEach(function (lesson) {
                                if(_that.list_lessons.findIndex(t=>t.ID == lesson.ID) == -1)
                                    _that.list_lessons.push(lesson)
                            })
                            this.list_data = _that.list_data;
                            //console.log(this.list_data);
                            this.list_lessons = _that.list_lessons;
                            this.load_chapter.push(chapterId);
                        }).catch(e => { })
                }
            },
            formatTime(time) {
                if (!this.isValidTime(time)) return "";
                return moment(time).format("DD/MM/YYYY HH:mm")
            },
            isValidTime(time) {
                return (moment(time) > moment(new Date(2000, 1, 1)));
            },
            isValid(item) {
                var now = moment()
                if (moment(item.StartDate) > now) return false
                return (moment(item.EndDate) < moment(new Date(2000, 1, 1))) || (moment(item.EndDate) > now);
            },
            lockNotify(item, start) {
                if (start == 1)
                    Swal.fire({
                        title: 'Lưu ý',
                        html: 'Bài học sẽ mở lúc ' + this.formatTime(item.StartDate),
                        icon: 'warning'
                    });
                else
                    Swal.fire({
                        title: 'Lưu ý',
                        html: 'Bài học đã hết hạn lúc ' + this.formatTime(item.EndDate),
                        icon: 'warning'
                    });
            },
            goLesson(ID) {
                var state = {};
                var url = '@processUrl("Detail", "Lesson")/' + ID + '/@currentCs.ID'
                history.replaceState(state, document.title, '#' + ID);
                document.location.href = url;
            }
        }
    });
    </script>
}