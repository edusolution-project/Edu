@{

    ViewData["Title"] = "Tài liệu tham khảo";
    Layout = "~/Views/Shared/_LayoutStudent_NewUI.cshtml";
    var myClasses = ViewBag.AllClass as List<BaseCustomerEntity.Database.ClassEntity>;
    string center = ViewContext.RouteData.Values["basis"]?.ToString();
    var subjects = ViewBag.Subjects as List<BaseCustomerEntity.Database.SubjectEntity>;
    var grades = ViewBag.Grades as List<BaseCustomerEntity.Database.GradeEntity>;
    string processUrl(string act, string ctrl, Object param = null)
    {
        string url = Url.Action(act, ctrl, param);

        return $"/{center}{url}";
    }
}

<script>
    setActiveMenu("reference");
</script>

<section class="module" id="dashboard_content">
    <div class="h4 m-3" v-cloak cloak-holder>
        <i class="fas fa-sync fa-spin"></i> Đang nạp dữ liệu ...
    </div>
    <div class="card-header" v-cloak>
        <div class="flex border-b flex-wrap align-items-center">
            <div class="box filter-box col-12 col-md-2 m-1">
                <select v-model="subject">
                    <option value="">Chọn chương trình</option>
                    <option v-for="(item,k) in list_subject" :value="item.ID">{{item.Name}}</option>
                </select>
            </div>
            <div class="box filter-box col-12 col-md-2 m-1">
                <select v-model="grade">
                    <option value="">Chọn cấp độ</option>
                    <option v-for="(item,k) in list_grades_full" :value="item.ID" v-if="item.SubjectID == subject">{{item.Name}}</option>
                </select>
            </div>
            <div class="box filter-box col-12 col-md-2 m-1">
                <select v-model="range">
                    <option value="">-- Tất cả tài liệu --</option>
                    <option value="@BaseCustomerEntity.Database.REF_RANGE.ALL">Chung</option>
                    <option value="@BaseCustomerEntity.Database.REF_RANGE.CLASS">Lớp</option>
                    @*<option value="@BaseCustomerEntity.Database.REF_RANGE.CLASSSUBJECT">Môn</option>*@
                </select>
            </div>
            <div class="box filter-box col-12 col-md-2 m-1" v-if="range=='@BaseCustomerEntity.Database.REF_RANGE.CLASS'">
                <select v-model="target">
                    <option value="">-- Chọn lớp --</option>
                    @if (myClasses != null && myClasses.Count > 0)
                    {
                        foreach (var _class in myClasses)
                        {
                            <option value="@_class.ID">@_class.Name</option>
                        }
                    }
                </select>
            </div>
            <div class="search-box col-12 col-md-2 m-1">
                <button><i class="ic ic-find"></i></button>
                <input type="text" name="" v-model="searchTerm" placeholder="Tên tài liệu">
            </div>
        </div>
    </div>
    <div class="card-body" v-cloak>
        <div class="row ls-doc" v-if="tableData.length > 0">
            <div class="col-md-6" v-for="data in tableData">
                <div class="flex p-2 mb-2 inner" style="border-top: dotted 1px #DDD">
                    <a href="#" title="" class="thumb" style="max-width:130px; min-width:130px;">
                        <img :src="data.Image" alt="" v-if="data.Image != null" class="w-100">
                        <img src="~/pictures/book.jpg" alt="" v-else class="w-100">
                    </a>
                    <div class="entry p-0">
                        <div>
                            <div>
                                <a href="#" title="" class="title">{{data.Title}}</a>
                            </div>
                            @*<div>
                                    <div class="rating"><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i><i class="icofont icofont-star"></i></div>
                                    <div class="author pt-2"><i class="icofont icofont-teacher"></i> {{data.OwnerName}}</div>
                                </div>*@
                        </div>
                        <div class="pt-0 pb-2">
                            <p>{{domDecoder(data.Description)}}</p>
                        </div>
                        <div>
                            <a href="#" title="Mở link" class="text-success font-weight-bold mr-2" style="min-width:auto" v-on:click="openLink(data)" v-if="data.Link != null && data.Link.length > 0"><i class="fas fa-link"></i> ({{data.Linked}})</a>
                            <a href="#" title="Mở file" class="text-success font-weight-bold mr-2" style="min-width:auto" v-on:click="showPreview(data)" v-if="data.Media!= null && isDocType(data.Media.Extension)"><i class="far fa-eye font-weight-bold"></i> ({{data.Viewed}})</a>
                            <a href="#" class="text-success font-weight-bold mr-2" v-if="data.Media != null && data.isDownload" v-on:click="download(data)" :title="data.Media.Name"><i class="fas fa-cloud-download-alt"></i> ({{data.Downloaded}})</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row ls-doc text-center d-block" v-else>
            Không có tài liệu
        </div>
        <div class="box margin-t20 flex" v-if="tableData.length > 0">
            <div class="paging-view">
                Hiển thị:
                <select v-model="view" v-on:change="getData()">
                    <option value="10">10 kết quả</option>
                    <option value="20">20 kết quả</option>
                    <option value="30">30 kết quả</option>
                </select>
            </div>
            <div class="page-control">
                <div class="right">
                    <b-pagination v-model="page"
                                  :total-rows="totalRec"
                                  :per-page="view"
                                  v-on:input="getData()"></b-pagination>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modal_preview" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog modal-lg" style="max-width:90%; width:90%; position: absolute; top: 5%; bottom: 5%; left: 50%; margin-left: -45%;" role="document">
                <div class="modal-content h-100">
                    <div class="modal-header">
                        <h3 class="modal-title">Tài liệu {{title}}</h3>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Đóng">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="container-fluid">
                            <b-col class="form-group">
                                <embed class="embed-frame col-sm-12" frameborder="0" :src="linkFile + '#toolbar=0&navpanes=0&scrollbar=0&view=FitH'" v-if="linkFile.toLowerCase().endsWith('.pdf')" style="min-height:500px;"></embed>
                                <iframe class="embed-frame col-sm-12" frameborder="0" :src="'https://view.officeapps.live.com/op/embed.aspx?src='+linkFile" v-else style="min-height:500px;"></iframe>
                            </b-col>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts{
    <script>
        new Vue({
            el: "#main",
            mounted() {
                this.getData()
                this.list_subject = @Html.Raw(Json.Serialize(subjects));
                this.list_grades_full = @Html.Raw(Json.Serialize(grades));
            },
            data: {
                isLoading: false,
                range: '@BaseCustomerEntity.Database.REF_RANGE.ALL',
                target: '',
                searchTerm: '',
                tableData: [],
                view: 30,
                totalRec: 0,
                page: 1,
                subject: '',
                grade: '',
                addItem: {
                            ID: '',
                            Title: '',
                            Range: '',
                            Link: '',
                            Target: '',
                            Description: '',
                            FileName: '',
                            file: null,
                },
                allow_doc_ext: [".doc", ".docx", ".xlsx", ".xls", ".ptt", "pttx", ".pdf"],
                linkFile: '',
                title: '',
                list_subject: [],
                list_grades_full: [],
            },
            watch : {
                searchTerm: function(){
                    if(this.searchTimeout != null)
                        clearTimeout(this.searchTimeout)
                    var fn = this.getData
                    this.searchTimeout = setTimeout(function(){
                        fn()
                    }, 500)
                },
                subject: function () {
                    this.getData()
                },
                grade: function () {
                    this.getData()
                },
                range: function(){
                    this.getData()
                },
                target: function(){
                    this.getData()
                }
            },
            methods: {
                getData() {
                    let _that = this
                    let _form = new FormData()
                    _form.append('SearchText', _that.searchTerm)
                    _form.append('Range', _that.range)
                    _form.append('Target', _that.target)
                    _form.append('PageSize', _that.view)
                    _form.append('PageIndex', _that.page)
                    _form.append('SubjectID', _that.subject)
                    _form.append('GradeID', _that.grade)

                    let _url = '@processUrl("GetList", "Reference")'

                    axios.post(_url, _form)
                        .then(response => {
                            _that.tableData = response.data.Data;
                            this.tableData = _that.tableData
                            this.totalRec = response.data.Model.totalRecord
                            console.log(totalRec)
                            //var tt = response.data.Model.totalRecord;
                            //this.max_page = tt / this.view + (tt % this.view > 0 ? 1 : 0);
                            //console.log(_that.active_course);
                        }).catch(e => { })
                },
                openLink(obj) {
                    obj.Viewed = obj.Viewed + 1;
                    window.open('@processUrl("OpenLink", "Reference")/' + obj.ID);
                },
                download(obj) {
                    if (obj.Media == null)
                        return false;
                    obj.Downloaded = obj.Downloaded + 1;
                    window.open('@processUrl("Download", "Reference")/' + obj.ID);
                },
                domDecoder(str) {
                    if (str == null || str == 'null')
                        return "";
                    //console.log(str);
                    let parser = new DOMParser();
                    let dom = parser.parseFromString('<!doctype html><body>' + str, 'text/html');
                    return dom.body.textContent;
                },
                shortenString(str) {
                    if (str == null || str.length <= 15)
                        return "";
                    return str.substring(0, 15) + "..."
                },
                hideModal() {
                    $('.close').click();
                },
                showPreview(obj) {
                    let _form = new FormData()
                    _form.append('ID', obj.ID)
                    var link = obj.Media.Path;
                    var title = obj.Title;
                    let _url = '@processUrl("View", "Reference")'
                    axios.post(_url, _form)
                        .then(response => {
                            obj.Viewed = obj.Viewed + 1;
                        }).catch(e => { })
                    let _that = this;
                    //console.log(obj);
                    _that.linkFile = link;
                    _that.title = title;
                    this.linkFile = _that.linkFile;
                    this.title = _that.title;
                    $("#modal_preview").modal();
                },
                isDocType(path) {
                    if (path == null || path == "") return false;
                    var idx = path.toString().lastIndexOf('.');
                    if (idx <= 0) {
                        var ext = path.substring(idx, path.length - idx);
                        return this.allow_doc_ext.findIndex(t => t === ext) >= 0;
                    }
                }
            }
        });
    </script>
}

